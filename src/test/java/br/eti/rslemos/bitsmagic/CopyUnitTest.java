/*******************************************************************************
 * BEGIN COPYRIGHT NOTICE
 * 
 * The MIT License (MIT)
 * 
 * Copyright (c) 2016 Rodrigo Lemos
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * END COPYRIGHT NOTICE
 *******************************************************************************/
package br.eti.rslemos.bitsmagic;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.lang.reflect.Constructor;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.experimental.runners.Enclosed;
import org.junit.internal.runners.SuiteMethod;
import org.junit.runner.RunWith;

import br.eti.rslemos.bitsmagic.StorageBuilder.ByteArrayBuilder;
import br.eti.rslemos.bitsmagic.StorageBuilder.CharArrayBuilder;
import br.eti.rslemos.bitsmagic.StorageBuilder.IntArrayBuilder;
import br.eti.rslemos.bitsmagic.StorageBuilder.LongArrayBuilder;
import br.eti.rslemos.bitsmagic.StorageBuilder.ShortArrayBuilder;
import junit.framework.TestCase;
import junit.framework.TestSuite;

@RunWith(Enclosed.class)
public class CopyUnitTest {
	@Ignore
	public static abstract class Cases {
		public static abstract class CopyFromDifferentSource<T> implements StorageBuilder<T> {
			protected abstract void copyFrom(T source, int srcPos, T dest, int destPos, int length);
			
			@Test public void copyFrom_0_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  0, subject,  0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010110L);
				
				copyFrom(source,  0, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111110L);
				
				copyFrom(source,  0, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source,  0, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111110L);
				
				copyFrom(source,  0, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_20() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_32() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_40() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_64() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_96() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_128() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_160() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_192() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_224() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011010L);
				
				copyFrom(source,  2, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source,  2, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source,  2, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111010L);
				
				copyFrom(source,  2, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source,  2, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source,  2, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_20() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111010L);
				
				copyFrom(source,  2, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source,  2, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source,  2, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_28() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111010L);
				
				copyFrom(source,  2, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111101000L);
				
				copyFrom(source,  4, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source,  4, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source,  4, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_24() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_40() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_48() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_56() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_16() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_48() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_56() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_80() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_112() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_32() {
				T source   = build(0b1111111111111110011111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_96() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_112() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_160() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_176() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_224() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011010L);
				
				copyFrom(source,  0, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source,  0, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111100111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source,  0, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111010L);
				
				copyFrom(source,  0, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source,  0, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111110011111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source,  0, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_20() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_22() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_23() {
				T source   = build(0b1111111111111111111111111111111111111111001111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_30() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_31() {
				T source   = build(0b1111111111111111111111111111111100111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000001011111111111111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_36() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000110000000000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000101111111111111111111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111101000L);
				
				copyFrom(source,  0, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source,  0, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source,  0, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_30() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_40() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_44() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_46() {
				T source   = build(0b1111111111111111100111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000110000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000101111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_60() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1001111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_88() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_92() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_120() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_144() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_32() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_96() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_160() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_176() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_224() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_240() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_288() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_20() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_40() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_96() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_128() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_160() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_192() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_224() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110011111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_20() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_22() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111001111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_31() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000001011111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_36() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000110000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000101111111111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_40() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_46() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111100111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000110000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000101111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1001111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_92() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_144() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_96() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_160() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_224() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_288() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010110L);
				
				copyFrom(source,  2, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011110L);
				
				copyFrom(source,  2, subject,  0,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000011000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000010111110L);
				
				copyFrom(source,  2, subject,  0,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source,  2, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111110L);
				
				copyFrom(source,  2, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000001100000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000001011111111111110L);
				
				copyFrom(source,  2, subject,  0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_20() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000110000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000101111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_28() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_30() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_31() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000011000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000010111111111111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_36() {
				T source   = build(0b1111111111111111111111111001111111111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000011000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000010111101000L);
				
				copyFrom(source,  2, subject,  4,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000110000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000101111101000L);
				
				copyFrom(source,  2, subject,  4,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source,  2, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000011000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000010111111111111101000L);
				
				copyFrom(source,  2, subject,  4,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000110000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000101111111111111111111101000L);
				
				copyFrom(source,  2, subject,  4,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000001100000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000001011111111111111111111101000L);
				
				copyFrom(source,  2, subject,  4,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_30() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source,  2, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_31() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000110000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000101111111111111111111111111111101000L);
				
				copyFrom(source,  2, subject,  4,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000011000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000010111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000001100000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000001011111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_20() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_22() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000110000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000101111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_31() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110011111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000011000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000010111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_36() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111001111111111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_20() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_22() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000011000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000010111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000110000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000101111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000011000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000010111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_22() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000110000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000101111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000001100000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000001011111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_31() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110011111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000110000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000101111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111110L);
				
				copyFrom(source,  4, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source,  4, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111110L);
				
				copyFrom(source,  4, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_24() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_40() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_46() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000011000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000010111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_56() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_60() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0110000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0101111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111100111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source,  4, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111001111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source,  4, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source,  4, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111100111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source,  4, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_22() {
				T source   = build(0b1111111111111111111111111111111111111001111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source,  4, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_23() {
				T source   = build(0b1111111111111111111111111111111111110011111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source,  4, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111010L);
				
				copyFrom(source,  4, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_31() {
				T source   = build(0b1111111111111111111111111111001111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000001011111111111111111111111111111010L);
				
				copyFrom(source,  4, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000110000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000101111111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_46() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000001100000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000001011111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_10_54() {
				T source   = build(0b1111100111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000011000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111101000000000L);
				
				copyFrom(source,  4, subject, 10,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_40() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_46() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111001111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000011000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000010111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0110000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0101111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111100111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111001111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111100111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_22() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111001111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111110011111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_31() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111001111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000001011111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_40() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000110000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000101111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_46() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111001111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000001100000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000001011111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_74_54() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111100111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000011000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111101000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 74,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_16() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111110L);
				
				copyFrom(source,  8, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_48() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_56() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_80() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_112() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_120() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_144() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source,  8, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source,  8, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_30() {
				T source   = build(0b1111111111111111111111111001111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_44() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_46() {
				T source   = build(0b1111111110011111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000110000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000101111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_20_44() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000110000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111010000000000000000000L);
				
				copyFrom(source,  8, subject, 20,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_92() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_144() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111001111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_46() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110011111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000110000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000101111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_92() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_92() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_84_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000110000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111010000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 84,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_10_4_54() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111100111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000010111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 10, subject,  4,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_10_68_54() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111100111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000010111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 10, subject, 68,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_32() {
				T source   = build(0b1111111111111110011111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_96() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_112() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_160() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_176() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_224() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_240() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_288() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_24() {
				T source   = build(0b1111111111111111111111100111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_28() {
				T source   = build(0b1111111111111111111001111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_88() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_92() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_180() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_40_24() {
				T source   = build(0b1111111111111111111111100111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000011000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111101000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 40,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_96() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_160() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_224() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_288() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_92() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_96() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_160() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_224() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_180() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_104_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000011000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111101000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 104,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_20_8_44() {
				T source   = build(0b0111111111111111111111111111111111111111111001111111111111111111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 20, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_20_72_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111001111111111111111111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 20, subject, 72,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_56() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_120() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_180() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_248() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_180() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_144_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 144,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_40_16_24() {
				T source   = build(0b0111111111111111111111100111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111101000000000000000L);
				
				copyFrom(source, 40, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_40_80_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111100111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 40, subject, 80,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 64, subject,  0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010110L);
				
				copyFrom(source, 64, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111110L);
				
				copyFrom(source, 64, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source, 64, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111110L);
				
				copyFrom(source, 64, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_20() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000110000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000101111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_32() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_40() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_96() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_128() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_160() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_192() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_224() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001011010L);
				
				copyFrom(source, 64, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source, 64, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111100111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source, 64, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000110000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000101111111111010L);
				
				copyFrom(source, 64, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source, 64, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111110011111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source, 64, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_20() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_22() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_23() {
				T source   = build(0b1111111111111111111111111111111111111111001111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001011111111111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_30() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_31() {
				T source   = build(0b1111111111111111111111111111111100111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001100000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001011111111111111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_36() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000110000000000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000101111111111111111111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111101000L);
				
				copyFrom(source, 64, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source, 64, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source, 64, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_30() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_40() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000110000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000101111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_44() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_46() {
				T source   = build(0b1111111111111111100111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000110000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000101111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_60() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_62() {
				T source   = build(0b1001111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_60() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_88() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_92() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_120() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_124() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_144() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_32() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_96() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_120() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_160() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_176() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_184() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_224() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_240() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_248() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_288() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010110L);
				
				copyFrom(source, 66, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001100001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001011110L);
				
				copyFrom(source, 66, subject,  0,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000011000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010111110L);
				
				copyFrom(source, 66, subject,  0,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source, 66, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000110000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000101111111111110L);
				
				copyFrom(source, 66, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001100000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001011111111111110L);
				
				copyFrom(source, 66, subject,  0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_20() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000110000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000101111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000110000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000101111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_28() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_30() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001011111111111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_31() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000011000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000010111111111111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_36() {
				T source   = build(0b1111111111111111111111111001111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001011010L);
				
				copyFrom(source, 66, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source, 66, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source, 66, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000110000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000101111111111010L);
				
				copyFrom(source, 66, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source, 66, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source, 66, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_20() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010111111111111111111010L);
				
				copyFrom(source, 66, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source, 66, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source, 66, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_28() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001011111111111111111111111111010L);
				
				copyFrom(source, 66, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000011000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000010111101000L);
				
				copyFrom(source, 66, subject,  4,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000110000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000101111101000L);
				
				copyFrom(source, 66, subject,  4,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source, 66, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000011000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000010111111111111101000L);
				
				copyFrom(source, 66, subject,  4,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000110000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000101111111111111111111101000L);
				
				copyFrom(source, 66, subject,  4,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000001100000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000001011111111111111111111101000L);
				
				copyFrom(source, 66, subject,  4,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_30() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source, 66, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_31() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000110000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000101111111111111111111111111111101000L);
				
				copyFrom(source, 66, subject,  4,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111110L);
				
				copyFrom(source, 68, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source, 68, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000110000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000101111111111110L);
				
				copyFrom(source, 68, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_24() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001011111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_40() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000110000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000101111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_46() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000011000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000010111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_56() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_60() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0110000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0101111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111100111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source, 68, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111001111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source, 68, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source, 68, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111100111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source, 68, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_22() {
				T source   = build(0b1111111111111111111111111111111111111001111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source, 68, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_23() {
				T source   = build(0b1111111111111111111111111111111111110011111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source, 68, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111010L);
				
				copyFrom(source, 68, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_31() {
				T source   = build(0b1111111111111111111111111111001111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001100000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001011111111111111111111111111111010L);
				
				copyFrom(source, 68, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111101000L);
				
				copyFrom(source, 68, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source, 68, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source, 68, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_24() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_40() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000110000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000101111111111111111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_48() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000011000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000010111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_56() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000110000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000101111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000110000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000101111111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000011000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000010111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_46() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000001100000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000001011111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_60() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001100000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001011111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_10_54() {
				T source   = build(0b1111100111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000011000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111101000000000L);
				
				copyFrom(source, 68, subject, 10,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_16() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111110L);
				
				copyFrom(source, 72, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_48() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_56() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_80() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_112() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_120() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_144() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source, 72, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source, 72, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_30() {
				T source   = build(0b1111111111111111111111111001111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_44() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_46() {
				T source   = build(0b1111111110011111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000110000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000101111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_16() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_48() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_56() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_80() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_112() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000110000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000101111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_56() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000110000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000101111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_120() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_20_44() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000110000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111010000000000000000000L);
				
				copyFrom(source, 72, subject, 20,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_74_4_54() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111100111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000010111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 74, subject,  4,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_32() {
				T source   = build(0b1111111111111110011111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_96() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_112() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_160() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_176() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_224() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_240() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_288() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_24() {
				T source   = build(0b1111111111111111111111100111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_28() {
				T source   = build(0b1111111111111111111001111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_88() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_92() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_32() {
				T source   = build(0b1111111111111110011111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_96() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_112() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_160() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_176() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_224() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_112() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_176() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_180() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000110000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000101111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_240() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_40_24() {
				T source   = build(0b1111111111111111111111100111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000011000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111101000000000000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 40,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_96_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 96,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_84_8_44() {
				T source   = build(0b0111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000011000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000010111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 84, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_56() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_120() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_180() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_248() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_80_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 96, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_104_16_24() {
				T source   = build(0b0111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010111111111111111111111101000000000000000L);
				
				copyFrom(source, 104, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_144_32_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 144, subject, 32,  48);
				assertThat(subject, is(equalTo(expected)));
			}
		}
		
		public static abstract class CopyFromSameSource<T> implements StorageBuilder<T> {
			protected abstract void copyFrom(T source, int srcPos, T dest, int destPos, int length);
			
			@Test public void copyFrom_0_0_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  0, subject,  0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011001L);
				
				copyFrom(subject,  0, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111101L);
				
				copyFrom(subject,  0, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject,  0, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111101L);
				
				copyFrom(subject,  0, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_20() {
				T subject  = build(0b0000000000000000000000000000000000000000000110111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000110111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_24() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_28() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_32() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_40() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_48() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_64() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_96() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_112() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_128() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_160() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_192() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_224() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100110L);
				
				copyFrom(subject,  2, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110110L);
				
				copyFrom(subject,  2, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001101110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110110L);
				
				copyFrom(subject,  2, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110110L);
				
				copyFrom(subject,  2, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110110L);
				
				copyFrom(subject,  2, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000110111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110110L);
				
				copyFrom(subject,  2, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_20() {
				T subject  = build(0b0000000000000000000000000000000000000000011011111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110110L);
				
				copyFrom(subject,  2, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_22() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110110L);
				
				copyFrom(subject,  2, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_23() {
				T subject  = build(0b0000000000000000000000000000000000000011011111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110110L);
				
				copyFrom(subject,  2, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_28() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110110L);
				
				copyFrom(subject,  2, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011000L);
				
				copyFrom(subject,  4, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011000L);
				
				copyFrom(subject,  4, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001101111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_24() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_28() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_30() {
				T subject  = build(0b0000000000000000000000000000011011111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_40() {
				T subject  = build(0b0000000000000000000110111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_44() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_48() {
				T subject  = build(0b0000000000011011111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000011011111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_56() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_16() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_24() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_28() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_48() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_56() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_80() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_88() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_92() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_112() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_32() {
				T subject  = build(0b0000000000000001101111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_48() {
				T subject  = build(0b1011111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_56() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_96() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_112() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_120() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_160() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_176() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_184() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_224() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100101L);
				
				copyFrom(subject,  0, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000101101101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110101L);
				
				copyFrom(subject,  0, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001011011101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110101L);
				
				copyFrom(subject,  0, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000101101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110101L);
				
				copyFrom(subject,  0, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010110111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110101L);
				
				copyFrom(subject,  0, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000101101111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_20() {
				T subject  = build(0b0000000000000000000000000000000000000000010110111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_22() {
				T subject  = build(0b0000000000000000000000000000000000000001011011111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_23() {
				T subject  = build(0b0000000000000000000000000000000000000010110111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_28() {
				T subject  = build(0b0000000000000000000000000000000001011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_30() {
				T subject  = build(0b0000000000000000000000000000000101101111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_31() {
				T subject  = build(0b0000000000000000000000000000001011011111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000001101111111111111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_36() {
				T subject  = build(0b0000000000000000000000000101101111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000110111111111111111111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000110111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011101L);
				
				copyFrom(subject,  0, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010001101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011101L);
				
				copyFrom(subject,  0, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001000110111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_24() {
				T subject  = build(0b0000000000000000000000000000000000010001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_28() {
				T subject  = build(0b0000000000000000000000000000000100011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_30() {
				T subject  = build(0b0000000000000000000000000000010001101111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_40() {
				T subject  = build(0b0000000000000000000100011011111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_44() {
				T subject  = build(0b0000000000000001000110111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_46() {
				T subject  = build(0b0000000000000100011011111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000110111111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_56() {
				T subject  = build(0b0001000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_60() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_62() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000100L,
				                   0b0110111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_16() {
				T subject  = build(0b0000000000000000000000000000000000000001000000011011111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_24() {
				T subject  = build(0b0000000000000000000000000000000100000001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_28() {
				T subject  = build(0b0000000000000000000000000001000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_32() {
				T subject  = build(0b0000000000000000000000010000000110111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_48() {
				T subject  = build(0b0000000100000001101111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_80() {
				T subject  = build(0b0000000000000000000000000000000000000001000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_88() {
				T subject  = build(0b0000000000000000000000000000000100000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_92() {
				T subject  = build(0b0000000000000000000000000001000000011011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_96() {
				T subject  = build(0b0000000000000000000000010000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_112() {
				T subject  = build(0b0000000100000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_120() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_124() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_144() {
				T subject  = build(0b0000000000000000000000000000000000000001000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_160() {
				T subject  = build(0b0000000000000000000000010000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_176() {
				T subject  = build(0b0000000100000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_184() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_224() {
				T subject  = build(0b0000000000000000000000010000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_240() {
				T subject  = build(0b0000000100000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_248() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_288() {
				T subject  = build(0b0000000000000000000000010000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  0, subject, 64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b1000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000000011001L);
				
				copyFrom(subject,  0, subject, 64,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b1000000000000000000000000000000000000000000000000000000110111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000000000110111101L);
				
				copyFrom(subject,  0, subject, 64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000000000L,
				                   0b1000000000000000000000000000000000000000000000000001101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject,  0, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000000L,
				                   0b1000000000000000000000000000000000000000000000011011111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111111101L);
				
				copyFrom(subject,  0, subject, 64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_20() {
				T subject  = build(0b0000000000000000000000000000000000000000000100000000000000000000L,
				                   0b1000000000000000000000000000000000000000000110111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000000110111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_24() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b1000000000000000000000000000000000000001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_28() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000000000L,
				                   0b1000000000000000000000000000000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_32() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b1000000000000000000000000000000110111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_40() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b1000000000000000000000011011111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000000011011111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_48() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b1000000000000001101111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000000000001101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b1000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_96() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_112() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_160() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_192() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_224() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001000010L,
				                   0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011001L);
				
				copyFrom(subject,  0, subject, 66,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000010L,
				                   0b0000000000000000000000000000000000000000000000000000000001101101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000001101101L);
				
				copyFrom(subject,  0, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001000000010L,
				                   0b0000000000000000000000000000000000000000000000000000000011011101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000000011011101L);
				
				copyFrom(subject,  0, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000100000000000010L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject,  0, subject, 66,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000010L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				
				copyFrom(subject,  0, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000100000000000000010L,
				                   0b0000000000000000000000000000000000000000000000001101111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000001101111111111101L);
				
				copyFrom(subject,  0, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_20() {
				T subject  = build(0b0000000000000000000000000000000000000000010000000000000000000010L,
				                   0b0000000000000000000000000000000000000000000110111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000000110111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_22() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000010L,
				                   0b0000000000000000000000000000000000000000011011111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000000011011111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_23() {
				T subject  = build(0b0000000000000000000000000000000000000010000000000000000000000010L,
				                   0b0000000000000000000000000000000000000000110111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000000110111111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_28() {
				T subject  = build(0b0000000000000000000000000000000001000000000000000000000000000010L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_30() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000010L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111110110L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_31() {
				T subject  = build(0b0000000000000000000000000000001000000000000000000000000000000010L,
				                   0b0000000000000000000000000000000011011111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000001101111111111111111111111111110110L,
				                   0b0000000000000000000000000000000011011111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_36() {
				T subject  = build(0b0000000000000000000000000100000000000000000000000000000000000010L,
				                   0b0000000000000000000000000001101111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000110111111111111111111111111111111110110L,
				                   0b0000000000000000000000000001101111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000001000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111101L);
				
				copyFrom(subject,  0, subject, 68,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000001000L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject,  0, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001000000000000001000L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				
				copyFrom(subject,  0, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_24() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000001000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_28() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000001000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_30() {
				T subject  = build(0b0000000000000000000000000000010000000000000000000000000000001000L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_40() {
				T subject  = build(0b0000000000000000000100000000000000000000000000000000000000001000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_44() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000001000L,
				                   0b0000000000000000000110111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000000000110111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_46() {
				T subject  = build(0b0000000000000100000000000000000000000000000000000000000000001000L,
				                   0b0000000000000000011011111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000110111111111111111111111111111111111111111111011000L,
				                   0b0000000000000000011011111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_56() {
				T subject  = build(0b0001000000000000000000000000000000000000000000000000000000001000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000001000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111011000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_62() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000100L,
				                   0b0000000000000000000000000000000000000000000000000000000000001000L,
				                   0b0110111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L,
				                   0b0110111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_16() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000010000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111101L);
				
				copyFrom(subject,  0, subject, 72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_24() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000010000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_28() {
				T subject  = build(0b0000000000000000000000000001000000000000000000000000000010000000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_32() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000010000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_48() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000010000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_56() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000010000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_80() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_88() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_92() {
				T subject  = build(0b0000000000000000000000000001000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_96() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_112() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_120() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_124() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_144() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_160() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_176() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_184() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_224() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_240() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_248() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_288() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001101001L);
				
				copyFrom(subject,  2, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110101101L);
				
				copyFrom(subject,  2, subject,  0,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001101110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101011101L);
				
				copyFrom(subject,  2, subject,  0,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110101111111101L);
				
				copyFrom(subject,  2, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000011010111111111101L);
				
				copyFrom(subject,  2, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000110111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000110101111111111101L);
				
				copyFrom(subject,  2, subject,  0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_20() {
				T subject  = build(0b0000000000000000000000000000000000000000011011111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000011010111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_22() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000001101011111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_23() {
				T subject  = build(0b0000000000000000000000000000000000000011011111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000011010111111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_28() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000001101011111111111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_30() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000110101111111111111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_31() {
				T subject  = build(0b0000000000000000000000000000001101111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000001101011111111111111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_36() {
				T subject  = build(0b0000000000000000000000000110111111111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000110101111111111111111111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b1000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000001100110L);
				
				copyFrom(subject,  2, subject, 64,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001000000L,
				                   0b1000000000000000000000000000000000000000000000000000000110110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001101101L,
				                   0b1000000000000000000000000000000000000000000000000000000110110110L);
				
				copyFrom(subject,  2, subject, 64,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000010000000L,
				                   0b1000000000000000000000000000000000000000000000000000001101110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011011101L,
				                   0b1000000000000000000000000000000000000000000000000000001101110110L);
				
				copyFrom(subject,  2, subject, 64,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000000000L,
				                   0b1000000000000000000000000000000000000000000000000110111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000110111111110110L);
				
				copyFrom(subject,  2, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000100000000000000L,
				                   0b1000000000000000000000000000000000000000000000011011111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111110110L);
				
				copyFrom(subject,  2, subject, 64,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000001000000000000000L,
				                   0b1000000000000000000000000000000000000000000000110111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000001101111111111101L,
				                   0b1000000000000000000000000000000000000000000000110111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_20() {
				T subject  = build(0b0000000000000000000000000000000000000000000100000000000000000000L,
				                   0b1000000000000000000000000000000000000000011011111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000011011111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_22() {
				T subject  = build(0b0000000000000000000000000000000000000000010000000000000000000000L,
				                   0b1000000000000000000000000000000000000001101111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_23() {
				T subject  = build(0b0000000000000000000000000000000000000000100000000000000000000000L,
				                   0b1000000000000000000000000000000000000011011111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000110111111111111111111101L,
				                   0b1000000000000000000000000000000000000011011111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_28() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000000000L,
				                   0b1000000000000000000000000000000001101111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000001101111111111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_30() {
				T subject  = build(0b0000000000000000000000000000000001000000000000000000000000000000L,
				                   0b1000000000000000000000000000000110111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_31() {
				T subject  = build(0b0000000000000000000000000000000010000000000000000000000000000000L,
				                   0b1000000000000000000000000000001101111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000011011111111111111111111111111101L,
				                   0b1000000000000000000000000000001101111111111111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_36() {
				T subject  = build(0b0000000000000000000000000001000000000000000000000000000000000000L,
				                   0b1000000000000000000000000110111111111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111101L,
				                   0b1000000000000000000000000110111111111111111111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001000010L,
				                   0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000001100110L);
				
				copyFrom(subject,  2, subject, 66,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000010L,
				                   0b0000000000000000000000000000000000000000000000000000000110110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000110110110L);
				
				copyFrom(subject,  2, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001000000010L,
				                   0b0000000000000000000000000000000000000000000000000000001101110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000001101110110L);
				
				copyFrom(subject,  2, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000100000000000010L,
				                   0b0000000000000000000000000000000000000000000000000110111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000110111111110110L);
				
				copyFrom(subject,  2, subject, 66,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000010L,
				                   0b0000000000000000000000000000000000000000000000011011111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000011011111111110110L);
				
				copyFrom(subject,  2, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000100000000000000010L,
				                   0b0000000000000000000000000000000000000000000000110111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000110111111111110110L);
				
				copyFrom(subject,  2, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_20() {
				T subject  = build(0b0000000000000000000000000000000000000000010000000000000000000010L,
				                   0b0000000000000000000000000000000000000000011011111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000011011111111111111110110L);
				
				copyFrom(subject,  2, subject, 66,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_22() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000010L,
				                   0b0000000000000000000000000000000000000001101111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000001101111111111111111110110L);
				
				copyFrom(subject,  2, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_23() {
				T subject  = build(0b0000000000000000000000000000000000000010000000000000000000000010L,
				                   0b0000000000000000000000000000000000000011011111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000011011111111111111111110110L);
				
				copyFrom(subject,  2, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_28() {
				T subject  = build(0b0000000000000000000000000000000001000000000000000000000000000010L,
				                   0b0000000000000000000000000000000001101111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000001101111111111111111111111110110L);
				
				copyFrom(subject,  2, subject, 66,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101110111101L);
				
				copyFrom(subject,  4, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011101111111101L);
				
				copyFrom(subject,  4, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001101111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001101110111111111101L);
				
				copyFrom(subject,  4, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_24() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000011011101111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_28() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000110111011111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_30() {
				T subject  = build(0b0000000000000000000000000000011011111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000011011101111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_40() {
				T subject  = build(0b0000000000000000000110111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000110111011111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_44() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000001101110111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_46() {
				T subject  = build(0b0000000000000110111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000110111011111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_56() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0001101110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_60() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b1011101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_62() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1110111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b1000000000000000000000000000000000000000000000000001101111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000001101111011000L);
				
				copyFrom(subject,  4, subject, 64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000000000L,
				                   0b1000000000000000000000000000000000000000000000011011111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111011000L);
				
				copyFrom(subject,  4, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000100000000000000L,
				                   0b1000000000000000000000000000000000000000000001101111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000001101111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_24() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b1000000000000000000000000000000000011011111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000011011111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_28() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000000000L,
				                   0b1000000000000000000000000000000110111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_30() {
				T subject  = build(0b0000000000000000000000000000000001000000000000000000000000000000L,
				                   0b1000000000000000000000000000011011111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000011011111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_40() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b1000000000000000000110111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000110111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_44() {
				T subject  = build(0b0000000000000000000100000000000000000000000000000000000000000000L,
				                   0b1000000000000001101111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111111101L,
				                   0b1000000000000001101111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_46() {
				T subject  = build(0b0000000000000000010000000000000000000000000000000000000000000000L,
				                   0b1000000000000110111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000011011111111111111111111111111111111111111111101L,
				                   0b1000000000000110111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_56() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b1001101111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1001101111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_60() {
				T subject  = build(0b0001000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_62() {
				T subject  = build(0b0100000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0110111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000001000L,
				                   0b0000000000000000000000000000000000000000000000000001101111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000001101111011000L);
				
				copyFrom(subject,  4, subject, 68,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000001000L,
				                   0b0000000000000000000000000000000000000000000000011011111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000011011111111011000L);
				
				copyFrom(subject,  4, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001000000000000001000L,
				                   0b0000000000000000000000000000000000000000000001101111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000001101111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_24() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000001000L,
				                   0b0000000000000000000000000000000000011011111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000011011111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_28() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000001000L,
				                   0b0000000000000000000000000000000110111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000110111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_30() {
				T subject  = build(0b0000000000000000000000000000010000000000000000000000000000001000L,
				                   0b0000000000000000000000000000011011111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000011011111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_40() {
				T subject  = build(0b0000000000000000000100000000000000000000000000000000000000001000L,
				                   0b0000000000000000000110111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000110111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_44() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000001000L,
				                   0b0000000000000001101111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000001101111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_48() {
				T subject  = build(0b0000000000010000000000000000000000000000000000000000000000001000L,
				                   0b0000000000011011111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000011011111111111111111111111111111111111111111111011000L,
				                   0b0000000000011011111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_56() {
				T subject  = build(0b0001000000000000000000000000000000000000000000000000000000001000L,
				                   0b0001101111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0001101111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_16() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111011111111111101L);
				
				copyFrom(subject,  8, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_24() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111101111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_28() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111011111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_32() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000011011111110111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_48() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_56() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_80() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_88() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_92() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_96() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000011011111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_112() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_120() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_124() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_144() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_160() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000011011111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_176() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_184() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_224() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000011011111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_240() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_248() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_288() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000011011111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000000L,
				                   0b1000000000000000000000000000000000000001101111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_24() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b1000000000000000000000000000000110111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_28() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000000000L,
				                   0b1000000000000000000000000001101111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000001101111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_32() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b1000000000000000000000011011111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000011011111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_48() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b1000000110111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000110111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_56() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_60() {
				T subject  = build(0b0001000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_88() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_92() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000000000L,
				                   0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_96() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_112() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_120() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_124() {
				T subject  = build(0b0001000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_144() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_160() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_176() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_184() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_224() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_240() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_248() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_288() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_16() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000010000000L,
				                   0b0000000000000000000000000000000000000001101111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000001101111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_24() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000010000000L,
				                   0b0000000000000000000000000000000110111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000110111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_28() {
				T subject  = build(0b0000000000000000000000000001000000000000000000000000000010000000L,
				                   0b0000000000000000000000000001101111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000001101111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_48() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000010000000L,
				                   0b0000000110111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000110111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_56() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000010000001L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110110000001L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b0000000000000000000000000000000000000000000000000000000010011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_80() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_88() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_92() {
				T subject  = build(0b0000000000000000000000000001000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_112() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_32() {
				T subject  = build(0b0000000000000001000000000000000000000000000000001000000000000000L,
				                   0b0000000000000001101111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111011000000000000000L,
				                   0b0000000000000001101111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_48() {
				T subject  = build(0b0000000000000000000000000000000000000000000000001000000000000001L,
				                   0b1011111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111011000000000000001L,
				                   0b1011111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_56() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b0000000000000000000000000000000000000000000000001000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_96() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_112() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_120() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_160() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_176() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_184() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_224() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject, 64, subject,  0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000000010000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000000011001L);
				
				copyFrom(subject, 64, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000000000100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000000000110111101L);
				
				copyFrom(subject, 64, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000001000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject, 64, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000000000000010000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111111101L);
				
				copyFrom(subject, 64, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_20() {
				T subject  = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000000100000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000000110111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_24() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000000001000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_28() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000000010000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_32() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000000000000100000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_40() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000000010000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000000011011111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_48() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000000000001000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000000000001101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1000000100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_96() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_112() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_128() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_160() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_192() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_224() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000001000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000001100110L);
				
				copyFrom(subject, 64, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001101101L,
				                   0b1000000000000000000000000000000000000000000000000000000100000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001101101L,
				                   0b1000000000000000000000000000000000000000000000000000000110110110L);
				
				copyFrom(subject, 64, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000011011101L,
				                   0b1000000000000000000000000000000000000000000000000000001000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011011101L,
				                   0b1000000000000000000000000000000000000000000000000000001101110110L);
				
				copyFrom(subject, 64, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000100000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000110111111110110L);
				
				copyFrom(subject, 64, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000000010000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111110110L);
				
				copyFrom(subject, 64, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000001101111111111101L,
				                   0b1000000000000000000000000000000000000000000000100000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000001101111111111101L,
				                   0b1000000000000000000000000000000000000000000000110111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_20() {
				T subject  = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000010000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000011011111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_22() {
				T subject  = build(0b0000000000000000000000000000000000000000011011111111111111111101L,
				                   0b1000000000000000000000000000000000000001000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_23() {
				T subject  = build(0b0000000000000000000000000000000000000000110111111111111111111101L,
				                   0b1000000000000000000000000000000000000010000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000110111111111111111111101L,
				                   0b1000000000000000000000000000000000000011011111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_28() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000001000000000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000001101111111111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_30() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000000100000000000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_31() {
				T subject  = build(0b0000000000000000000000000000000011011111111111111111111111111101L,
				                   0b1000000000000000000000000000001000000000000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000011011111111111111111111111111101L,
				                   0b1000000000000000000000000000001101111111111111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_36() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111111111111101L,
				                   0b1000000000000000000000000100000000000000000000000000000000000010L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111101L,
				                   0b1000000000000000000000000110111111111111111111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000001000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000001101111011000L);
				
				copyFrom(subject, 64, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000010000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111011000L);
				
				copyFrom(subject, 64, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000001000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000001101111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_24() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000010000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000011011111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_28() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000100000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_30() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000010000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000011011111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_40() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000100000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000110111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_44() {
				T subject  = build(0b0000000000000000000110111111111111111111111111111111111111111101L,
				                   0b1000000000000001000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111111101L,
				                   0b1000000000000001101111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_46() {
				T subject  = build(0b0000000000000000011011111111111111111111111111111111111111111101L,
				                   0b1000000000000100000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000000011011111111111111111111111111111111111111111101L,
				                   0b1000000000000110111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1001000000000000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1001101111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_60() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_62() {
				T subject  = build(0b0110111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0110111111111111111111111111111111111111111111111111111111111110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000001000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_24() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000100000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_28() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000001000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000001101111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_32() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000010000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000011011111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_48() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000100000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000110111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_60() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_88() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_92() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111111L,
				                   0b1111111111111111111111111111101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_96() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_112() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_120() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_124() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_144() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_160() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_176() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_184() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_224() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_240() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_248() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_288() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000000010000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011001L);
				
				copyFrom(subject, 66, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000001000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000001101101L);
				
				copyFrom(subject, 66, subject,  0,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000000011011101L);
				
				copyFrom(subject, 66, subject,  0,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000001000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject, 66, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000000100000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				
				copyFrom(subject, 66, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000001101111111111101L);
				
				copyFrom(subject, 66, subject,  0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_20() {
				T subject  = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000000100000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000000110111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_22() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000000010000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000000011011111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_23() {
				T subject  = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000000100000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000000110111111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_28() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000000010000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_30() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111110110L,
				                   0b0000000000000000000000000000000001000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111110110L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_31() {
				T subject  = build(0b0000000000000000000000000000001101111111111111111111111111110110L,
				                   0b0000000000000000000000000000000010000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000001101111111111111111111111111110110L,
				                   0b0000000000000000000000000000000011011111111111111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_36() {
				T subject  = build(0b0000000000000000000000000110111111111111111111111111111111110110L,
				                   0b0000000000000000000000000001000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000110111111111111111111111111111111110110L,
				                   0b0000000000000000000000000001101111111111111111111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000001000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000001100110L);
				
				copyFrom(subject, 66, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000100000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000110110110L);
				
				copyFrom(subject, 66, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000001000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000001101110110L);
				
				copyFrom(subject, 66, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000100000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000110111111110110L);
				
				copyFrom(subject, 66, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000010000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000011011111111110110L);
				
				copyFrom(subject, 66, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000100000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000110111111111110110L);
				
				copyFrom(subject, 66, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_20() {
				T subject  = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000010000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000011011111111111111110110L);
				
				copyFrom(subject, 66, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_22() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000001000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000001101111111111111111110110L);
				
				copyFrom(subject, 66, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_23() {
				T subject  = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000010000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000011011111111111111111110110L);
				
				copyFrom(subject, 66, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_28() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000001000000000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000001101111111111111111111111110110L);
				
				copyFrom(subject, 66, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000000000100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111101L);
				
				copyFrom(subject, 68, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000000001000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject, 68, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000000000100000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				
				copyFrom(subject, 68, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_24() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000000001000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_28() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000000010000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_30() {
				T subject  = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000000001000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_40() {
				T subject  = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000000010000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_44() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000000000100000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000000000110111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_46() {
				T subject  = build(0b0000000000000110111111111111111111111111111111111111111111011000L,
				                   0b0000000000000000010000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000110111111111111111111111111111111111111111111011000L,
				                   0b0000000000000000011011111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_56() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0000000100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_60() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111011000L,
				                   0b0001000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111011000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_62() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L,
				                   0b0100000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L,
				                   0b0110111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000001000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000001101111011000L);
				
				copyFrom(subject, 68, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000010000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000011011111111011000L);
				
				copyFrom(subject, 68, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000001000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000001101111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_24() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000010000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000011011111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_28() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000100000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000110111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_30() {
				T subject  = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000010000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000011011111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_40() {
				T subject  = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000100000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000110111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_44() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000001000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000001101111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_48() {
				T subject  = build(0b0000000000011011111111111111111111111111111111111111111111011000L,
				                   0b0000000000010000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000011011111111111111111111111111111111111111111111011000L,
				                   0b0000000000011011111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_56() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0001000000000000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0001101111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_16() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000010000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111101L);
				
				copyFrom(subject, 72, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_24() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000001000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_28() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000010000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_32() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000100000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_48() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000001000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_56() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0001000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_80() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_88() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_92() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_96() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_112() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_120() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_124() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_144() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_160() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_176() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_184() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_224() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_240() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_248() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_288() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_16() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000001000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000001101111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_24() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000100000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000110111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_28() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000001000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000001101111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_48() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000100000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000110111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_56() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111110110000001L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110110000001L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110010000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_80() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_88() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_92() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_112() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_32() {
				T subject  = build(0b0000000000000001101111111111111111111111111111011000000000000000L,
				                   0b0000000000000001000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111011000000000000000L,
				                   0b0000000000000001101111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_48() {
				T subject  = build(0b1011111111111111111111111111111111111111111111011000000000000001L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111011000000000000001L,
				                   0b1011111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_56() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000100000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_96() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_112() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_120() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_160() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_176() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_184() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_224() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}
		}
	}

	@Ignore
	public static class Stress {
		@RunWith(SuiteMethod.class)
		public static abstract class CopyFromDifferentSource<T> extends TestCase implements StorageBuilder<T> {
			protected abstract void copyFrom(T source, int srcPos, T dest, int destPos, int length);
			protected abstract T clone(T data);
			protected abstract void writeBitString(T data, String v);
			protected abstract String readBitString(T data);
			
			private final int srcPos;
			private final int destPos;
			private final int length;
			
			protected T subject  = build(0b0L, 0b0011001100110110100000001000000100000100001000100010010010101010L);
			protected T source   = build(0b0L, 0b1100110011001001011111110111111011111011110111011101101101010101L);
	
			protected CopyFromDifferentSource(int srcPos, int destPos, int length) {
				super(String.format("%d:%d -> %d:%d", srcPos, srcPos + length, destPos, destPos + length));
				this.srcPos = srcPos;
				this.destPos = destPos;
				this.length = length;
			}
	
			@Override public void runTest() {
				T expected = clone(subject);
				copyFromGraphically(source, srcPos, expected, destPos, length);
				
				copyFrom(source, srcPos, subject, destPos, length);
				assertThat(subject, is(equalTo(expected)));
			}
			
			private void copyFromGraphically(T source, int srcPos, T dest, int destPos, int length) {
				String result = copyFromGraphically(readBitString(source), srcPos, readBitString(dest), destPos, length);
				writeBitString(dest, result);
			}
			
			private static String copyFromGraphically(String source, int srcPos, String dest, int destPos, int length) {
				return new String(copyFromGraphically(source.toCharArray(), srcPos, dest.toCharArray(), destPos, length));
			}
	
			private static char[] copyFromGraphically(char[] source, int srcPos, char[] dest, int destPos, int length) {
				return invert(copyFromGraphically0(invert(source), srcPos, invert(dest), destPos, length));
			}
	
			private static char[] copyFromGraphically0(char[] source, int srcPos, char[] dest, int destPos, int length) {
				System.arraycopy(source, srcPos, dest, destPos, length);
				return dest;
			}
	
			private static char[] invert(char[] cs) {
				for (int i = 0; i < cs.length/2; i++) {
					char c = cs[i];
					cs[i] = cs[cs.length - i - 1];
					cs[cs.length - i - 1] = c;
				}
				
				return cs;
			}
		}
		
		public static abstract class CopyFromSameSource<T> extends CopyFromDifferentSource<T> {
			protected CopyFromSameSource(int srcPos, int destPos, int length) {
				super(srcPos, destPos, length);
			}

			@Override
			public void runTest() {
				source = subject;
				super.runTest();
			}
		}

		protected static <T extends CopyFromDifferentSource<?>> TestSuite suite(Class<T> clazz, int size) {
			try {
				Constructor<T> ctor = clazz.getConstructor(int.class, int.class, int.class);
				TestSuite suite = new TestSuite();
		
				for(int i=0; i<=2*size; i++)
					for(int j=0; j<=2*size; j++)
						for(int k=0; k <= 2*size-i && k <= 2*size-j; k++) 
							suite.addTest(ctor.newInstance(i, j, k));
				
				return suite;
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
	}
	
	@RunWith(Enclosed.class)
	public static class ByteArray extends ByteArrayBuilder {
		public static class CopyFromDifferentSource extends Cases.CopyFromDifferentSource<byte[]> {
			@Override protected void copyFrom(byte[] source, int srcPos, byte[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public byte[] build(long... d) { return build0(d); }
		}
		
		public static class CopyFromSameSource extends Cases.CopyFromSameSource<byte[]> {
			@Override protected void copyFrom(byte[] source, int srcPos, byte[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public byte[] build(long... d) { return build0(d); }
		}
		
		public static class StressFromDifferentSource extends Stress.CopyFromDifferentSource<byte[]> {
			public static TestSuite suite() { return Stress.suite(StressFromDifferentSource.class, 8); }

			public StressFromDifferentSource(int srcPos, int destPos, int length) {
				super(srcPos, destPos, length);
			}

			@Override protected void copyFrom(byte[] source, int srcPos, byte[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			
			@Override protected byte[] clone(byte[] data) { return data.clone(); }
			@Override protected void writeBitString(byte[] data, String v) { Store.writeBitString(data, v); }
			@Override protected String readBitString(byte[] data) { return Store.readBitString(data); }
			@Override public byte[] build(long... d) { return build0(d); }
		}
		
		public static class StressFromSameSource extends Stress.CopyFromSameSource<byte[]> {
			public static TestSuite suite() { return Stress.suite(StressFromSameSource.class, 8); }

			public StressFromSameSource(int srcPos, int destPos, int length) {
				super(srcPos, destPos, length);
			}

			@Override protected void copyFrom(byte[] source, int srcPos, byte[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			
			@Override protected byte[] clone(byte[] data) { return data.clone(); }
			@Override protected void writeBitString(byte[] data, String v) { Store.writeBitString(data, v); }
			@Override protected String readBitString(byte[] data) { return Store.readBitString(data); }
			@Override public byte[] build(long... d) { return build0(d); }
		}
	}

	@RunWith(Enclosed.class)
	public static class CharArray extends CharArrayBuilder {
		public static class CopyFromDifferentSource extends Cases.CopyFromDifferentSource<char[]> {
			@Override protected void copyFrom(char[] source, int srcPos, char[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public char[] build(long... d) { return build0(d); }
		}
	
		public static class CopyFromSameSource extends Cases.CopyFromSameSource<char[]> {
			@Override protected void copyFrom(char[] source, int srcPos, char[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public char[] build(long... d) { return build0(d); }
		}

		public static class StressFromDifferentSource extends Stress.CopyFromDifferentSource<char[]> {
			public static TestSuite suite() { return Stress.suite(StressFromDifferentSource.class, 16); }

			public StressFromDifferentSource(int srcPos, int destPos, int length) {
				super(srcPos, destPos, length);
			}

			@Override protected void copyFrom(char[] source, int srcPos, char[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			
			@Override protected char[] clone(char[] data) { return data.clone(); }
			@Override protected void writeBitString(char[] data, String v) { Store.writeBitString(data, v); }
			@Override protected String readBitString(char[] data) { return Store.readBitString(data); }
			@Override public char[] build(long... d) { return build0(d); }
		}

		public static class StressFromSameSource extends Stress.CopyFromSameSource<char[]> {
			public static TestSuite suite() { return Stress.suite(StressFromSameSource.class, 16); }

			public StressFromSameSource(int srcPos, int destPos, int length) {
				super(srcPos, destPos, length);
			}

			@Override protected void copyFrom(char[] source, int srcPos, char[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			
			@Override protected char[] clone(char[] data) { return data.clone(); }
			@Override protected void writeBitString(char[] data, String v) { Store.writeBitString(data, v); }
			@Override protected String readBitString(char[] data) { return Store.readBitString(data); }
			@Override public char[] build(long... d) { return build0(d); }
		}
	}

	@RunWith(Enclosed.class)
	public static class ShortArray extends ShortArrayBuilder {
		public static class CopyFromDifferentSource extends Cases.CopyFromDifferentSource<short[]> {
			@Override protected void copyFrom(short[] source, int srcPos, short[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public short[] build(long... d) { return build0(d); }
		}
		
		public static class CopyFromSameSource extends Cases.CopyFromSameSource<short[]> {
			@Override protected void copyFrom(short[] source, int srcPos, short[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public short[] build(long... d) { return build0(d); }
		}

		public static class StressFromDifferentSource extends Stress.CopyFromDifferentSource<short[]> {
			public static TestSuite suite() { return Stress.suite(StressFromDifferentSource.class, 16); }

			public StressFromDifferentSource(int srcPos, int destPos, int length) {
				super(srcPos, destPos, length);
			}

			@Override protected void copyFrom(short[] source, int srcPos, short[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			
			@Override protected short[] clone(short[] data) { return data.clone(); }
			@Override protected void writeBitString(short[] data, String v) { Store.writeBitString(data, v); }
			@Override protected String readBitString(short[] data) { return Store.readBitString(data); }
			@Override public short[] build(long... d) { return build0(d); }
		}

		public static class StressFromSameSource extends Stress.CopyFromSameSource<short[]> {
			public static TestSuite suite() { return Stress.suite(StressFromSameSource.class, 16); }

			public StressFromSameSource(int srcPos, int destPos, int length) {
				super(srcPos, destPos, length);
			}

			@Override protected void copyFrom(short[] source, int srcPos, short[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			
			@Override protected short[] clone(short[] data) { return data.clone(); }
			@Override protected void writeBitString(short[] data, String v) { Store.writeBitString(data, v); }
			@Override protected String readBitString(short[] data) { return Store.readBitString(data); }
			@Override public short[] build(long... d) { return build0(d); }
		}
	}

	@RunWith(Enclosed.class)
	public static class IntArray extends IntArrayBuilder {
		public static class CopyFromDifferentSource extends Cases.CopyFromDifferentSource<int[]> {
			@Override protected void copyFrom(int[] source, int srcPos, int[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public int[] build(long... d) { return build0(d); }
		}
		
		public static class CopyFromSameSource extends Cases.CopyFromSameSource<int[]> {
			@Override protected void copyFrom(int[] source, int srcPos, int[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public int[] build(long... d) { return build0(d); }
		}
		
		public static class StressFromDifferentSource extends Stress.CopyFromDifferentSource<int[]> {
			public static TestSuite suite() { return Stress.suite(StressFromDifferentSource.class, 32); }

			public StressFromDifferentSource(int srcPos, int destPos, int length) {
				super(srcPos, destPos, length);
			}

			@Override protected void copyFrom(int[] source, int srcPos, int[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			
			@Override protected int[] clone(int[] data) { return data.clone(); }
			@Override protected void writeBitString(int[] data, String v) { Store.writeBitString(data, v); }
			@Override protected String readBitString(int[] data) { return Store.readBitString(data); }
			@Override public int[] build(long... d) { return build0(d); }
		}
		
		public static class StressFromSameSource extends Stress.CopyFromSameSource<int[]> {
			public static TestSuite suite() { return Stress.suite(StressFromSameSource.class, 32); }

			public StressFromSameSource(int srcPos, int destPos, int length) {
				super(srcPos, destPos, length);
			}

			@Override protected void copyFrom(int[] source, int srcPos, int[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			
			@Override protected int[] clone(int[] data) { return data.clone(); }
			@Override protected void writeBitString(int[] data, String v) { Store.writeBitString(data, v); }
			@Override protected String readBitString(int[] data) { return Store.readBitString(data); }
			@Override public int[] build(long... d) { return build0(d); }
		}
	}

	@RunWith(Enclosed.class)
	public static class LongArray extends LongArrayBuilder {
		public static class CopyFromDifferentSource extends Cases.CopyFromDifferentSource<long[]> {
			@Override protected void copyFrom(long[] source, int srcPos, long[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public long[] build(long... d) { return build0(d); }
		}
		
		public static class CopyFromSameSource extends Cases.CopyFromSameSource<long[]> {
			@Override protected void copyFrom(long[] source, int srcPos, long[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public long[] build(long... d) { return build0(d); }
		}
		
		public static class StressFromDifferentSource extends Stress.CopyFromDifferentSource<long[]> {
			public static TestSuite suite() { return Stress.suite(StressFromDifferentSource.class, 32 /* 64? */); }

			public StressFromDifferentSource(int srcPos, int destPos, int length) {
				super(srcPos, destPos, length);
			}

			@Override protected void copyFrom(long[] source, int srcPos, long[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			
			@Override protected long[] clone(long[] data) { return data.clone(); }
			@Override protected void writeBitString(long[] data, String v) { Store.writeBitString(data, v); }
			@Override protected String readBitString(long[] data) { return Store.readBitString(data); }
			@Override public long[] build(long... d) { return build0(d); }
		}
		
		public static class StressFromSameSource extends Stress.CopyFromSameSource<long[]> {
			public static TestSuite suite() { return Stress.suite(StressFromSameSource.class, 32 /* 64? */); }

			public StressFromSameSource(int srcPos, int destPos, int length) {
				super(srcPos, destPos, length);
			}

			@Override protected void copyFrom(long[] source, int srcPos, long[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			
			@Override protected long[] clone(long[] data) { return data.clone(); }
			@Override protected void writeBitString(long[] data, String v) { Store.writeBitString(data, v); }
			@Override protected String readBitString(long[] data) { return Store.readBitString(data); }
			@Override public long[] build(long... d) { return build0(d); }
		}
	}
}
