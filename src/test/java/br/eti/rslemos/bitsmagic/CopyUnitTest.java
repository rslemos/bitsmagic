/*******************************************************************************
 * BEGIN COPYRIGHT NOTICE
 * 
 * The MIT License (MIT)
 * 
 * Copyright (c) 2016 Rodrigo Lemos
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * END COPYRIGHT NOTICE
 *******************************************************************************/
package br.eti.rslemos.bitsmagic;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.experimental.runners.Enclosed;
import org.junit.runner.RunWith;

import br.eti.rslemos.bitsmagic.StorageBuilder.ByteArrayBuilder;
import br.eti.rslemos.bitsmagic.StorageBuilder.CharArrayBuilder;
import br.eti.rslemos.bitsmagic.StorageBuilder.IntArrayBuilder;
import br.eti.rslemos.bitsmagic.StorageBuilder.LongArrayBuilder;
import br.eti.rslemos.bitsmagic.StorageBuilder.ShortArrayBuilder;

@RunWith(Enclosed.class)
public class CopyUnitTest {
	@Ignore
	public static abstract class Cases {
		public static abstract class SafeCopyFromDifferentSource<T> implements StorageBuilder<T> {
			protected abstract void copyFrom(T source, int srcPos, T dest, int destPos, int length);
			
			// test cases for alignment
			
			@Test public void copyFrom_0_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  0, subject,  0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010110L);
				
				copyFrom(source,  0, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111110L);
				
				copyFrom(source,  0, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source,  0, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111110L);
				
				copyFrom(source,  0, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_20() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_32() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_40() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_64() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_96() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_128() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_160() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_192() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_224() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  0, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011010L);
				
				copyFrom(source,  2, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source,  2, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source,  2, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111010L);
				
				copyFrom(source,  2, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source,  2, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source,  2, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_20() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111010L);
				
				copyFrom(source,  2, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source,  2, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source,  2, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_28() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111010L);
				
				copyFrom(source,  2, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111101000L);
				
				copyFrom(source,  4, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source,  4, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source,  4, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_24() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_40() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_48() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_56() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  4, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_16() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_48() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_56() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_80() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_112() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  8, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_32() {
				T source   = build(0b1111111111111110011111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_96() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_112() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_160() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_176() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_224() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 16, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011010L);
				
				copyFrom(source,  0, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source,  0, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111100111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source,  0, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111010L);
				
				copyFrom(source,  0, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source,  0, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111110011111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source,  0, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_20() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_22() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_23() {
				T source   = build(0b1111111111111111111111111111111111111111001111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_30() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_31() {
				T source   = build(0b1111111111111111111111111111111100111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000001011111111111111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_36() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000110000000000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000101111111111111111111111111111111111010L);
				
				copyFrom(source,  0, subject,  2,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111101000L);
				
				copyFrom(source,  0, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source,  0, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source,  0, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_30() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_40() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_44() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_46() {
				T source   = build(0b1111111111111111100111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000110000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000101111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_60() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1001111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  0, subject,  4,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_88() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_92() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_120() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_144() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  0, subject,  8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_32() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_96() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_160() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_176() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_224() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_240() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_16_288() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  0, subject, 16, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_20() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_40() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_96() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_128() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_160() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_192() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_224() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 64, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110011111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_20() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_22() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111001111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_31() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000001011111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_36() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000110000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000101111111111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 66,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_40() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_46() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111100111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000110000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000101111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1001111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 68,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_92() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_144() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 72, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_96() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_160() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_224() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_80_288() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  0, subject, 80, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010110L);
				
				copyFrom(source,  2, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011110L);
				
				copyFrom(source,  2, subject,  0,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000011000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000010111110L);
				
				copyFrom(source,  2, subject,  0,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source,  2, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111110L);
				
				copyFrom(source,  2, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000001100000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000001011111111111110L);
				
				copyFrom(source,  2, subject,  0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_20() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000110000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000101111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_28() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_30() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_31() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000011000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000010111111111111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_36() {
				T source   = build(0b1111111111111111111111111001111111111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111110L);
				
				copyFrom(source,  2, subject,  0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000011000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000010111101000L);
				
				copyFrom(source,  2, subject,  4,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000110000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000101111101000L);
				
				copyFrom(source,  2, subject,  4,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source,  2, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000011000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000010111111111111101000L);
				
				copyFrom(source,  2, subject,  4,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000110000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000101111111111111111111101000L);
				
				copyFrom(source,  2, subject,  4,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000001100000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000001011111111111111111111101000L);
				
				copyFrom(source,  2, subject,  4,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_30() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source,  2, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_4_31() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000110000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000101111111111111111111111111111101000L);
				
				copyFrom(source,  2, subject,  4,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000011000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000010111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000001100000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000001011111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_20() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_22() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000110000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000101111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_31() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110011111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000011000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000010111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_36() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111001111111111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 64,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_20() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_22() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 66,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000011000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000010111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000110000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000101111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111001111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000011000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000010111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_22() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000110000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000101111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000001100000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000001011111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_68_31() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110011111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000110000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000101111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  2, subject, 68,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111110L);
				
				copyFrom(source,  4, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source,  4, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111110L);
				
				copyFrom(source,  4, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_24() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_40() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_46() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000011000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000010111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_56() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_60() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0110000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0101111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  4, subject,  0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111100111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source,  4, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111001111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source,  4, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source,  4, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111100111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source,  4, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_22() {
				T source   = build(0b1111111111111111111111111111111111111001111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source,  4, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_23() {
				T source   = build(0b1111111111111111111111111111111111110011111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source,  4, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111010L);
				
				copyFrom(source,  4, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_2_31() {
				T source   = build(0b1111111111111111111111111111001111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000001011111111111111111111111111111010L);
				
				copyFrom(source,  4, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000110000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000101111111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_46() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000001100000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000001011111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_8_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source,  4, subject,  8,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_10_54() {
				T source   = build(0b1111100111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000011000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111101000000000L);
				
				copyFrom(source,  4, subject, 10,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000110000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000101111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000001100000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000001011111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_40() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_46() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111001111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000011000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000010111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0110000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0101111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111100111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111001111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001011111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111100111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000101111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_22() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111001111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111110011111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000010111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_66_31() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111001111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000001011111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 66,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_40() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 68,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000011000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000010111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000110000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000101111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_46() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111001111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000001100000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000001011111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_72_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001011111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 72,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_74_54() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111100111111111111111111111111111111111111111111111111111100111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000011000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111101000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  4, subject, 74,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_16() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111110L);
				
				copyFrom(source,  8, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_48() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_56() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_80() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_112() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_120() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_144() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  8, subject,  0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source,  8, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source,  8, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_30() {
				T source   = build(0b1111111111111111111111111001111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_44() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_46() {
				T source   = build(0b1111111110011111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000110000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000101111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_4_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source,  8, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_16_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source,  8, subject, 16, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_20_44() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000110000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111010000000000000000000L);
				
				copyFrom(source,  8, subject, 20,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_92() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000011000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000010111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0001100000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_144() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 64, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001011111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_30() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111001111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000011000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000010111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_46() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110011111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000110000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000101111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_68_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 68,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_92() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 72, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_92() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000110000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000101111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_80_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 80, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_84_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100111111111111111111111111111111111111111111001111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000110000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111010000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  8, subject, 84,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_10_4_54() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111100111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000010111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 10, subject,  4,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_10_68_54() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111100111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000010111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 10, subject, 68,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_32() {
				T source   = build(0b1111111111111110011111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_96() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_112() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_160() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_176() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_224() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_240() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_0_288() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 16, subject,  0, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_24() {
				T source   = build(0b1111111111111111111111100111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_28() {
				T source   = build(0b1111111111111111111001111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_88() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_92() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_8_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 16, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_180() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_32_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 32, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_40_24() {
				T source   = build(0b1111111111111111111111100111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000011000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111101000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 40,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_96() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_160() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_224() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_64_288() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 64, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_92() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_72_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 72, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_96() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_160() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_224() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 80, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_180() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000110000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000101111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_96_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 96, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_104_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111100111111111111111L);
				T subject  = build(0b1000000000000000000000011000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111101000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 16, subject, 104,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_20_8_44() {
				T source   = build(0b0111111111111111111111111111111111111111111001111111111111111111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 20, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_20_72_44() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111001111111111111111111L);
				T subject  = build(0b0000000000011000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000010111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 20, subject, 72,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_56() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_120() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_180() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_16_248() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 32, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_180() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_80_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 80, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_32_144_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 32, subject, 144,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_40_16_24() {
				T source   = build(0b0111111111111111111111100111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111101000000000000000L);
				
				copyFrom(source, 40, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_40_80_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111100111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000011000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000010111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 40, subject, 80,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 64, subject,  0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010110L);
				
				copyFrom(source, 64, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111110L);
				
				copyFrom(source, 64, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source, 64, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111110L);
				
				copyFrom(source, 64, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_20() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000110000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000101111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_32() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_40() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_96() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_128() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_160() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_192() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_224() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 64, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001011010L);
				
				copyFrom(source, 64, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source, 64, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111100111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source, 64, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000110000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000101111111111010L);
				
				copyFrom(source, 64, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source, 64, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111110011111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source, 64, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_20() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_22() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_23() {
				T source   = build(0b1111111111111111111111111111111111111111001111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001011111111111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_30() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_31() {
				T source   = build(0b1111111111111111111111111111111100111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001100000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001011111111111111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_36() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000110000000000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000101111111111111111111111111111111111010L);
				
				copyFrom(source, 64, subject,  2,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111101000L);
				
				copyFrom(source, 64, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source, 64, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source, 64, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_30() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_40() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000110000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000101111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_44() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_46() {
				T source   = build(0b1111111111111111100111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000110000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000101111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_60() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_62() {
				T source   = build(0b1001111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 64, subject,  4,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_24() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_28() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_60() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_88() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_92() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_120() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_124() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_144() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 64, subject,  8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_32() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_48() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_56() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_96() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_112() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_120() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_160() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_176() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_184() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_224() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_240() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_248() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_16_288() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 64, subject, 16, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010110L);
				
				copyFrom(source, 66, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001100001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001011110L);
				
				copyFrom(source, 66, subject,  0,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000011000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010111110L);
				
				copyFrom(source, 66, subject,  0,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source, 66, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000110000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000101111111111110L);
				
				copyFrom(source, 66, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001100000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001011111111111110L);
				
				copyFrom(source, 66, subject,  0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_20() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000110000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000101111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000110000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000101111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_28() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_30() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001011111111111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_31() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000011000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000010111111111111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_36() {
				T source   = build(0b1111111111111111111111111001111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111111111110L);
				
				copyFrom(source, 66, subject,  0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_4() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001011010L);
				
				copyFrom(source, 66, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source, 66, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source, 66, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111001111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000110000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000101111111111010L);
				
				copyFrom(source, 66, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source, 66, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source, 66, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_20() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010111111111111111111010L);
				
				copyFrom(source, 66, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source, 66, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source, 66, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_28() {
				T source   = build(0b1111111111111111111111111111111110011111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001011111111111111111111111111010L);
				
				copyFrom(source, 66, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000011000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000010111101000L);
				
				copyFrom(source, 66, subject,  4,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000110000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000101111101000L);
				
				copyFrom(source, 66, subject,  4,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source, 66, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000011000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000010111111111111101000L);
				
				copyFrom(source, 66, subject,  4,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_22() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000110000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000101111111111111111111101000L);
				
				copyFrom(source, 66, subject,  4,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000001100000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000001011111111111111111111101000L);
				
				copyFrom(source, 66, subject,  4,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_30() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source, 66, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_4_31() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000110000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000101111111111111111111111111111101000L);
				
				copyFrom(source, 66, subject,  4,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111110L);
				
				copyFrom(source, 68, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111110L);
				
				copyFrom(source, 68, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000110000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000101111111111110L);
				
				copyFrom(source, 68, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_24() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001011111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_40() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000110000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000101111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_46() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000011000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000010111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_56() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_60() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0110000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0101111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 68, subject,  0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_6() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111100111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111010L);
				
				copyFrom(source, 68, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_7() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111001111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001011111010L);
				
				copyFrom(source, 68, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111010L);
				
				copyFrom(source, 68, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_15() {
				T source   = build(0b1111111111111111111111111111111111111111111100111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000110000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000101111111111111010L);
				
				copyFrom(source, 68, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_22() {
				T source   = build(0b1111111111111111111111111111111111111001111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111010L);
				
				copyFrom(source, 68, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_23() {
				T source   = build(0b1111111111111111111111111111111111110011111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000011000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000010111111111111111111111010L);
				
				copyFrom(source, 68, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111010L);
				
				copyFrom(source, 68, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_2_31() {
				T source   = build(0b1111111111111111111111111111001111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001100000000000000000000000000000110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001011111111111111111111111111111010L);
				
				copyFrom(source, 68, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111101000L);
				
				copyFrom(source, 68, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source, 68, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source, 68, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_24() {
				T source   = build(0b1111111111111111111111111111111111100111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_40() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000110000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000101111111111111111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_48() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000011000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000010111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_56() {
				T source   = build(0b1110011111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 68, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000110000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000101111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_14() {
				T source   = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_28() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_30() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000110000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000101111111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_44() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000011000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000010111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_46() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000001100000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000001011111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_60() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_8_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001100000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001011111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 68, subject,  8,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_10_54() {
				T source   = build(0b1111100111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000011000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111101000000000L);
				
				copyFrom(source, 68, subject, 10,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_16() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111110L);
				
				copyFrom(source, 72, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_48() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_56() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_80() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_112() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_120() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001100000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_144() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 72, subject,  0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_12() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111101000L);
				
				copyFrom(source, 72, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_14() {
				T source   = build(0b1111111111111111111111111111111111111111100111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001100000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001011111111111101000L);
				
				copyFrom(source, 72, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_30() {
				T source   = build(0b1111111111111111111111111001111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000010111111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_44() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_46() {
				T source   = build(0b1111111110011111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000110000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000101111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_4_62() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111110011111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 72, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_16() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_48() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_56() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_80() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_112() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 72, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_24() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_28() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000110000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000101111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_56() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_88() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_92() {
				T source   = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000110000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000101111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_120() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_16_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 72, subject, 16, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_20_44() {
				T source   = build(0b1111111111100111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000110000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111010000000000000000000L);
				
				copyFrom(source, 72, subject, 20,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_74_4_54() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111100111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011000000000000000000000000000000000000000000000000000011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000010111111111111111111111111111111111111111111111111111101000L);
				
				copyFrom(source, 74, subject,  4,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_32() {
				T source   = build(0b1111111111111110011111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_96() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_112() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_160() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_176() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_224() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_240() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000101111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_0_288() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source, 80, subject,  0, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_24() {
				T source   = build(0b1111111111111111111111100111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_28() {
				T source   = build(0b1111111111111111111001111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_88() {
				T source   = build(0b1111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_92() {
				T source   = build(0b1111111111111111111001111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_8_124() {
				T source   = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 80, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_32() {
				T source   = build(0b1111111111111110011111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_96() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_112() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_160() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_176() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_184() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_224() {
				T source   = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 80, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_112() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_176() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_180() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000110000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000101111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_240() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_32_248() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 32, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_40_24() {
				T source   = build(0b1111111111111111111111100111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000011000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111101000000000000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 40,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_96_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 80, subject, 96,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_84_8_44() {
				T source   = build(0b0111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000011000000000000000000000000000000000000000000110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000010111111111111111111111111111111111111111111010000000L);
				
				copyFrom(source, 84, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_56() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_120() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_180() {
				T source   = build(0b1111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_16_248() {
				T source   = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L);
				
				copyFrom(source, 96, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_96_80_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 96, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_104_16_24() {
				T source   = build(0b0111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010111111111111111111111101000000000000000L);
				
				copyFrom(source, 104, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_144_32_48() {
				T source   = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L);
				
				copyFrom(source, 144, subject, 32,  48);
				assertThat(subject, is(equalTo(expected)));
			}
		
			// test cases for boundaries
		
			@Test public void copyFrom_0_0__16__8_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__16_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__8_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8_0_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8_8_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0__8_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_0_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_8_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8__8_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_0_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_8_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_16_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16_8_0() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  16, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__32__16_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -32, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__24__16_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__24__8_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__32_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject, -32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__24_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__16_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__8_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16_0_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16_8_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__24_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__16_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__8_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8_0_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8_8_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0__16_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0__8_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_0_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_8_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_16_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8__16_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8__8_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_0_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_8_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_16_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_24_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16_0_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  16, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16_8_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  16, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_24_8_8() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  24, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__1__24_9() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject, -24,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__1_8_9() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject,   8,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__1_16_9() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject,  16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__4__16_12() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -4, subject, -16,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_4__8_12() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   4, subject,  -8,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_9__7_15() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   9, subject,  -7,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__32__24_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -32, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__32__8_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -32, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__24__32_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject, -32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__24__16_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__24__8_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__24_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__8_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__16_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__8_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8_0_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0__8_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_8_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_0_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_16_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16_8_16() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  16, subject,   8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__9__25_17() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -9, subject, -25,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__1_8_17() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject,   8,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_1__8_23() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   1, subject,  -8,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__32__16_24() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -32, subject, -16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__8_24() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  -8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__16_24() {
				T source   = build();
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_56_0() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_0_0() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  56, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_48_0() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_56_0() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  64, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  72, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_80_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  80,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_80_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__32__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -32, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -24, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -24, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__32_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__24_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -16, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__24_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_32_48_8() {
				T source   = build(0b1111111111111111111111001111110011111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_40_48_8() {
				T source   = build(0b1111111111111100111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_40_56_8() {
				T source   = build(0b1111111111111100111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48__8_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  48, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_32_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000110000001100000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000111111110000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_40_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  40,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_48_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_56_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56__8_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  56, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_40_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  40,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_48_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_56_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  64, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,  64, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_80_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  72, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_80_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_88_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  88,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_80_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_80_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_88_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  88, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63__16_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, -16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63__9_9() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  63, subject,  -9,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63_40_9() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000110000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000110000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  40,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63_72_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject,  72,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63_80_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject,  80,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_60_48_12() {
				T source   = build(0b1100111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0011000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0011000000001100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  60, subject,  48,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_68_56_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  68, subject,  56,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_65_0_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000011000000000000000L);
				
				copyFrom(source,  65, subject,   0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_73_57_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  73, subject,  57,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__32__24_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -32, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24__32_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -24, subject, -32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24__16_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -24, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__24_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_32_40_16() {
				T source   = build(0b1111111111111100111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  40,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_32_56_16() {
				T source   = build(0b1111111111111100111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_40_32_16() {
				T source   = build(0b1111110011111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000001100000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111111111110000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_40_48_16() {
				T source   = build(0b1111110011111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_40_56_16() {
				T source   = build(0b1111110011111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_40_16() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  40,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_56_16() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_48_16() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000011111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_56_16() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_64_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_72_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_64_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_80_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  80,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_80_72_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_55_39_17() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000011000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000111111100000000000000000000000000000000000000000L);
				
				copyFrom(source,  55, subject,  39,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63_72_17() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject,  72,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_65_56_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  56,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_32_48_24() {
				T source   = build(0b1111110011111111111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_56_24() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_48_24() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000011111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_28_0_28() {
				T source   = build(0b1111110011111111111111111111111111001111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000110000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000111111111111111111111111111100L);
				
				copyFrom(source,  28, subject,   0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1_31_32() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111100000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  31,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_32_32() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  32,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_24__8_32() {
				T source   = build(0b1111110011111111111111111111111111111100111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000011111111111111111111111111L);
				
				copyFrom(source,  24, subject,  -8,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_32_0_32() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000001111111111111111111111111111111100L);
				
				copyFrom(source,  32, subject,   0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_36_0_36() {
				T source   = build(0b1111111111111111111111111100111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000011000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000011000000001111111111111111111111111100L);
				
				copyFrom(source,  36, subject,   0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_15_48() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111110000000000000000L);
				
				copyFrom(source,   0, subject,  15,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_56_48() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_8_0_48() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000011111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_49_0_48() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000011000000000000000000000000000000000111111111111100L);
				
				copyFrom(source,  49, subject,   0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1_14_49() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000001100000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111000000000000000L);
				
				copyFrom(source,  -1, subject,  14,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1_56_49() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_49__1_49() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011000000000000000000000000000000000011111111111110L);
				
				copyFrom(source,  49, subject,  -1,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_1__8_55() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111001L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   1, subject,  -8,  55);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__64_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -64, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__56_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -56, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_0_56() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__57_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, -57,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__56_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject, -56,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__8_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_0_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_8_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111000000000L);
				
				copyFrom(source,   0, subject,   8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_48_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111110000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  48,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_56_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_64_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_72_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_8_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_16_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001100000000111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  16, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_64() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source, -16, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_64() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__8_64() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_0_64() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__8_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_0_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__9__73_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -73,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__67_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -67,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__66_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -66,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__65_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -65,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1_56_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_1__7_71() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   1, subject,  -7,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__88__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__80__16_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject, -16,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__80__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__80_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__72__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__72_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__73_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, -73,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__72_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject, -72,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_56_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_8_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000011111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__9__81_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -81,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__75_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -75,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__74_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -74,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__73_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -73,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__16_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000011000000001111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -16,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1_55_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  55,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_1__8_79() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   1, subject,  -8,  79);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__96__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -96, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__88__16_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__88__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__80__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_0_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__9__89_81() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -89,  81);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__96__16_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -96, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16__8_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__16_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__8_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_0_0() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_8_0() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,  -8, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_64_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_72_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0__8_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_0_0() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_8_0() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,   0, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_64_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_72_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8__8_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8_0_0() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8_8_0() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,   8, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8_16_0() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				
				copyFrom(source,   8, subject,  16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_16_8_0() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,  16, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56_64_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56_72_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64__8_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_0_0() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  64, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_56_0() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_64_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_72_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72__8_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_0_0() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  72, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_56_0() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_64_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_72_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_80_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  80,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_80_72_0() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__32__16_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -32, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__24__16_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -24, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__24__8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -24, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16__32_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16__24_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16__16_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16__8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -16, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16_0_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source, -16, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16_8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				
				copyFrom(source, -16, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16_56_8() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16_64_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16_72_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__24_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__16_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_0_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,  -8, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				
				copyFrom(source,  -8, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_56_8() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_64_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_72_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0__16_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0__8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_0_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,   0, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				
				copyFrom(source,   0, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_16_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000011000000110000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000011000000000000000000000000L);
				
				copyFrom(source,   0, subject,  16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8__16_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8__8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8_0_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,   8, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8_8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				
				copyFrom(source,   8, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8_16_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000011000000110000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000011000000000000000000000000L);
				
				copyFrom(source,   8, subject,  16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8_24_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000001100000011000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000001100000000000000000000000000000000L);
				
				copyFrom(source,   8, subject,  24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_16_0_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,  16, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_16_8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				
				copyFrom(source,  16, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_24_8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				
				copyFrom(source,  24, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_40_56_8() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_48_56_8() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_48_64_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_48_72_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56__16_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56__8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  56, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56_40_8() {
				T source   = build();
				T subject  = build(0b0000000000000011000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  40,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56_48_8() {
				T source   = build();
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56_56_8() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56_64_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56_72_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64__16_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64__8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  64, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_0_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,  64, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_48_8() {
				T source   = build();
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_56_8() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_64_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_72_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_80_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72__16_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72__8_8() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  72, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_48_8() {
				T source   = build();
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_56_8() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_64_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_72_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_80_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_88_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  88,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_80_64_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_80_72_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_88_72_8() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  88, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1__24_9() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -24,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1_8_9() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000001100000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001100000000000000000L);
				
				copyFrom(source,  -1, subject,   8,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1_16_9() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000110000000110000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000110000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_63__16_9() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, -16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_63__9_9() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  63, subject,  -9,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_63_40_9() {
				T source   = build();
				T subject  = build(0b0000000000000110000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000110000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  40,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_63_72_9() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject,  72,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_63_80_9() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject,  80,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__4__16_12() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -4, subject, -16,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_4__8_12() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000110000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000110000L);
				
				copyFrom(source,   4, subject,  -8,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_60_48_12() {
				T source   = build();
				T subject  = build(0b0011000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0011000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  60, subject,  48,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_68_56_12() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  68, subject,  56,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_9__7_15() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,   9, subject,  -7,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_65_0_15() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000011000000000000000L);
				
				copyFrom(source,  65, subject,   0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_73_57_15() {
				T source   = build();
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  73, subject,  57,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__32__24_16() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -32, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__32__8_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source, -32, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__24__32_16() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -24, subject, -32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__24__16_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -24, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__24__8_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source, -24, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__24_56_16() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16__24_16() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16__8_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source, -16, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16_56_16() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__16_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -8, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__8_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,  -8, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_0_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				
				copyFrom(source,  -8, subject,   0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0__8_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,   0, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_8_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000011000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000011000000000000000000000000L);
				
				copyFrom(source,   0, subject,   8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8_0_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				
				copyFrom(source,   8, subject,   0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8_16_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000001100000000000000110000000000000000L);
				T expected = build(0b0000000000000000000000000000001100000000000000000000000000000000L);
				
				copyFrom(source,   8, subject,  16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_16_8_16() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000011000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000011000000000000000000000000L);
				
				copyFrom(source,  16, subject,   8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_32_56_16() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_40_48_16() {
				T source   = build();
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_40_56_16() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_48_40_16() {
				T source   = build();
				T subject  = build(0b0000001100000000000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  40,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_48_56_16() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56_48_16() {
				T source   = build();
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56_56_16() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56_64_16() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_56_16() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64_72_16() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_64_16() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_72_80_16() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  80,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_80_72_16() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__9__25_17() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -25,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1_8_17() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000110000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000110000000000000000000000000L);
				
				copyFrom(source,  -1, subject,   8,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_55_39_17() {
				T source   = build();
				T subject  = build(0b0000001100000000000000011000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  55, subject,  39,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_63_72_17() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject,  72,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_1__8_23() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011000000000000000L);
				
				copyFrom(source,   1, subject,  -8,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_65_56_23() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  56,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__32__16_24() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source, -32, subject, -16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16__8_24() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L);
				
				copyFrom(source, -16, subject,  -8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__16_24() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,  -8, subject, -16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_32_48_24() {
				T source   = build();
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_48_56_24() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56_48_24() {
				T source   = build();
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_32_32() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  32,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_32_0_32() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000001100000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,   0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_36_0_36() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000011000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000011000000000000000000000000000000000000L);
				
				copyFrom(source,  36, subject,   0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_56_48() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_49_0_48() {
				T source   = build();
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  49, subject,   0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1_56_49() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_49__1_49() {
				T source   = build();
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  49, subject,  -1,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_8_56() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,   8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_48_56() {
				T source   = build();
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  48,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_56_56() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_64_56() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_72_56() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8_0_56() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   8, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_16_0_56() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  16, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_0_64() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0__8_64() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_0_64() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1__67_65() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -67,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1__66_65() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -66,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1__65_65() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -65,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1_56_65() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_1__7_71() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   1, subject,  -7,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__88__8_72() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__80__8_72() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__80_0_72() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__72__8_72() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__72_0_72() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16__8_72() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__16_72() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__8_72() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_0_72() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0__73_72() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, -73,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0__72_72() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject, -72,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0__8_72() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_0_72() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0_56_72() {
				T source   = build();
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8_0_72() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__9__81_73() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -81,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1__75_73() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -75,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1__74_73() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -74,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1__73_73() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -73,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1__16_73() {
				T source   = build();
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000011000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, -16,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__1_55_73() {
				T source   = build();
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  55,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_1__8_79() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   1, subject,  -8,  79);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__96__8_80() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -96, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__88__16_80() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__88__8_80() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__80__8_80() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__24__8_80() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16__8_80() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__16_80() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__8_80() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8_0_80() {
				T source   = build();
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,   0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0__8_80() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__9__89_81() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -89,  81);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__96__16_88() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -96, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__16__8_88() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64__8__16_88() {
				T source   = build();
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__16_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_0_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_0_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8_0_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8_8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8_16_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_16_8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  16, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_0_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_56_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_0_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_56_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_80_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  80,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_80_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  80, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__32__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -32, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__24__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__24__8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16__32_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject, -32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16__24_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16__8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16_0_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16_8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16_56_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__24_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_0_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_56_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0__8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_0_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8__8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8_0_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8_8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8_16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8_24_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_16_0_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  16, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_16_8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  16, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_24_8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  24, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_40_56_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  40, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_48_56_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  48, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_48_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  48, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_48_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  48, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56__8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56_40_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  40,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56_48_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56_56_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64__8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_0_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_48_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_56_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_80_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72__8_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_48_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_56_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_80_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_88_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  88,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_80_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  80, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_80_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  80, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_88_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  88, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1__24_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject, -24,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1_8_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject,   8,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1_16_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject,  16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_63__16_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  63, subject, -16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_63__9_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  63, subject,  -9,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_63_40_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  63, subject,  40,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_63_72_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  63, subject,  72,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_63_80_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  63, subject,  80,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__4__16_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -4, subject, -16,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_4__8_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   4, subject,  -8,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_60_48_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  60, subject,  48,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_68_56_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  68, subject,  56,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_9__7_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   9, subject,  -7,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_65_0_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  65, subject,   0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_73_57_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  73, subject,  57,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__32__24_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -32, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__32__8_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -32, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__24__32_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject, -32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__24__16_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__24__8_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__24_56_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16__24_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16__8_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16_56_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__16_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__8_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_0_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0__8_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_8_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8_0_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8_16_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,  16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_16_8_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  16, subject,   8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_32_56_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  32, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_40_48_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  40, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_40_56_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  40, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_48_40_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  48, subject,  40,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_48_56_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  48, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56_48_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56_56_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56_64_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_56_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64_72_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  64, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_64_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_72_80_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  72, subject,  80,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_80_72_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  80, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__9__25_17() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -9, subject, -25,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1_8_17() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject,   8,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_55_39_17() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  55, subject,  39,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_63_72_17() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  63, subject,  72,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_1__8_23() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   1, subject,  -8,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_65_56_23() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  65, subject,  56,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__32__16_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -32, subject, -16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16__8_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  -8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__16_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_32_48_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  32, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_48_56_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  48, subject,  56,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56_48_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  56, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_32_32() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  32,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_32_0_32() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  32, subject,   0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_36_0_36() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  36, subject,   0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_56_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  56,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_49_0_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  49, subject,   0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1_56_49() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject,  56,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_49__1_49() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  49, subject,  -1,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_8_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_48_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  48,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_56_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  56,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_64_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_72_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8_0_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_16_0_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  16, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_0_64() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0__8_64() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_0_64() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1__67_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject, -67,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1__66_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject, -66,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1__65_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject, -65,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1_56_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject,  56,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_1__7_71() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   1, subject,  -7,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__88__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -88, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__80__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -80, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__80_0_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -80, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__72__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -72, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__72_0_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -72, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__16_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -16,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_0_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0__73_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject, -73,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0__72_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject, -72,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_0_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0_56_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8_0_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__9__81_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -9, subject, -81,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1__75_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject, -75,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1__74_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject, -74,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1__73_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject, -73,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1__16_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject, -16,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__1_55_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -1, subject,  55,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_1__8_79() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   1, subject,  -8,  79);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__96__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -96, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__88__16_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -88, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__88__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -88, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__80__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -80, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__24__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -24, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__16_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8_0_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject,   0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,   0, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__9__89_81() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -9, subject, -89,  81);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__96__16_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -96, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__16__8_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source, -16, subject,  -8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0__8__16_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build();
				T expected = build();
				
				copyFrom(source,  -8, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__16_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_64_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_72_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_64_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_72_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_56_0() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_0_0() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  56, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_48_0() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_56_0() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_64_0() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_72_0() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  64, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_64_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_72_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  72, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_64_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_72_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_80_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  80,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_80_72_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  80, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 128, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_64_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_120_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject, 120,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 136, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 136, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_64_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 136, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_120_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 136, subject, 120,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_144_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 144,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_144_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 144, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__32__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -32, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__24__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -24, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__24__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -24, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__32_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__24_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -16, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16_64_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16_72_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16_120_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__24_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_64_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_72_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_120_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_32_48_8() {
				T source   = build(0b1111111111111111111111001111110011111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_40_48_8() {
				T source   = build(0b1111111111111100111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_40_56_8() {
				T source   = build(0b1111111111111100111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48__8_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  48, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_32_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000110000001100000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000111111110000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_40_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  40,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_48_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_56_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_64_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_72_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000111111110000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_120_8() {
				T source   = build(0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56__8_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  56, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_40_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  40,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_48_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_56_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_64_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_72_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000111111110000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_120_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  64, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source,  64, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_64_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_72_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_80_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000011000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000011000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  72, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_64_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_72_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_80_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000011000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000011000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_88_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000001100000011000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000001100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  88,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_80_64_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  80, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_80_72_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  80, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_88_72_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  88, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_104_120_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 104, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_112_120_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 112, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_112_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 112, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_112_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 112, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 120, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 120, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 120, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_104_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000110000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 120, subject, 104,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_112_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 120, subject, 112,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_120_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 120, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 128, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source, 128, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_64_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_112_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject, 112,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_120_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_144_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 144,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 136, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 136, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 136, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_112_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 136, subject, 112,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_120_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 136, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_144_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 144,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_152_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 152,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_144_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 144, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_144_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 144, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_152_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 152, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63__16_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, -16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63__9_9() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  63, subject,  -9,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_40_9() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000110000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000110000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  40,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_72_9() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000001100000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001100000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  72,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_80_9() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000110000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000110000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  80,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_127__16_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 127, subject, -16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_127__9_9() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 127, subject,  -9,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_127_48_9() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 127, subject,  48,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_127_55_9() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 127, subject,  55,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_127_104_9() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000110000000110000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000110000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 127, subject, 104,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_127_136_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 127, subject, 136,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_127_144_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 127, subject, 144,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_60_48_12() {
				T source   = build(0b1100111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0011000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0011000000001100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  60, subject,  48,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_68_56_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000110000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  68, subject,  56,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_124_112_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0011000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0011000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 124, subject, 112,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_132_120_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 132, subject, 120,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_65_0_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				
				copyFrom(source,  65, subject,   0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_73_57_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  73, subject,  57,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129_0_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000000000000000L);
				
				copyFrom(source, 129, subject,   0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129_64_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  64,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_137_121_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 137, subject, 121,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__32__24_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -32, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__24__32_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -24, subject, -32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__24__16_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -24, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__24_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__24_120_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__24_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16_120_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_32_40_16() {
				T source   = build(0b1111111111111100111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111111111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  40,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_32_56_16() {
				T source   = build(0b1111111111111100111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001111111111L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_40_32_16() {
				T source   = build(0b1111110011111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000001100000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011111111111111110000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_40_48_16() {
				T source   = build(0b1111110011111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_40_56_16() {
				T source   = build(0b1111110011111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001111111111L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_40_120_16() {
				T source   = build(0b1111110011111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_40_16() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111111111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  40,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_56_16() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001111111111L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_120_16() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_48_16() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000011111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_56_16() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_64_16() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000011111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_72_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000011000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_64_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_80_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000001100000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000001100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  80,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_80_72_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000011000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  80, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_96_120_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  96, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_104_112_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 104, subject, 112,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_104_120_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 104, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_112_104_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000110000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 112, subject, 104,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_112_120_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 112, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_112_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 120, subject, 112,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_120_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 120, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_128_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 128,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_120_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_136_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 136,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_128_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 128,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_136_144_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 144,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_144_136_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 144, subject, 136,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_55_39_17() {
				T source   = build(0b1111111001111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000011000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000111111100000000000000000000000000000000000000000L);
				
				copyFrom(source,  55, subject,  39,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_72_17() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000110000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000110000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  72,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_119_103_17() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000011000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 119, subject, 103,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_127_136_17() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 127, subject, 136,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_65_56_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  56,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129_120_23() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject, 120,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_32_48_24() {
				T source   = build(0b1111110011111111111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001111111111L,
				                   0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_56_24() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000011111111L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_48_24() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000011111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_96_112_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  96, subject, 112,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_112_120_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 112, subject, 120,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_120_112_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 120, subject, 112,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_28_0_28() {
				T source   = build(0b1111110011111111111111111111111111001111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000110000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000111111111111111111111111111100L);
				
				copyFrom(source,  28, subject,   0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_31_32() {
				T source   = build(0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  31,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_32_32() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000001100000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1111111111111111111111111111111000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  32,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_24__8_32() {
				T source   = build(0b1111110011111111111111111111111111111100111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000011000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000011111111111111111111111111L);
				
				copyFrom(source,  24, subject,  -8,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_32_0_32() {
				T source   = build(0b1111111111111111111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001100000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001111111111111111111111111111111100L);
				
				copyFrom(source,  32, subject,   0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_96_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  96,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_96_64_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000001100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  96, subject,  64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_36_0_36() {
				T source   = build(0b1111111111111111111111111100111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000011000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000011000000001111111111111111111111111100L);
				
				copyFrom(source,  36, subject,   0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_100_64_36() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000011000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000011000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 100, subject,  64,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_15_48() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				
				copyFrom(source,   0, subject,  15,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_56_48() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000110000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000111111111111111111111111111111111111111111L,
				                   0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_8_0_48() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_49_0_48() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000111111111111100L);
				
				copyFrom(source,  49, subject,   0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_120_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject, 120,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_113_64_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 113, subject,  64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_14_49() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000001100000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111000000000000000L);
				
				copyFrom(source,  -1, subject,  14,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_56_49() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000001100000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000001111111111111111111111111111111111111111111L,
				                   0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_49__1_49() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000011111111111110L);
				
				copyFrom(source,  49, subject,  -1,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_120_49() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject, 120,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_113_63_49() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 113, subject,  63,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_1__8_55() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   1, subject,  -8,  55);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__64_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -64, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__56_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -56, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_0_56() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__57_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, -57,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__56_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject, -56,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__8_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_0_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_8_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1111111111111111111111111111111111111111111111111111111000000000L);
				
				copyFrom(source,   0, subject,   8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_48_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000110000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000111111111111111111111111111111111111111111L,
				                   0b1111111111111110000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  48,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_56_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111111111111111111111111111111111111111111111L,
				                   0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_64_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_71_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  71,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_72_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_120_56() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject, 120,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_128_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 128,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_136_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 136,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_8_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_16_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  16, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_72_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_112_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject, 112,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_120_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject, 120,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_128_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 128,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_136_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 136,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_64_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_80_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  80, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_80_64_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  80, subject,  64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__8_64() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source, -16, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__16_64() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__8_64() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_0_64() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_64_64() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__8_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_0_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_64_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_64_64() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64__8_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_0_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_56_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_64_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__9__73_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -73,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__67_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -67,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__66_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -66,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__65_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -65,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_56_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_120_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, 120,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_128_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 128,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_136_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 136,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63__66_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, -66,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63__65_65() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  63, subject, -65,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63__8_65() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  -8,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_120_65() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject, 120,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_128_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 128,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_136_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 136,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128__1_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  -1,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_0_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,   0,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_63_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  63,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_64_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  64,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129__1_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  -1,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129_0_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,   0,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129_63_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  63,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129_64_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  64,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_63_66() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  63,  66);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129_63_66() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  63,  66);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129_64_66() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  64,  66);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129_63_67() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  63,  67);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_68_0_68() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  68, subject,   0,  68);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_1__7_71() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   1, subject,  -7,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_65__7_71() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  -7,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_65_0_71() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,   0,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_65_57_71() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  57,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__88__8_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__80__16_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject, -16,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__80__8_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__80_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__80_56_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__80_64_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__72__8_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__72_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__72_56_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__72_64_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__24_56_72() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__8_72() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source, -16, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__16_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__8_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_56_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_64_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__73_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, -73,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__72_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject, -72,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__8_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_55_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  55,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_8_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000011111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_56_72() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011111111L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56__8_72() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_48_72() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_56_72() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_64_72() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64__73_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, -73,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64__72_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  64, subject, -72,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64__8_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_56_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_64_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_120_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject, 120,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_128_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 128,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_136_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 136,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_144_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 144,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_72_64_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_137_64_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 137, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__9__81_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -81,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__75_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -75,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__74_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -74,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__73_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -73,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__16_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011000000001111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -16,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_54_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  54,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63__74_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, -74,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63__73_73() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  63, subject, -73,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63__11_73() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b1100000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b1100000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject, -11,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63__9_73() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  -9,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_48_73() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000011000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  48,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_120_73() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject, 120,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_128_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 128,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_136_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 136,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_144_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 144,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_137_63_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 137, subject,  63,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_1__8_79() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110000000L,
				                   0b0000000001111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   1, subject,  -8,  79);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_65_56_79() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  56,  79);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__96__8_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -96, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__88__16_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__88__8_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__88_56_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__80__8_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__80_56_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__32_56_80() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -32, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__24__8_80() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				
				copyFrom(source, -24, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__8_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source, -16, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16_56_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__16_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__8_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_0_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__8_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_40_56_80() {
				T source   = build(0b1111111111111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000001111111111111111L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_56_80() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011111111L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_48_80() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_56_80() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_64_80() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_56_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_136_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 136,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__9__89_81() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -89,  81);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_63_136_81() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 136,  81);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__96__16_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -96, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__8_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110000000011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source, -16, subject,  -8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__16_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L,
				                   0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_48_56_88() {
				T source   = build(0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011111111L,
				                   0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_56_48_88() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_120_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject, 120, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_113_0_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 113, subject,   0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_120_113() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, 120, 113);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_113__1_113() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 113, subject,  -1, 113);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_8_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111000000000L);
				
				copyFrom(source,   0, subject,   8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_56_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000011111111111111111111111111111111111111111111111111111111L,
				                   0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_64_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  64, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_112_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111110000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject, 112, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_120_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject, 120, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_128_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 128, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_136_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 136, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_8_0_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_16_0_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  16, subject,   0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_0_128() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__8_128() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_0_128() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__131_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -131, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__130_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -130, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__129_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -129, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__66_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, -66, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__65_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, -65, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_56_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_64_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  64, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_120_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, 120, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_128_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 128, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_136_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 136, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64__1_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  -1, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64_0_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,   0, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_65__1_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  -1, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_65_0_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,   0, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128__1_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  -1, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128_0_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,   0, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129__1_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  -1, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129_0_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,   0, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_64__1_130() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  -1, 130);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_65__1_130() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  -1, 130);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_128__1_130() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  -1, 130);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129__1_130() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  -1, 130);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129_0_130() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,   0, 130);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_129__1_131() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  -1, 131);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_1__7_135() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   1, subject,  -7, 135);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__152__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -152, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__144__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -144, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__144_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -144, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__136__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -136, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__136_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -136, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__80__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__72__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__72_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__16_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__137_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, -137, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__136_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject, -136, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__72_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject, -72, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_56_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000011111111111111111111111111111111111111111111111111111111L,
				                   0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_64_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  64, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_120_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject, 120, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_128_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 128, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_136_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 136, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_144_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 144, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_8_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_137_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 137, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__9__145_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -145, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__139_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -139, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__138_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -138, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__137_137() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -137, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__74_137() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, -74, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__73_137() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, -73, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1__16_137() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000011000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -16, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_56_137() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_64_137() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  64, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_120_137() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, 120, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_128_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 128, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_136_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 136, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_144_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 144, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_137__1_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 137, subject,  -1, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_1__8_143() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   1, subject,  -8, 143);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__160__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -160, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__152__16_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -152, subject, -16, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__152__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -152, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__144__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -144, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__88__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__80__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__24__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__16_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8_0_144() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128_0_136_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 136, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__9__153_145() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -153, 145);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__1_136_145() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 136, 145);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__160__16_152() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -160, subject, -16, 152);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__16__8_152() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8, 152);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_128__8__16_152() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16, 152);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__16_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  56, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_48_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  64, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  72, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_80_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  80,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_80_72_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 128, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_120_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 120,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136__8_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_0_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 136, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_56_0() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 136, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_120_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 120,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_128_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 128,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_144_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 144,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_144_136_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 144, subject, 136,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__32__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -32, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__24__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -24, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__24__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -24, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__32_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__24_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -16, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16_120_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__24_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_120_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_32_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111001111110011111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_40_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_40_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  48, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_32_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000110000001100000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000111111110000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_40_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  40,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_120_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  56, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_40_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  40,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_120_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  64, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001111111100L);
				
				copyFrom(source,  64, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_80_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  72, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  72, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_80_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_88_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  88,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_80_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_80_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_88_72_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  88, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_104_120_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 104, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_112_120_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 112, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_112_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 112, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_112_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 112, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120__8_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 120, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_48_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 120, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_56_8() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 120, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_104_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 104,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_112_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 112,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_120_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 128, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_0_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				
				copyFrom(source, 128, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_112_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 112,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_120_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_144_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 144,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136__16_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136__8_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 136, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_48_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 136, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_56_8() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 136, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_112_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 112,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_120_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 120,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_144_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 144,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_152_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 152,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_144_128_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 144, subject, 128,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_144_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 144, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_152_136_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 152, subject, 136,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63__16_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, -16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63__9_9() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  63, subject,  -9,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_40_9() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000110000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000111111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  40,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_72_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject,  72,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_80_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject,  80,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_127__16_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 127, subject, -16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_127__9_9() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, 127, subject,  -9,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_127_48_9() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000011000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000011000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 127, subject,  48,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_127_55_9() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 127, subject,  55,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_127_104_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 127, subject, 104,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_127_136_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 127, subject, 136,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_127_144_9() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 127, subject, 144,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_60_48_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1100111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0011000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0011111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  60, subject,  48,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_68_56_12() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111001111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  68, subject,  56,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_124_112_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 124, subject, 112,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_132_120_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 132, subject, 120,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_65_0_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000011111111111111100L);
				
				copyFrom(source,  65, subject,   0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_73_57_15() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111100111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111100000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  73, subject,  57,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129_0_15() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000011000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000011000000000000000L);
				
				copyFrom(source, 129, subject,   0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129_64_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 129, subject,  64,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_137_121_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 137, subject, 121,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__32__24_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -32, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__24__32_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -24, subject, -32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__24__16_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source, -24, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__24_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__24_120_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -24, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__24_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16_120_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -16, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_32_40_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  40,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_32_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_40_32_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000001100000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111111111110000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_40_48_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_40_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_40_120_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  40, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_40_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000110000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  40,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_120_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  48, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_48_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_64_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_56_16() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_72_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_64_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_80_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  80,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_80_72_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_96_120_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  96, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_104_112_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 104, subject, 112,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_104_120_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 104, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_112_104_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 112, subject, 104,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_112_120_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 112, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_112_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 112,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_120_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_128_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 128,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_120_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 120,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_136_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject, 136,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_128_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 128,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_136_144_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 136, subject, 144,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_144_136_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 144, subject, 136,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_55_39_17() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000011000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111100000000000000000000000000000000000000000L);
				
				copyFrom(source,  55, subject,  39,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_72_17() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject,  72,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_119_103_17() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 119, subject, 103,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_127_136_17() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 127, subject, 136,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_65_56_23() {
				T source   = build(0b1111111111111111111111111111111111111100111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  56,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129_120_23() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 129, subject, 120,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_32_48_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  32, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_56_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_48_24() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_96_112_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  96, subject, 112,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_112_120_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 112, subject, 120,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_120_112_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 120, subject, 112,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_28_0_28() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111001111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000110000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000111111111111111111111111111100L);
				
				copyFrom(source,  28, subject,   0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_31_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000110000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111100000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  31,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_32_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110011111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  32,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_24__8_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111100111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000011000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000011111111111111111111111111L);
				
				copyFrom(source,  24, subject,  -8,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_32_0_32() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111110011111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000001100000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000001111111111111111111111111111111100L);
				
				copyFrom(source,  32, subject,   0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_96_32() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  96,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_96_64_32() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  96, subject,  64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_36_0_36() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111100111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000011000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000011111111111111111111111111111111111100L);
				
				copyFrom(source,  36, subject,   0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_100_64_36() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 100, subject,  64,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_15_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111110L);
				T subject  = build(0b1000000000000000000000000000000000000000000000011000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111110000000000000000L);
				
				copyFrom(source,   0, subject,  15,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_56_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_8_0_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000011111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_49_0_48() {
				T source   = build(0b1111111111111111111111111111100111111111111111111111111111111111L,
				                   0b1111111111111001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000011111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  49, subject,   0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_120_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 120,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_113_64_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 113, subject,  64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_14_49() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000001100000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111000000000000000L);
				
				copyFrom(source,  -1, subject,  14,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_56_49() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_49__1_49() {
				T source   = build(0b1111111111111111111111111111001111111111111111111111111111111111L,
				                   0b1111111111111001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,  49, subject,  -1,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_120_49() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 120,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_113_63_49() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 113, subject,  63,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_1__8_55() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111001L);
				T subject  = build(0b0000000000000001100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   1, subject,  -8,  55);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__64_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -64, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__56_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -56, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__57_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, -57,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__56_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject, -56,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__8_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_8_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111000000000L);
				
				copyFrom(source,   0, subject,   8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_48_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111110000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  48,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_56_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_64_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_71_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  71,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_72_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_120_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 120,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_128_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 128,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_136_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 136,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_8_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_16_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111111111111111111111111001111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  16, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_72_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_112_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 112,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_120_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 120,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_128_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 128,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_136_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 136,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  72, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_64_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_80_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000001100000000111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  80, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_80_64_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  80, subject,  64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__8_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source, -16, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__16_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000011111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__8_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_0_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_64_64() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__8_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_0_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_64_64() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_64_64() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64__8_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_0_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  64, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_56_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_64_64() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__9__73_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -73,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__67_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -67,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__66_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -66,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__65_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -65,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_56_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_120_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 120,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_128_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 128,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_136_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 136,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63__66_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, -66,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63__65_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  63, subject, -65,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63__8_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000011111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject,  -8,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_120_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 120,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_128_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 128,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_136_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 136,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128__1_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  -1,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_0_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,   0,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_63_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  63,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_64_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 128, subject,  64,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129__1_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  -1,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129_0_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,   0,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129_63_65() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  63,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129_64_65() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 129, subject,  64,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_63_66() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  63,  66);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129_63_66() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  63,  66);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129_64_66() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 129, subject,  64,  66);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129_63_67() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  63,  67);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_68_0_68() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111001111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000111111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  68, subject,   0,  68);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_1__7_71() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   1, subject,  -7,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_65__7_71() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  -7,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_65_0_71() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  65, subject,   0,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_65_57_71() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111100000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  57,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__88__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__80__16_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject, -16,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__80__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__80_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__80_56_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__80_64_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -80, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__72__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__72_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__72_56_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__72_64_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, -72, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__24_56_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__16_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000001111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject, -16,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_56_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_64_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -8, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__73_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, -73,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__72_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject, -72,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_55_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  55,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_8_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111001111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_56_72() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_48_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_56_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_64_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64__73_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, -73,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64__72_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  64, subject, -72,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64__8_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_0_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  64, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_56_72() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_64_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_120_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 120,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_128_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 128,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_136_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 136,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_144_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 144,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_72_64_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  72, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_137_64_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source, 137, subject,  64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__9__81_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -81,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__75_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -75,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__74_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -74,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__73_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -73,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__16_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000011000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000011111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -16,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_54_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000011000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  54,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63__74_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, -74,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63__73_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  63, subject, -73,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63__11_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1100000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1100000000111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, -11,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63__9_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  -9,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_48_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  63, subject,  48,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_120_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 120,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_128_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 128,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_136_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 136,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_144_73() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 144,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_137_63_73() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 137, subject,  63,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_1__8_79() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   1, subject,  -8,  79);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_65_56_79() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  56,  79);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__96__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -96, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__88__16_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__88__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__88_56_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__80__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__80_56_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__32_56_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -32, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__24__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16_56_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__16_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_0_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110011111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_40_56_80() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111001111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  40, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_56_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_48_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_56_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_64_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  56, subject,  64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_56_80() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  56,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_136_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  64, subject, 136,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__9__89_81() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -89,  81);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_63_136_81() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  63, subject, 136,  81);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__96__16_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -96, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__8_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__16_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_48_56_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111100111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  48, subject,  56,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_56_48_88() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110011111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111100000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  56, subject,  48,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_120_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 120, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_113_0_112() {
				T source   = build(0b1111111111111001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000111111111111100L);
				
				copyFrom(source, 113, subject,   0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_120_113() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 120, 113);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_113__1_113() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 113, subject,  -1, 113);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_8_120() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001100000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111000000000L);
				
				copyFrom(source,   0, subject,   8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_56_120() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_64_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  64, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_112_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 112, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_120_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 120, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_128_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 128, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_136_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 136, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_8_0_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_16_0_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111001111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  16, subject,   0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_0_128() {
				T source   = build(0b1111110011111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__8_128() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_0_128() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__131_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -131, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__130_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -130, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__129_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -129, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__66_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -66, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__65_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, -65, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_56_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_64_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject,  64, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_120_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 120, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_128_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 128, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_136_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 136, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64__1_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  -1, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64_0_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  64, subject,   0, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_65__1_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  -1, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_65_0_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,  65, subject,   0, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128__1_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  -1, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128_0_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,   0, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129__1_129() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  -1, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129_0_129() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,   0, 129);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_64__1_130() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  64, subject,  -1, 130);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_65__1_130() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  65, subject,  -1, 130);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_128__1_130() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 128, subject,  -1, 130);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129__1_130() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  -1, 130);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129_0_130() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,   0, 130);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_129__1_131() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 129, subject,  -1, 131);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_1__7_135() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   1, subject,  -7, 135);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__152__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -152, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__144__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -144, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__144_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -144, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__136__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -136, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__136_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -136, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__80__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__72__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__72_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -72, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__16_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__137_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, -137, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__136_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,   0, subject, -136, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__72_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject, -72, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__8_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(source,   0, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_56_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  56, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_64_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject,  64, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_120_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 120, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_128_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 128, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_136_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 136, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_144_136() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 144, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_8_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111100L);
				
				copyFrom(source,   8, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_137_0_136() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 137, subject,   0, 136);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__9__145_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -145, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__139_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -139, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__138_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -138, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__137_137() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(source,  -1, subject, -137, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__74_137() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000001111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, -74, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__73_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, -73, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1__16_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject, -16, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_56_137() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000001100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -1, subject,  56, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_64_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject,  64, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_120_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 120, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_128_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 128, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_136_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 136, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_144_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 144, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_137__1_137() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, 137, subject,  -1, 137);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_1__8_143() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   1, subject,  -8, 143);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__160__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -160, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__152__16_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -152, subject, -16, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__152__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -152, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__144__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -144, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__88__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -88, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__80__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -80, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__24__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -24, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__16_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8_0_144() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(source,  -8, subject,   0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0__8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,   0, subject,  -8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64_0_136_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,   0, subject, 136, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__9__153_145() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -9, subject, -153, 145);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__1_136_145() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(source,  -1, subject, 136, 145);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__160__16_152() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -160, subject, -16, 152);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__16__8_152() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source, -16, subject,  -8, 152);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_128_64__8__16_152() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(source,  -8, subject, -16, 152);
				assertThat(subject, is(equalTo(expected)));
			}
		}
		
		public static abstract class CopyFromDifferentSource<T> extends SafeCopyFromDifferentSource<T> {
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__8_0() { super.copyFrom_0_0__16__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__16_0() { super.copyFrom_0_0__8__16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__8_0() { super.copyFrom_0_0__8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8_0_0() { super.copyFrom_0_0__8_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8_8_0() { super.copyFrom_0_0__8_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0__8_0() { super.copyFrom_0_0_0__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0_8_0() { super.copyFrom_0_0_0_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8__8_0() { super.copyFrom_0_0_8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_0_0() { super.copyFrom_0_0_8_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_8_0() { super.copyFrom_0_0_8_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_16_0() { super.copyFrom_0_0_8_16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_16_8_0() { super.copyFrom_0_0_16_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__32__16_8() { super.copyFrom_0_0__32__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__24__16_8() { super.copyFrom_0_0__24__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__24__8_8() { super.copyFrom_0_0__24__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__32_8() { super.copyFrom_0_0__16__32_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__24_8() { super.copyFrom_0_0__16__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__16_8() { super.copyFrom_0_0__16__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__8_8() { super.copyFrom_0_0__16__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16_0_8() { super.copyFrom_0_0__16_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16_8_8() { super.copyFrom_0_0__16_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__24_8() { super.copyFrom_0_0__8__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__16_8() { super.copyFrom_0_0__8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__8_8() { super.copyFrom_0_0__8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8_0_8() { super.copyFrom_0_0__8_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8_8_8() { super.copyFrom_0_0__8_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0__16_8() { super.copyFrom_0_0_0__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0__8_8() { super.copyFrom_0_0_0__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0_0_8() { super.copyFrom_0_0_0_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0_8_8() { super.copyFrom_0_0_0_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0_16_8() { super.copyFrom_0_0_0_16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8__16_8() { super.copyFrom_0_0_8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8__8_8() { super.copyFrom_0_0_8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_0_8() { super.copyFrom_0_0_8_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_8_8() { super.copyFrom_0_0_8_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_16_8() { super.copyFrom_0_0_8_16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_24_8() { super.copyFrom_0_0_8_24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_16_0_8() { super.copyFrom_0_0_16_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_16_8_8() { super.copyFrom_0_0_16_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_24_8_8() { super.copyFrom_0_0_24_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__1__24_9() { super.copyFrom_0_0__1__24_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__1_8_9() { super.copyFrom_0_0__1_8_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__1_16_9() { super.copyFrom_0_0__1_16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__4__16_12() { super.copyFrom_0_0__4__16_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_4__8_12() { super.copyFrom_0_0_4__8_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_9__7_15() { super.copyFrom_0_0_9__7_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__32__24_16() { super.copyFrom_0_0__32__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__32__8_16() { super.copyFrom_0_0__32__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__24__32_16() { super.copyFrom_0_0__24__32_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__24__16_16() { super.copyFrom_0_0__24__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__24__8_16() { super.copyFrom_0_0__24__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__24_16() { super.copyFrom_0_0__16__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__8_16() { super.copyFrom_0_0__16__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__16_16() { super.copyFrom_0_0__8__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__8_16() { super.copyFrom_0_0__8__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8_0_16() { super.copyFrom_0_0__8_0_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0__8_16() { super.copyFrom_0_0_0__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0_8_16() { super.copyFrom_0_0_0_8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_0_16() { super.copyFrom_0_0_8_0_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_16_16() { super.copyFrom_0_0_8_16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_16_8_16() { super.copyFrom_0_0_16_8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__9__25_17() { super.copyFrom_0_0__9__25_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__1_8_17() { super.copyFrom_0_0__1_8_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_1__8_23() { super.copyFrom_0_0_1__8_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__32__16_24() { super.copyFrom_0_0__32__16_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__8_24() { super.copyFrom_0_0__16__8_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__16_24() { super.copyFrom_0_0__8__16_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_0() { super.copyFrom_64_64__16__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_0() { super.copyFrom_64_64__8__16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__8_0() { super.copyFrom_64_64__8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_0_0() { super.copyFrom_64_64__8_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_56_0() { super.copyFrom_64_64__8_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_64_0() { super.copyFrom_64_64__8_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_72_0() { super.copyFrom_64_64__8_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__8_0() { super.copyFrom_64_64_0__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_72_0() { super.copyFrom_64_64_0_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56__8_0() { super.copyFrom_64_64_56__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_72_0() { super.copyFrom_64_64_56_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64__8_0() { super.copyFrom_64_64_64__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_72_0() { super.copyFrom_64_64_64_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72__8_0() { super.copyFrom_64_64_72__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_0_0() { super.copyFrom_64_64_72_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_56_0() { super.copyFrom_64_64_72_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_64_0() { super.copyFrom_64_64_72_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_72_0() { super.copyFrom_64_64_72_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_80_0() { super.copyFrom_64_64_72_80_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_80_72_0() { super.copyFrom_64_64_80_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__32__16_8() { super.copyFrom_64_64__32__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24__16_8() { super.copyFrom_64_64__24__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24__8_8() { super.copyFrom_64_64__24__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__32_8() { super.copyFrom_64_64__16__32_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__24_8() { super.copyFrom_64_64__16__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__16_8() { super.copyFrom_64_64__16__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_8() { super.copyFrom_64_64__16__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16_48_8() { super.copyFrom_64_64__16_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16_56_8() { super.copyFrom_64_64__16_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16_64_8() { super.copyFrom_64_64__16_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16_72_8() { super.copyFrom_64_64__16_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__24_8() { super.copyFrom_64_64__8__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_8() { super.copyFrom_64_64__8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__8_8() { super.copyFrom_64_64__8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_48_8() { super.copyFrom_64_64__8_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_56_8() { super.copyFrom_64_64__8_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_64_8() { super.copyFrom_64_64__8_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_72_8() { super.copyFrom_64_64__8_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48__16_8() { super.copyFrom_64_64_48__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48__8_8() { super.copyFrom_64_64_48__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48_64_8() { super.copyFrom_64_64_48_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48_72_8() { super.copyFrom_64_64_48_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56__16_8() { super.copyFrom_64_64_56__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56__8_8() { super.copyFrom_64_64_56__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_64_8() { super.copyFrom_64_64_56_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_72_8() { super.copyFrom_64_64_56_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64__16_8() { super.copyFrom_64_64_64__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64__8_8() { super.copyFrom_64_64_64__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_0_8() { super.copyFrom_64_64_64_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_48_8() { super.copyFrom_64_64_64_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_56_8() { super.copyFrom_64_64_64_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_64_8() { super.copyFrom_64_64_64_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_72_8() { super.copyFrom_64_64_64_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_80_8() { super.copyFrom_64_64_64_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72__16_8() { super.copyFrom_64_64_72__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72__8_8() { super.copyFrom_64_64_72__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_48_8() { super.copyFrom_64_64_72_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_56_8() { super.copyFrom_64_64_72_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_64_8() { super.copyFrom_64_64_72_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_72_8() { super.copyFrom_64_64_72_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_80_8() { super.copyFrom_64_64_72_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_88_8() { super.copyFrom_64_64_72_88_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_80_64_8() { super.copyFrom_64_64_80_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_80_72_8() { super.copyFrom_64_64_80_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_88_72_8() { super.copyFrom_64_64_88_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63__16_9() { super.copyFrom_64_64_63__16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63__9_9() { super.copyFrom_64_64_63__9_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63_40_9() { super.copyFrom_64_64_63_40_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63_72_9() { super.copyFrom_64_64_63_72_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63_80_9() { super.copyFrom_64_64_63_80_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_60_48_12() { super.copyFrom_64_64_60_48_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_68_56_12() { super.copyFrom_64_64_68_56_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_65_0_15() { super.copyFrom_64_64_65_0_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_73_57_15() { super.copyFrom_64_64_73_57_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__32__24_16() { super.copyFrom_64_64__32__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24__32_16() { super.copyFrom_64_64__24__32_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24__16_16() { super.copyFrom_64_64__24__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24_56_16() { super.copyFrom_64_64__24_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__24_16() { super.copyFrom_64_64__16__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16_56_16() { super.copyFrom_64_64__16_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_32_56_16() { super.copyFrom_64_64_32_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_40_56_16() { super.copyFrom_64_64_40_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48_56_16() { super.copyFrom_64_64_48_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_48_16() { super.copyFrom_64_64_56_48_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_56_16() { super.copyFrom_64_64_56_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_64_16() { super.copyFrom_64_64_56_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_56_16() { super.copyFrom_64_64_64_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_72_16() { super.copyFrom_64_64_64_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_64_16() { super.copyFrom_64_64_72_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_80_16() { super.copyFrom_64_64_72_80_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_80_72_16() { super.copyFrom_64_64_80_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_55_39_17() { super.copyFrom_64_64_55_39_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63_72_17() { super.copyFrom_64_64_63_72_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_65_56_23() { super.copyFrom_64_64_65_56_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_32_48_24() { super.copyFrom_64_64_32_48_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48_56_24() { super.copyFrom_64_64_48_56_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_48_24() { super.copyFrom_64_64_56_48_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1_31_32() { super.copyFrom_64_64__1_31_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_24__8_32() { super.copyFrom_64_64_24__8_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_36_0_36() { super.copyFrom_64_64_36_0_36(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_56_48() { super.copyFrom_64_64_0_56_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_49_0_48() { super.copyFrom_64_64_49_0_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1_14_49() { super.copyFrom_64_64__1_14_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1_56_49() { super.copyFrom_64_64__1_56_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_49__1_49() { super.copyFrom_64_64_49__1_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_1__8_55() { super.copyFrom_64_64_1__8_55(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__64_0_56() { super.copyFrom_64_64__64_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__56_0_56() { super.copyFrom_64_64__56_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_0_56() { super.copyFrom_64_64__8_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__57_56() { super.copyFrom_64_64_0__57_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__56_56() { super.copyFrom_64_64_0__56_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__8_56() { super.copyFrom_64_64_0__8_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_48_56() { super.copyFrom_64_64_0_48_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_56_56() { super.copyFrom_64_64_0_56_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_64_56() { super.copyFrom_64_64_0_64_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_72_56() { super.copyFrom_64_64_0_72_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_16_0_56() { super.copyFrom_64_64_16_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_64() { super.copyFrom_64_64__16__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_64() { super.copyFrom_64_64__8__16_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__8_64() { super.copyFrom_64_64__8__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_0_64() { super.copyFrom_64_64__8_0_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__8_64() { super.copyFrom_64_64_0__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__9__73_65() { super.copyFrom_64_64__9__73_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__67_65() { super.copyFrom_64_64__1__67_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__66_65() { super.copyFrom_64_64__1__66_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__65_65() { super.copyFrom_64_64__1__65_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1_56_65() { super.copyFrom_64_64__1_56_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_1__7_71() { super.copyFrom_64_64_1__7_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__88__8_72() { super.copyFrom_64_64__88__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__80__16_72() { super.copyFrom_64_64__80__16_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__80__8_72() { super.copyFrom_64_64__80__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__80_0_72() { super.copyFrom_64_64__80_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__72__8_72() { super.copyFrom_64_64__72__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__72_0_72() { super.copyFrom_64_64__72_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_72() { super.copyFrom_64_64__16__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_72() { super.copyFrom_64_64__8__16_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__8_72() { super.copyFrom_64_64__8__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_0_72() { super.copyFrom_64_64__8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__73_72() { super.copyFrom_64_64_0__73_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__72_72() { super.copyFrom_64_64_0__72_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__8_72() { super.copyFrom_64_64_0__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_0_72() { super.copyFrom_64_64_0_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_56_72() { super.copyFrom_64_64_0_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_8_0_72() { super.copyFrom_64_64_8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__9__81_73() { super.copyFrom_64_64__9__81_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__75_73() { super.copyFrom_64_64__1__75_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__74_73() { super.copyFrom_64_64__1__74_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__73_73() { super.copyFrom_64_64__1__73_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__16_73() { super.copyFrom_64_64__1__16_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1_55_73() { super.copyFrom_64_64__1_55_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_1__8_79() { super.copyFrom_64_64_1__8_79(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__96__8_80() { super.copyFrom_64_64__96__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__88__16_80() { super.copyFrom_64_64__88__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__88__8_80() { super.copyFrom_64_64__88__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__80__8_80() { super.copyFrom_64_64__80__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24__8_80() { super.copyFrom_64_64__24__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_80() { super.copyFrom_64_64__16__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_80() { super.copyFrom_64_64__8__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__8_80() { super.copyFrom_64_64__8__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_0_80() { super.copyFrom_64_64__8_0_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__8_80() { super.copyFrom_64_64_0__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__9__89_81() { super.copyFrom_64_64__9__89_81(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__96__16_88() { super.copyFrom_64_64__96__16_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_88() { super.copyFrom_64_64__16__8_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_88() { super.copyFrom_64_64__8__16_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16__8_0() { super.copyFrom_0_64__16__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__16_0() { super.copyFrom_0_64__8__16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__8_0() { super.copyFrom_0_64__8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_0_0() { super.copyFrom_0_64__8_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_8_0() { super.copyFrom_0_64__8_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_64_0() { super.copyFrom_0_64__8_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_72_0() { super.copyFrom_0_64__8_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0__8_0() { super.copyFrom_0_64_0__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_72_0() { super.copyFrom_0_64_0_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8__8_0() { super.copyFrom_0_64_8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8_0_0() { super.copyFrom_0_64_8_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8_8_0() { super.copyFrom_0_64_8_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8_16_0() { super.copyFrom_0_64_8_16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_16_8_0() { super.copyFrom_0_64_16_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56_64_0() { super.copyFrom_0_64_56_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56_72_0() { super.copyFrom_0_64_56_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64__8_0() { super.copyFrom_0_64_64__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_0_0() { super.copyFrom_0_64_64_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_56_0() { super.copyFrom_0_64_64_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_64_0() { super.copyFrom_0_64_64_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_72_0() { super.copyFrom_0_64_64_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72__8_0() { super.copyFrom_0_64_72__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_0_0() { super.copyFrom_0_64_72_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_56_0() { super.copyFrom_0_64_72_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_64_0() { super.copyFrom_0_64_72_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_72_0() { super.copyFrom_0_64_72_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_80_0() { super.copyFrom_0_64_72_80_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_80_72_0() { super.copyFrom_0_64_80_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__32__16_8() { super.copyFrom_0_64__32__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__24__16_8() { super.copyFrom_0_64__24__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__24__8_8() { super.copyFrom_0_64__24__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16__32_8() { super.copyFrom_0_64__16__32_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16__24_8() { super.copyFrom_0_64__16__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16__16_8() { super.copyFrom_0_64__16__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16__8_8() { super.copyFrom_0_64__16__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16_0_8() { super.copyFrom_0_64__16_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16_8_8() { super.copyFrom_0_64__16_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16_56_8() { super.copyFrom_0_64__16_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16_64_8() { super.copyFrom_0_64__16_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16_72_8() { super.copyFrom_0_64__16_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__24_8() { super.copyFrom_0_64__8__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__16_8() { super.copyFrom_0_64__8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__8_8() { super.copyFrom_0_64__8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_0_8() { super.copyFrom_0_64__8_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_8_8() { super.copyFrom_0_64__8_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_56_8() { super.copyFrom_0_64__8_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_64_8() { super.copyFrom_0_64__8_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_72_8() { super.copyFrom_0_64__8_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0__16_8() { super.copyFrom_0_64_0__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0__8_8() { super.copyFrom_0_64_0__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_0_8() { super.copyFrom_0_64_0_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_8_8() { super.copyFrom_0_64_0_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_16_8() { super.copyFrom_0_64_0_16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8__16_8() { super.copyFrom_0_64_8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8__8_8() { super.copyFrom_0_64_8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8_0_8() { super.copyFrom_0_64_8_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8_8_8() { super.copyFrom_0_64_8_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8_16_8() { super.copyFrom_0_64_8_16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8_24_8() { super.copyFrom_0_64_8_24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_16_0_8() { super.copyFrom_0_64_16_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_16_8_8() { super.copyFrom_0_64_16_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_24_8_8() { super.copyFrom_0_64_24_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_40_56_8() { super.copyFrom_0_64_40_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_48_56_8() { super.copyFrom_0_64_48_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_48_64_8() { super.copyFrom_0_64_48_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_48_72_8() { super.copyFrom_0_64_48_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56__16_8() { super.copyFrom_0_64_56__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56__8_8() { super.copyFrom_0_64_56__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56_40_8() { super.copyFrom_0_64_56_40_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56_48_8() { super.copyFrom_0_64_56_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56_56_8() { super.copyFrom_0_64_56_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56_64_8() { super.copyFrom_0_64_56_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56_72_8() { super.copyFrom_0_64_56_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64__16_8() { super.copyFrom_0_64_64__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64__8_8() { super.copyFrom_0_64_64__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_0_8() { super.copyFrom_0_64_64_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_48_8() { super.copyFrom_0_64_64_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_56_8() { super.copyFrom_0_64_64_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_64_8() { super.copyFrom_0_64_64_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_72_8() { super.copyFrom_0_64_64_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_80_8() { super.copyFrom_0_64_64_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72__16_8() { super.copyFrom_0_64_72__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72__8_8() { super.copyFrom_0_64_72__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_48_8() { super.copyFrom_0_64_72_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_56_8() { super.copyFrom_0_64_72_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_64_8() { super.copyFrom_0_64_72_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_72_8() { super.copyFrom_0_64_72_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_80_8() { super.copyFrom_0_64_72_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_88_8() { super.copyFrom_0_64_72_88_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_80_64_8() { super.copyFrom_0_64_80_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_80_72_8() { super.copyFrom_0_64_80_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_88_72_8() { super.copyFrom_0_64_88_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1__24_9() { super.copyFrom_0_64__1__24_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1_8_9() { super.copyFrom_0_64__1_8_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1_16_9() { super.copyFrom_0_64__1_16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_63__16_9() { super.copyFrom_0_64_63__16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_63__9_9() { super.copyFrom_0_64_63__9_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_63_40_9() { super.copyFrom_0_64_63_40_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_63_72_9() { super.copyFrom_0_64_63_72_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_63_80_9() { super.copyFrom_0_64_63_80_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__4__16_12() { super.copyFrom_0_64__4__16_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_4__8_12() { super.copyFrom_0_64_4__8_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_60_48_12() { super.copyFrom_0_64_60_48_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_68_56_12() { super.copyFrom_0_64_68_56_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_9__7_15() { super.copyFrom_0_64_9__7_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_65_0_15() { super.copyFrom_0_64_65_0_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_73_57_15() { super.copyFrom_0_64_73_57_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__32__24_16() { super.copyFrom_0_64__32__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__32__8_16() { super.copyFrom_0_64__32__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__24__32_16() { super.copyFrom_0_64__24__32_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__24__16_16() { super.copyFrom_0_64__24__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__24__8_16() { super.copyFrom_0_64__24__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__24_56_16() { super.copyFrom_0_64__24_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16__24_16() { super.copyFrom_0_64__16__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16__8_16() { super.copyFrom_0_64__16__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16_56_16() { super.copyFrom_0_64__16_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__16_16() { super.copyFrom_0_64__8__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__8_16() { super.copyFrom_0_64__8__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_0_16() { super.copyFrom_0_64__8_0_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0__8_16() { super.copyFrom_0_64_0__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_8_16() { super.copyFrom_0_64_0_8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8_0_16() { super.copyFrom_0_64_8_0_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8_16_16() { super.copyFrom_0_64_8_16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_16_8_16() { super.copyFrom_0_64_16_8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_32_56_16() { super.copyFrom_0_64_32_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_40_48_16() { super.copyFrom_0_64_40_48_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_40_56_16() { super.copyFrom_0_64_40_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_48_40_16() { super.copyFrom_0_64_48_40_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_48_56_16() { super.copyFrom_0_64_48_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56_48_16() { super.copyFrom_0_64_56_48_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56_56_16() { super.copyFrom_0_64_56_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56_64_16() { super.copyFrom_0_64_56_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_56_16() { super.copyFrom_0_64_64_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_64_72_16() { super.copyFrom_0_64_64_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_64_16() { super.copyFrom_0_64_72_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_72_80_16() { super.copyFrom_0_64_72_80_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_80_72_16() { super.copyFrom_0_64_80_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__9__25_17() { super.copyFrom_0_64__9__25_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1_8_17() { super.copyFrom_0_64__1_8_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_55_39_17() { super.copyFrom_0_64_55_39_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_63_72_17() { super.copyFrom_0_64_63_72_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_1__8_23() { super.copyFrom_0_64_1__8_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_65_56_23() { super.copyFrom_0_64_65_56_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__32__16_24() { super.copyFrom_0_64__32__16_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16__8_24() { super.copyFrom_0_64__16__8_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__16_24() { super.copyFrom_0_64__8__16_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_32_48_24() { super.copyFrom_0_64_32_48_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_48_56_24() { super.copyFrom_0_64_48_56_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_56_48_24() { super.copyFrom_0_64_56_48_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_32_32() { super.copyFrom_0_64_0_32_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_32_0_32() { super.copyFrom_0_64_32_0_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_36_0_36() { super.copyFrom_0_64_36_0_36(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_56_48() { super.copyFrom_0_64_0_56_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_49_0_48() { super.copyFrom_0_64_49_0_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1_56_49() { super.copyFrom_0_64__1_56_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_49__1_49() { super.copyFrom_0_64_49__1_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_8_56() { super.copyFrom_0_64_0_8_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_48_56() { super.copyFrom_0_64_0_48_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_56_56() { super.copyFrom_0_64_0_56_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_64_56() { super.copyFrom_0_64_0_64_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_72_56() { super.copyFrom_0_64_0_72_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8_0_56() { super.copyFrom_0_64_8_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_16_0_56() { super.copyFrom_0_64_16_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_0_64() { super.copyFrom_0_64__8_0_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0__8_64() { super.copyFrom_0_64_0__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_0_64() { super.copyFrom_0_64_0_0_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1__67_65() { super.copyFrom_0_64__1__67_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1__66_65() { super.copyFrom_0_64__1__66_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1__65_65() { super.copyFrom_0_64__1__65_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1_56_65() { super.copyFrom_0_64__1_56_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_1__7_71() { super.copyFrom_0_64_1__7_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__88__8_72() { super.copyFrom_0_64__88__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__80__8_72() { super.copyFrom_0_64__80__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__80_0_72() { super.copyFrom_0_64__80_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__72__8_72() { super.copyFrom_0_64__72__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__72_0_72() { super.copyFrom_0_64__72_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16__8_72() { super.copyFrom_0_64__16__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__16_72() { super.copyFrom_0_64__8__16_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__8_72() { super.copyFrom_0_64__8__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_0_72() { super.copyFrom_0_64__8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0__73_72() { super.copyFrom_0_64_0__73_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0__72_72() { super.copyFrom_0_64_0__72_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0__8_72() { super.copyFrom_0_64_0__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_0_72() { super.copyFrom_0_64_0_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0_56_72() { super.copyFrom_0_64_0_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_8_0_72() { super.copyFrom_0_64_8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__9__81_73() { super.copyFrom_0_64__9__81_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1__75_73() { super.copyFrom_0_64__1__75_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1__74_73() { super.copyFrom_0_64__1__74_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1__73_73() { super.copyFrom_0_64__1__73_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1__16_73() { super.copyFrom_0_64__1__16_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__1_55_73() { super.copyFrom_0_64__1_55_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_1__8_79() { super.copyFrom_0_64_1__8_79(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__96__8_80() { super.copyFrom_0_64__96__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__88__16_80() { super.copyFrom_0_64__88__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__88__8_80() { super.copyFrom_0_64__88__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__80__8_80() { super.copyFrom_0_64__80__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__24__8_80() { super.copyFrom_0_64__24__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16__8_80() { super.copyFrom_0_64__16__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__16_80() { super.copyFrom_0_64__8__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__8_80() { super.copyFrom_0_64__8__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8_0_80() { super.copyFrom_0_64__8_0_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64_0__8_80() { super.copyFrom_0_64_0__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__9__89_81() { super.copyFrom_0_64__9__89_81(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__96__16_88() { super.copyFrom_0_64__96__16_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__16__8_88() { super.copyFrom_0_64__16__8_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_64__8__16_88() { super.copyFrom_0_64__8__16_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16__8_0() { super.copyFrom_64_0__16__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__16_0() { super.copyFrom_64_0__8__16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__8_0() { super.copyFrom_64_0__8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_0_0() { super.copyFrom_64_0__8_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_8_0() { super.copyFrom_64_0__8_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_64_0() { super.copyFrom_64_0__8_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_72_0() { super.copyFrom_64_0__8_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0__8_0() { super.copyFrom_64_0_0__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_8_0() { super.copyFrom_64_0_0_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_64_0() { super.copyFrom_64_0_0_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_72_0() { super.copyFrom_64_0_0_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8__8_0() { super.copyFrom_64_0_8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8_8_0() { super.copyFrom_64_0_8_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8_16_0() { super.copyFrom_64_0_8_16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_16_8_0() { super.copyFrom_64_0_16_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56_64_0() { super.copyFrom_64_0_56_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56_72_0() { super.copyFrom_64_0_56_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64__8_0() { super.copyFrom_64_0_64__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64_56_0() { super.copyFrom_64_0_64_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64_64_0() { super.copyFrom_64_0_64_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64_72_0() { super.copyFrom_64_0_64_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72__8_0() { super.copyFrom_64_0_72__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_0_0() { super.copyFrom_64_0_72_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_56_0() { super.copyFrom_64_0_72_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_64_0() { super.copyFrom_64_0_72_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_72_0() { super.copyFrom_64_0_72_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_80_0() { super.copyFrom_64_0_72_80_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_80_72_0() { super.copyFrom_64_0_80_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__32__16_8() { super.copyFrom_64_0__32__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__24__16_8() { super.copyFrom_64_0__24__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__24__8_8() { super.copyFrom_64_0__24__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16__32_8() { super.copyFrom_64_0__16__32_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16__24_8() { super.copyFrom_64_0__16__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16__16_8() { super.copyFrom_64_0__16__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16__8_8() { super.copyFrom_64_0__16__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16_0_8() { super.copyFrom_64_0__16_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16_8_8() { super.copyFrom_64_0__16_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16_56_8() { super.copyFrom_64_0__16_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16_64_8() { super.copyFrom_64_0__16_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16_72_8() { super.copyFrom_64_0__16_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__24_8() { super.copyFrom_64_0__8__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__16_8() { super.copyFrom_64_0__8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__8_8() { super.copyFrom_64_0__8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_0_8() { super.copyFrom_64_0__8_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_8_8() { super.copyFrom_64_0__8_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_56_8() { super.copyFrom_64_0__8_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_64_8() { super.copyFrom_64_0__8_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_72_8() { super.copyFrom_64_0__8_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0__16_8() { super.copyFrom_64_0_0__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0__8_8() { super.copyFrom_64_0_0__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_0_8() { super.copyFrom_64_0_0_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_8_8() { super.copyFrom_64_0_0_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_16_8() { super.copyFrom_64_0_0_16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8__16_8() { super.copyFrom_64_0_8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8__8_8() { super.copyFrom_64_0_8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8_0_8() { super.copyFrom_64_0_8_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8_8_8() { super.copyFrom_64_0_8_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8_16_8() { super.copyFrom_64_0_8_16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8_24_8() { super.copyFrom_64_0_8_24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_16_0_8() { super.copyFrom_64_0_16_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_16_8_8() { super.copyFrom_64_0_16_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_24_8_8() { super.copyFrom_64_0_24_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_40_56_8() { super.copyFrom_64_0_40_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_48_56_8() { super.copyFrom_64_0_48_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_48_64_8() { super.copyFrom_64_0_48_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_48_72_8() { super.copyFrom_64_0_48_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56__16_8() { super.copyFrom_64_0_56__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56__8_8() { super.copyFrom_64_0_56__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56_40_8() { super.copyFrom_64_0_56_40_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56_48_8() { super.copyFrom_64_0_56_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56_56_8() { super.copyFrom_64_0_56_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56_64_8() { super.copyFrom_64_0_56_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56_72_8() { super.copyFrom_64_0_56_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64__16_8() { super.copyFrom_64_0_64__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64__8_8() { super.copyFrom_64_0_64__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64_0_8() { super.copyFrom_64_0_64_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64_48_8() { super.copyFrom_64_0_64_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64_56_8() { super.copyFrom_64_0_64_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64_64_8() { super.copyFrom_64_0_64_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64_72_8() { super.copyFrom_64_0_64_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64_80_8() { super.copyFrom_64_0_64_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72__16_8() { super.copyFrom_64_0_72__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72__8_8() { super.copyFrom_64_0_72__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_48_8() { super.copyFrom_64_0_72_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_56_8() { super.copyFrom_64_0_72_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_64_8() { super.copyFrom_64_0_72_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_72_8() { super.copyFrom_64_0_72_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_80_8() { super.copyFrom_64_0_72_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_88_8() { super.copyFrom_64_0_72_88_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_80_64_8() { super.copyFrom_64_0_80_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_80_72_8() { super.copyFrom_64_0_80_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_88_72_8() { super.copyFrom_64_0_88_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1__24_9() { super.copyFrom_64_0__1__24_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1_8_9() { super.copyFrom_64_0__1_8_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1_16_9() { super.copyFrom_64_0__1_16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_63__16_9() { super.copyFrom_64_0_63__16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_63__9_9() { super.copyFrom_64_0_63__9_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_63_40_9() { super.copyFrom_64_0_63_40_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_63_72_9() { super.copyFrom_64_0_63_72_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_63_80_9() { super.copyFrom_64_0_63_80_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__4__16_12() { super.copyFrom_64_0__4__16_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_4__8_12() { super.copyFrom_64_0_4__8_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_60_48_12() { super.copyFrom_64_0_60_48_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_68_56_12() { super.copyFrom_64_0_68_56_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_9__7_15() { super.copyFrom_64_0_9__7_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_65_0_15() { super.copyFrom_64_0_65_0_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_73_57_15() { super.copyFrom_64_0_73_57_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__32__24_16() { super.copyFrom_64_0__32__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__32__8_16() { super.copyFrom_64_0__32__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__24__32_16() { super.copyFrom_64_0__24__32_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__24__16_16() { super.copyFrom_64_0__24__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__24__8_16() { super.copyFrom_64_0__24__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__24_56_16() { super.copyFrom_64_0__24_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16__24_16() { super.copyFrom_64_0__16__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16__8_16() { super.copyFrom_64_0__16__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16_56_16() { super.copyFrom_64_0__16_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__16_16() { super.copyFrom_64_0__8__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__8_16() { super.copyFrom_64_0__8__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_0_16() { super.copyFrom_64_0__8_0_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0__8_16() { super.copyFrom_64_0_0__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_8_16() { super.copyFrom_64_0_0_8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8_0_16() { super.copyFrom_64_0_8_0_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8_16_16() { super.copyFrom_64_0_8_16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_16_8_16() { super.copyFrom_64_0_16_8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_32_56_16() { super.copyFrom_64_0_32_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_40_48_16() { super.copyFrom_64_0_40_48_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_40_56_16() { super.copyFrom_64_0_40_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_48_40_16() { super.copyFrom_64_0_48_40_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_48_56_16() { super.copyFrom_64_0_48_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56_48_16() { super.copyFrom_64_0_56_48_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56_56_16() { super.copyFrom_64_0_56_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56_64_16() { super.copyFrom_64_0_56_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64_56_16() { super.copyFrom_64_0_64_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_64_72_16() { super.copyFrom_64_0_64_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_64_16() { super.copyFrom_64_0_72_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_72_80_16() { super.copyFrom_64_0_72_80_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_80_72_16() { super.copyFrom_64_0_80_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__9__25_17() { super.copyFrom_64_0__9__25_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1_8_17() { super.copyFrom_64_0__1_8_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_55_39_17() { super.copyFrom_64_0_55_39_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_63_72_17() { super.copyFrom_64_0_63_72_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_1__8_23() { super.copyFrom_64_0_1__8_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_65_56_23() { super.copyFrom_64_0_65_56_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__32__16_24() { super.copyFrom_64_0__32__16_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16__8_24() { super.copyFrom_64_0__16__8_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__16_24() { super.copyFrom_64_0__8__16_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_32_48_24() { super.copyFrom_64_0_32_48_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_48_56_24() { super.copyFrom_64_0_48_56_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_56_48_24() { super.copyFrom_64_0_56_48_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_32_32() { super.copyFrom_64_0_0_32_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_32_0_32() { super.copyFrom_64_0_32_0_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_36_0_36() { super.copyFrom_64_0_36_0_36(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_56_48() { super.copyFrom_64_0_0_56_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_49_0_48() { super.copyFrom_64_0_49_0_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1_56_49() { super.copyFrom_64_0__1_56_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_49__1_49() { super.copyFrom_64_0_49__1_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_8_56() { super.copyFrom_64_0_0_8_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_48_56() { super.copyFrom_64_0_0_48_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_56_56() { super.copyFrom_64_0_0_56_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_64_56() { super.copyFrom_64_0_0_64_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_72_56() { super.copyFrom_64_0_0_72_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8_0_56() { super.copyFrom_64_0_8_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_16_0_56() { super.copyFrom_64_0_16_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_0_64() { super.copyFrom_64_0__8_0_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0__8_64() { super.copyFrom_64_0_0__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_0_64() { super.copyFrom_64_0_0_0_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1__67_65() { super.copyFrom_64_0__1__67_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1__66_65() { super.copyFrom_64_0__1__66_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1__65_65() { super.copyFrom_64_0__1__65_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1_56_65() { super.copyFrom_64_0__1_56_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_1__7_71() { super.copyFrom_64_0_1__7_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__88__8_72() { super.copyFrom_64_0__88__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__80__8_72() { super.copyFrom_64_0__80__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__80_0_72() { super.copyFrom_64_0__80_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__72__8_72() { super.copyFrom_64_0__72__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__72_0_72() { super.copyFrom_64_0__72_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16__8_72() { super.copyFrom_64_0__16__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__16_72() { super.copyFrom_64_0__8__16_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__8_72() { super.copyFrom_64_0__8__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_0_72() { super.copyFrom_64_0__8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0__73_72() { super.copyFrom_64_0_0__73_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0__72_72() { super.copyFrom_64_0_0__72_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0__8_72() { super.copyFrom_64_0_0__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_0_72() { super.copyFrom_64_0_0_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0_56_72() { super.copyFrom_64_0_0_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_8_0_72() { super.copyFrom_64_0_8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__9__81_73() { super.copyFrom_64_0__9__81_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1__75_73() { super.copyFrom_64_0__1__75_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1__74_73() { super.copyFrom_64_0__1__74_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1__73_73() { super.copyFrom_64_0__1__73_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1__16_73() { super.copyFrom_64_0__1__16_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__1_55_73() { super.copyFrom_64_0__1_55_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_1__8_79() { super.copyFrom_64_0_1__8_79(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__96__8_80() { super.copyFrom_64_0__96__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__88__16_80() { super.copyFrom_64_0__88__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__88__8_80() { super.copyFrom_64_0__88__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__80__8_80() { super.copyFrom_64_0__80__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__24__8_80() { super.copyFrom_64_0__24__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16__8_80() { super.copyFrom_64_0__16__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__16_80() { super.copyFrom_64_0__8__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__8_80() { super.copyFrom_64_0__8__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8_0_80() { super.copyFrom_64_0__8_0_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0_0__8_80() { super.copyFrom_64_0_0__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__9__89_81() { super.copyFrom_64_0__9__89_81(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__96__16_88() { super.copyFrom_64_0__96__16_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__16__8_88() { super.copyFrom_64_0__16__8_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_0__8__16_88() { super.copyFrom_64_0__8__16_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__8_0() { super.copyFrom_64_128__16__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__16_0() { super.copyFrom_64_128__8__16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__8_0() { super.copyFrom_64_128__8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_0_0() { super.copyFrom_64_128__8_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_56_0() { super.copyFrom_64_128__8_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_64_0() { super.copyFrom_64_128__8_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_72_0() { super.copyFrom_64_128__8_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_128_0() { super.copyFrom_64_128__8_128_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_136_0() { super.copyFrom_64_128__8_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__8_0() { super.copyFrom_64_128_0__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_136_0() { super.copyFrom_64_128_0_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56__8_0() { super.copyFrom_64_128_56__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_136_0() { super.copyFrom_64_128_56_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64__8_0() { super.copyFrom_64_128_64__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_136_0() { super.copyFrom_64_128_64_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72__8_0() { super.copyFrom_64_128_72__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_0_0() { super.copyFrom_64_128_72_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_56_0() { super.copyFrom_64_128_72_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_64_0() { super.copyFrom_64_128_72_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_72_0() { super.copyFrom_64_128_72_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_80_0() { super.copyFrom_64_128_72_80_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_80_72_0() { super.copyFrom_64_128_80_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_128_0() { super.copyFrom_64_128_120_128_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_136_0() { super.copyFrom_64_128_120_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128__8_0() { super.copyFrom_64_128_128__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_0_0() { super.copyFrom_64_128_128_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_56_0() { super.copyFrom_64_128_128_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_64_0() { super.copyFrom_64_128_128_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_120_0() { super.copyFrom_64_128_128_120_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_128_0() { super.copyFrom_64_128_128_128_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_136_0() { super.copyFrom_64_128_128_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136__8_0() { super.copyFrom_64_128_136__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_0_0() { super.copyFrom_64_128_136_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_56_0() { super.copyFrom_64_128_136_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_64_0() { super.copyFrom_64_128_136_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_120_0() { super.copyFrom_64_128_136_120_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_128_0() { super.copyFrom_64_128_136_128_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_136_0() { super.copyFrom_64_128_136_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_144_0() { super.copyFrom_64_128_136_144_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_144_136_0() { super.copyFrom_64_128_144_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__32__16_8() { super.copyFrom_64_128__32__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__24__16_8() { super.copyFrom_64_128__24__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__24__8_8() { super.copyFrom_64_128__24__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__32_8() { super.copyFrom_64_128__16__32_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__24_8() { super.copyFrom_64_128__16__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__16_8() { super.copyFrom_64_128__16__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__8_8() { super.copyFrom_64_128__16__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16_48_8() { super.copyFrom_64_128__16_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16_56_8() { super.copyFrom_64_128__16_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16_64_8() { super.copyFrom_64_128__16_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16_72_8() { super.copyFrom_64_128__16_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16_120_8() { super.copyFrom_64_128__16_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16_128_8() { super.copyFrom_64_128__16_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16_136_8() { super.copyFrom_64_128__16_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__24_8() { super.copyFrom_64_128__8__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__16_8() { super.copyFrom_64_128__8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__8_8() { super.copyFrom_64_128__8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_48_8() { super.copyFrom_64_128__8_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_56_8() { super.copyFrom_64_128__8_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_64_8() { super.copyFrom_64_128__8_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_72_8() { super.copyFrom_64_128__8_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_120_8() { super.copyFrom_64_128__8_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_128_8() { super.copyFrom_64_128__8_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_136_8() { super.copyFrom_64_128__8_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_48__16_8() { super.copyFrom_64_128_48__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_48__8_8() { super.copyFrom_64_128_48__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_48_128_8() { super.copyFrom_64_128_48_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_48_136_8() { super.copyFrom_64_128_48_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56__16_8() { super.copyFrom_64_128_56__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56__8_8() { super.copyFrom_64_128_56__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_128_8() { super.copyFrom_64_128_56_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_136_8() { super.copyFrom_64_128_56_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64__16_8() { super.copyFrom_64_128_64__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64__8_8() { super.copyFrom_64_128_64__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_0_8() { super.copyFrom_64_128_64_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_48_8() { super.copyFrom_64_128_64_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_56_8() { super.copyFrom_64_128_64_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_64_8() { super.copyFrom_64_128_64_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_72_8() { super.copyFrom_64_128_64_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_80_8() { super.copyFrom_64_128_64_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72__16_8() { super.copyFrom_64_128_72__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72__8_8() { super.copyFrom_64_128_72__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_48_8() { super.copyFrom_64_128_72_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_56_8() { super.copyFrom_64_128_72_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_64_8() { super.copyFrom_64_128_72_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_72_8() { super.copyFrom_64_128_72_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_80_8() { super.copyFrom_64_128_72_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_88_8() { super.copyFrom_64_128_72_88_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_80_64_8() { super.copyFrom_64_128_80_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_80_72_8() { super.copyFrom_64_128_80_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_88_72_8() { super.copyFrom_64_128_88_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_104_120_8() { super.copyFrom_64_128_104_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_112_120_8() { super.copyFrom_64_128_112_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_112_128_8() { super.copyFrom_64_128_112_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_112_136_8() { super.copyFrom_64_128_112_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120__16_8() { super.copyFrom_64_128_120__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120__8_8() { super.copyFrom_64_128_120__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_48_8() { super.copyFrom_64_128_120_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_56_8() { super.copyFrom_64_128_120_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_104_8() { super.copyFrom_64_128_120_104_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_112_8() { super.copyFrom_64_128_120_112_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_120_8() { super.copyFrom_64_128_120_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_128_8() { super.copyFrom_64_128_120_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_136_8() { super.copyFrom_64_128_120_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128__16_8() { super.copyFrom_64_128_128__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128__8_8() { super.copyFrom_64_128_128__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_0_8() { super.copyFrom_64_128_128_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_48_8() { super.copyFrom_64_128_128_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_56_8() { super.copyFrom_64_128_128_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_64_8() { super.copyFrom_64_128_128_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_112_8() { super.copyFrom_64_128_128_112_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_120_8() { super.copyFrom_64_128_128_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_128_8() { super.copyFrom_64_128_128_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_136_8() { super.copyFrom_64_128_128_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_144_8() { super.copyFrom_64_128_128_144_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136__16_8() { super.copyFrom_64_128_136__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136__8_8() { super.copyFrom_64_128_136__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_48_8() { super.copyFrom_64_128_136_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_56_8() { super.copyFrom_64_128_136_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_112_8() { super.copyFrom_64_128_136_112_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_120_8() { super.copyFrom_64_128_136_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_128_8() { super.copyFrom_64_128_136_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_136_8() { super.copyFrom_64_128_136_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_144_8() { super.copyFrom_64_128_136_144_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_152_8() { super.copyFrom_64_128_136_152_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_144_128_8() { super.copyFrom_64_128_144_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_144_136_8() { super.copyFrom_64_128_144_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_152_136_8() { super.copyFrom_64_128_152_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63__16_9() { super.copyFrom_64_128_63__16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63__9_9() { super.copyFrom_64_128_63__9_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_40_9() { super.copyFrom_64_128_63_40_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_72_9() { super.copyFrom_64_128_63_72_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_80_9() { super.copyFrom_64_128_63_80_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_127__16_9() { super.copyFrom_64_128_127__16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_127__9_9() { super.copyFrom_64_128_127__9_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_127_48_9() { super.copyFrom_64_128_127_48_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_127_55_9() { super.copyFrom_64_128_127_55_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_127_104_9() { super.copyFrom_64_128_127_104_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_127_136_9() { super.copyFrom_64_128_127_136_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_127_144_9() { super.copyFrom_64_128_127_144_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_60_48_12() { super.copyFrom_64_128_60_48_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_68_56_12() { super.copyFrom_64_128_68_56_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_124_112_12() { super.copyFrom_64_128_124_112_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_132_120_12() { super.copyFrom_64_128_132_120_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_65_0_15() { super.copyFrom_64_128_65_0_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_73_57_15() { super.copyFrom_64_128_73_57_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129_0_15() { super.copyFrom_64_128_129_0_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129_64_15() { super.copyFrom_64_128_129_64_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_137_121_15() { super.copyFrom_64_128_137_121_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__32__24_16() { super.copyFrom_64_128__32__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__24__32_16() { super.copyFrom_64_128__24__32_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__24__16_16() { super.copyFrom_64_128__24__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__24_56_16() { super.copyFrom_64_128__24_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__24_120_16() { super.copyFrom_64_128__24_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__24_16() { super.copyFrom_64_128__16__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16_56_16() { super.copyFrom_64_128__16_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16_120_16() { super.copyFrom_64_128__16_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_40_120_16() { super.copyFrom_64_128_40_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_48_120_16() { super.copyFrom_64_128_48_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_48_16() { super.copyFrom_64_128_56_48_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_56_16() { super.copyFrom_64_128_56_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_64_16() { super.copyFrom_64_128_56_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_56_16() { super.copyFrom_64_128_64_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_72_16() { super.copyFrom_64_128_64_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_64_16() { super.copyFrom_64_128_72_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_80_16() { super.copyFrom_64_128_72_80_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_80_72_16() { super.copyFrom_64_128_80_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_96_120_16() { super.copyFrom_64_128_96_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_104_112_16() { super.copyFrom_64_128_104_112_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_104_120_16() { super.copyFrom_64_128_104_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_112_104_16() { super.copyFrom_64_128_112_104_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_112_120_16() { super.copyFrom_64_128_112_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_112_16() { super.copyFrom_64_128_120_112_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_120_16() { super.copyFrom_64_128_120_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_128_16() { super.copyFrom_64_128_120_128_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_120_16() { super.copyFrom_64_128_128_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_136_16() { super.copyFrom_64_128_128_136_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_128_16() { super.copyFrom_64_128_136_128_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_136_144_16() { super.copyFrom_64_128_136_144_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_144_136_16() { super.copyFrom_64_128_144_136_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_55_39_17() { super.copyFrom_64_128_55_39_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_72_17() { super.copyFrom_64_128_63_72_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_119_103_17() { super.copyFrom_64_128_119_103_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_127_136_17() { super.copyFrom_64_128_127_136_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_65_56_23() { super.copyFrom_64_128_65_56_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129_120_23() { super.copyFrom_64_128_129_120_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_48_56_24() { super.copyFrom_64_128_48_56_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_48_24() { super.copyFrom_64_128_56_48_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_96_112_24() { super.copyFrom_64_128_96_112_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_112_120_24() { super.copyFrom_64_128_112_120_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_120_112_24() { super.copyFrom_64_128_120_112_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_31_32() { super.copyFrom_64_128__1_31_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_24__8_32() { super.copyFrom_64_128_24__8_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_96_32() { super.copyFrom_64_128_64_96_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_96_64_32() { super.copyFrom_64_128_96_64_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_36_0_36() { super.copyFrom_64_128_36_0_36(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_100_64_36() { super.copyFrom_64_128_100_64_36(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_49_0_48() { super.copyFrom_64_128_49_0_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_120_48() { super.copyFrom_64_128_64_120_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_113_64_48() { super.copyFrom_64_128_113_64_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_14_49() { super.copyFrom_64_128__1_14_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_56_49() { super.copyFrom_64_128__1_56_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_49__1_49() { super.copyFrom_64_128_49__1_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_120_49() { super.copyFrom_64_128_63_120_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_113_63_49() { super.copyFrom_64_128_113_63_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_1__8_55() { super.copyFrom_64_128_1__8_55(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__64_0_56() { super.copyFrom_64_128__64_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__56_0_56() { super.copyFrom_64_128__56_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_0_56() { super.copyFrom_64_128__8_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__57_56() { super.copyFrom_64_128_0__57_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__56_56() { super.copyFrom_64_128_0__56_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__8_56() { super.copyFrom_64_128_0__8_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_120_56() { super.copyFrom_64_128_0_120_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_128_56() { super.copyFrom_64_128_0_128_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_136_56() { super.copyFrom_64_128_0_136_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_16_0_56() { super.copyFrom_64_128_16_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_72_56() { super.copyFrom_64_128_64_72_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_112_56() { super.copyFrom_64_128_64_112_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_120_56() { super.copyFrom_64_128_64_120_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_128_56() { super.copyFrom_64_128_64_128_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_136_56() { super.copyFrom_64_128_64_136_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_0_56() { super.copyFrom_64_128_72_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_64_56() { super.copyFrom_64_128_72_64_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_80_0_56() { super.copyFrom_64_128_80_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_80_64_56() { super.copyFrom_64_128_80_64_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__8_64() { super.copyFrom_64_128__16__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__16_64() { super.copyFrom_64_128__8__16_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__8_64() { super.copyFrom_64_128__8__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_0_64() { super.copyFrom_64_128__8_0_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_64_64() { super.copyFrom_64_128__8_64_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__8_64() { super.copyFrom_64_128_0__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_64_64() { super.copyFrom_64_128_56_64_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64__8_64() { super.copyFrom_64_128_64__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_0_64() { super.copyFrom_64_128_64_0_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_56_64() { super.copyFrom_64_128_64_56_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_64_64() { super.copyFrom_64_128_64_64_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__9__73_65() { super.copyFrom_64_128__9__73_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__67_65() { super.copyFrom_64_128__1__67_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__66_65() { super.copyFrom_64_128__1__66_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__65_65() { super.copyFrom_64_128__1__65_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_56_65() { super.copyFrom_64_128__1_56_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_120_65() { super.copyFrom_64_128__1_120_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_128_65() { super.copyFrom_64_128__1_128_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_136_65() { super.copyFrom_64_128__1_136_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63__66_65() { super.copyFrom_64_128_63__66_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63__65_65() { super.copyFrom_64_128_63__65_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63__8_65() { super.copyFrom_64_128_63__8_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_120_65() { super.copyFrom_64_128_63_120_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_128_65() { super.copyFrom_64_128_63_128_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_136_65() { super.copyFrom_64_128_63_136_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128__1_65() { super.copyFrom_64_128_128__1_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_0_65() { super.copyFrom_64_128_128_0_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_63_65() { super.copyFrom_64_128_128_63_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_64_65() { super.copyFrom_64_128_128_64_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129__1_65() { super.copyFrom_64_128_129__1_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129_0_65() { super.copyFrom_64_128_129_0_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129_63_65() { super.copyFrom_64_128_129_63_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129_64_65() { super.copyFrom_64_128_129_64_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_63_66() { super.copyFrom_64_128_128_63_66(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129_63_66() { super.copyFrom_64_128_129_63_66(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129_64_66() { super.copyFrom_64_128_129_64_66(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129_63_67() { super.copyFrom_64_128_129_63_67(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_68_0_68() { super.copyFrom_64_128_68_0_68(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_1__7_71() { super.copyFrom_64_128_1__7_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_65__7_71() { super.copyFrom_64_128_65__7_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_65_0_71() { super.copyFrom_64_128_65_0_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_65_57_71() { super.copyFrom_64_128_65_57_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__88__8_72() { super.copyFrom_64_128__88__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__80__16_72() { super.copyFrom_64_128__80__16_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__80__8_72() { super.copyFrom_64_128__80__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__80_0_72() { super.copyFrom_64_128__80_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__80_56_72() { super.copyFrom_64_128__80_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__80_64_72() { super.copyFrom_64_128__80_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__72__8_72() { super.copyFrom_64_128__72__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__72_0_72() { super.copyFrom_64_128__72_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__72_56_72() { super.copyFrom_64_128__72_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__72_64_72() { super.copyFrom_64_128__72_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__24_56_72() { super.copyFrom_64_128__24_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__8_72() { super.copyFrom_64_128__16__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__16_72() { super.copyFrom_64_128__8__16_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__8_72() { super.copyFrom_64_128__8__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_0_72() { super.copyFrom_64_128__8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_56_72() { super.copyFrom_64_128__8_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_64_72() { super.copyFrom_64_128__8_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__73_72() { super.copyFrom_64_128_0__73_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__72_72() { super.copyFrom_64_128_0__72_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__8_72() { super.copyFrom_64_128_0__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_0_72() { super.copyFrom_64_128_0_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_55_72() { super.copyFrom_64_128_0_55_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_8_0_72() { super.copyFrom_64_128_8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_48_56_72() { super.copyFrom_64_128_48_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56__8_72() { super.copyFrom_64_128_56__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_48_72() { super.copyFrom_64_128_56_48_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_56_72() { super.copyFrom_64_128_56_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_64_72() { super.copyFrom_64_128_56_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64__73_72() { super.copyFrom_64_128_64__73_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64__72_72() { super.copyFrom_64_128_64__72_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64__8_72() { super.copyFrom_64_128_64__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_0_72() { super.copyFrom_64_128_64_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_56_72() { super.copyFrom_64_128_64_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_64_72() { super.copyFrom_64_128_64_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_120_72() { super.copyFrom_64_128_64_120_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_128_72() { super.copyFrom_64_128_64_128_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_136_72() { super.copyFrom_64_128_64_136_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_144_72() { super.copyFrom_64_128_64_144_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_72_64_72() { super.copyFrom_64_128_72_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_137_64_72() { super.copyFrom_64_128_137_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__9__81_73() { super.copyFrom_64_128__9__81_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__75_73() { super.copyFrom_64_128__1__75_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__74_73() { super.copyFrom_64_128__1__74_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__73_73() { super.copyFrom_64_128__1__73_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__16_73() { super.copyFrom_64_128__1__16_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_54_73() { super.copyFrom_64_128__1_54_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63__74_73() { super.copyFrom_64_128_63__74_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63__73_73() { super.copyFrom_64_128_63__73_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63__11_73() { super.copyFrom_64_128_63__11_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63__9_73() { super.copyFrom_64_128_63__9_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_48_73() { super.copyFrom_64_128_63_48_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_120_73() { super.copyFrom_64_128_63_120_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_128_73() { super.copyFrom_64_128_63_128_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_136_73() { super.copyFrom_64_128_63_136_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_144_73() { super.copyFrom_64_128_63_144_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_137_63_73() { super.copyFrom_64_128_137_63_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_1__8_79() { super.copyFrom_64_128_1__8_79(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_65_56_79() { super.copyFrom_64_128_65_56_79(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__96__8_80() { super.copyFrom_64_128__96__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__88__16_80() { super.copyFrom_64_128__88__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__88__8_80() { super.copyFrom_64_128__88__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__88_56_80() { super.copyFrom_64_128__88_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__80__8_80() { super.copyFrom_64_128__80__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__80_56_80() { super.copyFrom_64_128__80_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__32_56_80() { super.copyFrom_64_128__32_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__24__8_80() { super.copyFrom_64_128__24__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__8_80() { super.copyFrom_64_128__16__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16_56_80() { super.copyFrom_64_128__16_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__16_80() { super.copyFrom_64_128__8__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__8_80() { super.copyFrom_64_128__8__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_0_80() { super.copyFrom_64_128__8_0_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__8_80() { super.copyFrom_64_128_0__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_40_56_80() { super.copyFrom_64_128_40_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_48_56_80() { super.copyFrom_64_128_48_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_48_80() { super.copyFrom_64_128_56_48_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_56_80() { super.copyFrom_64_128_56_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_64_80() { super.copyFrom_64_128_56_64_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_56_80() { super.copyFrom_64_128_64_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_136_80() { super.copyFrom_64_128_64_136_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__9__89_81() { super.copyFrom_64_128__9__89_81(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_63_136_81() { super.copyFrom_64_128_63_136_81(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__96__16_88() { super.copyFrom_64_128__96__16_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__8_88() { super.copyFrom_64_128__16__8_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__16_88() { super.copyFrom_64_128__8__16_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_48_56_88() { super.copyFrom_64_128_48_56_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_56_48_88() { super.copyFrom_64_128_56_48_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_120_112() { super.copyFrom_64_128_0_120_112(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_113_0_112() { super.copyFrom_64_128_113_0_112(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_120_113() { super.copyFrom_64_128__1_120_113(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_113__1_113() { super.copyFrom_64_128_113__1_113(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_8_120() { super.copyFrom_64_128_0_8_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_56_120() { super.copyFrom_64_128_0_56_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_64_120() { super.copyFrom_64_128_0_64_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_112_120() { super.copyFrom_64_128_0_112_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_120_120() { super.copyFrom_64_128_0_120_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_128_120() { super.copyFrom_64_128_0_128_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_136_120() { super.copyFrom_64_128_0_136_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_8_0_120() { super.copyFrom_64_128_8_0_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_16_0_120() { super.copyFrom_64_128_16_0_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_0_128() { super.copyFrom_64_128__8_0_128(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__8_128() { super.copyFrom_64_128_0__8_128(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_0_128() { super.copyFrom_64_128_0_0_128(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__131_129() { super.copyFrom_64_128__1__131_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__130_129() { super.copyFrom_64_128__1__130_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__129_129() { super.copyFrom_64_128__1__129_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__66_129() { super.copyFrom_64_128__1__66_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__65_129() { super.copyFrom_64_128__1__65_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_56_129() { super.copyFrom_64_128__1_56_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_64_129() { super.copyFrom_64_128__1_64_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_120_129() { super.copyFrom_64_128__1_120_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_128_129() { super.copyFrom_64_128__1_128_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_136_129() { super.copyFrom_64_128__1_136_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64__1_129() { super.copyFrom_64_128_64__1_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64_0_129() { super.copyFrom_64_128_64_0_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_65__1_129() { super.copyFrom_64_128_65__1_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_65_0_129() { super.copyFrom_64_128_65_0_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128__1_129() { super.copyFrom_64_128_128__1_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128_0_129() { super.copyFrom_64_128_128_0_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129__1_129() { super.copyFrom_64_128_129__1_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129_0_129() { super.copyFrom_64_128_129_0_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_64__1_130() { super.copyFrom_64_128_64__1_130(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_65__1_130() { super.copyFrom_64_128_65__1_130(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_128__1_130() { super.copyFrom_64_128_128__1_130(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129__1_130() { super.copyFrom_64_128_129__1_130(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129_0_130() { super.copyFrom_64_128_129_0_130(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_129__1_131() { super.copyFrom_64_128_129__1_131(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_1__7_135() { super.copyFrom_64_128_1__7_135(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__152__8_136() { super.copyFrom_64_128__152__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__144__8_136() { super.copyFrom_64_128__144__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__144_0_136() { super.copyFrom_64_128__144_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__136__8_136() { super.copyFrom_64_128__136__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__136_0_136() { super.copyFrom_64_128__136_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__80__8_136() { super.copyFrom_64_128__80__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__72__8_136() { super.copyFrom_64_128__72__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__72_0_136() { super.copyFrom_64_128__72_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__8_136() { super.copyFrom_64_128__16__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__16_136() { super.copyFrom_64_128__8__16_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__8_136() { super.copyFrom_64_128__8__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_0_136() { super.copyFrom_64_128__8_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__137_136() { super.copyFrom_64_128_0__137_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__136_136() { super.copyFrom_64_128_0__136_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__72_136() { super.copyFrom_64_128_0__72_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__8_136() { super.copyFrom_64_128_0__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_0_136() { super.copyFrom_64_128_0_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_56_136() { super.copyFrom_64_128_0_56_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_64_136() { super.copyFrom_64_128_0_64_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_120_136() { super.copyFrom_64_128_0_120_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_128_136() { super.copyFrom_64_128_0_128_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_136_136() { super.copyFrom_64_128_0_136_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_144_136() { super.copyFrom_64_128_0_144_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_8_0_136() { super.copyFrom_64_128_8_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_137_0_136() { super.copyFrom_64_128_137_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__9__145_137() { super.copyFrom_64_128__9__145_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__139_137() { super.copyFrom_64_128__1__139_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__138_137() { super.copyFrom_64_128__1__138_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__137_137() { super.copyFrom_64_128__1__137_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__74_137() { super.copyFrom_64_128__1__74_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__73_137() { super.copyFrom_64_128__1__73_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1__16_137() { super.copyFrom_64_128__1__16_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_56_137() { super.copyFrom_64_128__1_56_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_64_137() { super.copyFrom_64_128__1_64_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_120_137() { super.copyFrom_64_128__1_120_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_128_137() { super.copyFrom_64_128__1_128_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_136_137() { super.copyFrom_64_128__1_136_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_144_137() { super.copyFrom_64_128__1_144_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_137__1_137() { super.copyFrom_64_128_137__1_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_1__8_143() { super.copyFrom_64_128_1__8_143(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__160__8_144() { super.copyFrom_64_128__160__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__152__16_144() { super.copyFrom_64_128__152__16_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__152__8_144() { super.copyFrom_64_128__152__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__144__8_144() { super.copyFrom_64_128__144__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__88__8_144() { super.copyFrom_64_128__88__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__80__8_144() { super.copyFrom_64_128__80__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__24__8_144() { super.copyFrom_64_128__24__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__8_144() { super.copyFrom_64_128__16__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__16_144() { super.copyFrom_64_128__8__16_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__8_144() { super.copyFrom_64_128__8__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8_0_144() { super.copyFrom_64_128__8_0_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0__8_144() { super.copyFrom_64_128_0__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128_0_136_144() { super.copyFrom_64_128_0_136_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__9__153_145() { super.copyFrom_64_128__9__153_145(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__1_136_145() { super.copyFrom_64_128__1_136_145(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__160__16_152() { super.copyFrom_64_128__160__16_152(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__16__8_152() { super.copyFrom_64_128__16__8_152(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_128__8__16_152() { super.copyFrom_64_128__8__16_152(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__8_0() { super.copyFrom_128_64__16__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__16_0() { super.copyFrom_128_64__8__16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__8_0() { super.copyFrom_128_64__8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_0_0() { super.copyFrom_128_64__8_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_56_0() { super.copyFrom_128_64__8_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_64_0() { super.copyFrom_128_64__8_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_72_0() { super.copyFrom_128_64__8_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_128_0() { super.copyFrom_128_64__8_128_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_136_0() { super.copyFrom_128_64__8_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__8_0() { super.copyFrom_128_64_0__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_72_0() { super.copyFrom_128_64_0_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_128_0() { super.copyFrom_128_64_0_128_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_136_0() { super.copyFrom_128_64_0_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56__8_0() { super.copyFrom_128_64_56__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_72_0() { super.copyFrom_128_64_56_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_128_0() { super.copyFrom_128_64_56_128_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_136_0() { super.copyFrom_128_64_56_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64__8_0() { super.copyFrom_128_64_64__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_72_0() { super.copyFrom_128_64_64_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_128_0() { super.copyFrom_128_64_64_128_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_136_0() { super.copyFrom_128_64_64_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72__8_0() { super.copyFrom_128_64_72__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72_72_0() { super.copyFrom_128_64_72_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72_80_0() { super.copyFrom_128_64_72_80_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_80_72_0() { super.copyFrom_128_64_80_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120_128_0() { super.copyFrom_128_64_120_128_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120_136_0() { super.copyFrom_128_64_120_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128__8_0() { super.copyFrom_128_64_128__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_120_0() { super.copyFrom_128_64_128_120_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_128_0() { super.copyFrom_128_64_128_128_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_136_0() { super.copyFrom_128_64_128_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136__8_0() { super.copyFrom_128_64_136__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_0_0() { super.copyFrom_128_64_136_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_56_0() { super.copyFrom_128_64_136_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_64_0() { super.copyFrom_128_64_136_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_120_0() { super.copyFrom_128_64_136_120_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_128_0() { super.copyFrom_128_64_136_128_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_136_0() { super.copyFrom_128_64_136_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_144_0() { super.copyFrom_128_64_136_144_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_144_136_0() { super.copyFrom_128_64_144_136_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__32__16_8() { super.copyFrom_128_64__32__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__24__16_8() { super.copyFrom_128_64__24__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__24__8_8() { super.copyFrom_128_64__24__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__32_8() { super.copyFrom_128_64__16__32_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__24_8() { super.copyFrom_128_64__16__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__16_8() { super.copyFrom_128_64__16__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__8_8() { super.copyFrom_128_64__16__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16_48_8() { super.copyFrom_128_64__16_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16_56_8() { super.copyFrom_128_64__16_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16_64_8() { super.copyFrom_128_64__16_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16_72_8() { super.copyFrom_128_64__16_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16_120_8() { super.copyFrom_128_64__16_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16_128_8() { super.copyFrom_128_64__16_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16_136_8() { super.copyFrom_128_64__16_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__24_8() { super.copyFrom_128_64__8__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__16_8() { super.copyFrom_128_64__8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__8_8() { super.copyFrom_128_64__8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_48_8() { super.copyFrom_128_64__8_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_56_8() { super.copyFrom_128_64__8_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_64_8() { super.copyFrom_128_64__8_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_72_8() { super.copyFrom_128_64__8_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_120_8() { super.copyFrom_128_64__8_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_128_8() { super.copyFrom_128_64__8_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_136_8() { super.copyFrom_128_64__8_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48__16_8() { super.copyFrom_128_64_48__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48__8_8() { super.copyFrom_128_64_48__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48_64_8() { super.copyFrom_128_64_48_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48_72_8() { super.copyFrom_128_64_48_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48_120_8() { super.copyFrom_128_64_48_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48_128_8() { super.copyFrom_128_64_48_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48_136_8() { super.copyFrom_128_64_48_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56__16_8() { super.copyFrom_128_64_56__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56__8_8() { super.copyFrom_128_64_56__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_64_8() { super.copyFrom_128_64_56_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_72_8() { super.copyFrom_128_64_56_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_120_8() { super.copyFrom_128_64_56_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_128_8() { super.copyFrom_128_64_56_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_136_8() { super.copyFrom_128_64_56_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64__16_8() { super.copyFrom_128_64_64__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64__8_8() { super.copyFrom_128_64_64__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_64_8() { super.copyFrom_128_64_64_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_72_8() { super.copyFrom_128_64_64_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_80_8() { super.copyFrom_128_64_64_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72__16_8() { super.copyFrom_128_64_72__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72__8_8() { super.copyFrom_128_64_72__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72_64_8() { super.copyFrom_128_64_72_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72_72_8() { super.copyFrom_128_64_72_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72_80_8() { super.copyFrom_128_64_72_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72_88_8() { super.copyFrom_128_64_72_88_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_80_64_8() { super.copyFrom_128_64_80_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_80_72_8() { super.copyFrom_128_64_80_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_88_72_8() { super.copyFrom_128_64_88_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_104_120_8() { super.copyFrom_128_64_104_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_112_120_8() { super.copyFrom_128_64_112_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_112_128_8() { super.copyFrom_128_64_112_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_112_136_8() { super.copyFrom_128_64_112_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120__16_8() { super.copyFrom_128_64_120__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120__8_8() { super.copyFrom_128_64_120__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120_104_8() { super.copyFrom_128_64_120_104_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120_112_8() { super.copyFrom_128_64_120_112_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120_120_8() { super.copyFrom_128_64_120_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120_128_8() { super.copyFrom_128_64_120_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120_136_8() { super.copyFrom_128_64_120_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128__16_8() { super.copyFrom_128_64_128__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128__8_8() { super.copyFrom_128_64_128__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_0_8() { super.copyFrom_128_64_128_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_48_8() { super.copyFrom_128_64_128_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_56_8() { super.copyFrom_128_64_128_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_64_8() { super.copyFrom_128_64_128_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_112_8() { super.copyFrom_128_64_128_112_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_120_8() { super.copyFrom_128_64_128_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_128_8() { super.copyFrom_128_64_128_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_136_8() { super.copyFrom_128_64_128_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_144_8() { super.copyFrom_128_64_128_144_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136__16_8() { super.copyFrom_128_64_136__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136__8_8() { super.copyFrom_128_64_136__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_48_8() { super.copyFrom_128_64_136_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_56_8() { super.copyFrom_128_64_136_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_112_8() { super.copyFrom_128_64_136_112_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_120_8() { super.copyFrom_128_64_136_120_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_128_8() { super.copyFrom_128_64_136_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_136_8() { super.copyFrom_128_64_136_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_144_8() { super.copyFrom_128_64_136_144_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_152_8() { super.copyFrom_128_64_136_152_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_144_128_8() { super.copyFrom_128_64_144_128_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_144_136_8() { super.copyFrom_128_64_144_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_152_136_8() { super.copyFrom_128_64_152_136_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63__16_9() { super.copyFrom_128_64_63__16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63__9_9() { super.copyFrom_128_64_63__9_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_72_9() { super.copyFrom_128_64_63_72_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_80_9() { super.copyFrom_128_64_63_80_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_127__16_9() { super.copyFrom_128_64_127__16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_127__9_9() { super.copyFrom_128_64_127__9_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_127_48_9() { super.copyFrom_128_64_127_48_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_127_55_9() { super.copyFrom_128_64_127_55_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_127_104_9() { super.copyFrom_128_64_127_104_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_127_136_9() { super.copyFrom_128_64_127_136_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_127_144_9() { super.copyFrom_128_64_127_144_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_68_56_12() { super.copyFrom_128_64_68_56_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_124_112_12() { super.copyFrom_128_64_124_112_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_132_120_12() { super.copyFrom_128_64_132_120_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_73_57_15() { super.copyFrom_128_64_73_57_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129_0_15() { super.copyFrom_128_64_129_0_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129_64_15() { super.copyFrom_128_64_129_64_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_137_121_15() { super.copyFrom_128_64_137_121_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__32__24_16() { super.copyFrom_128_64__32__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__24__32_16() { super.copyFrom_128_64__24__32_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__24__16_16() { super.copyFrom_128_64__24__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__24_56_16() { super.copyFrom_128_64__24_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__24_120_16() { super.copyFrom_128_64__24_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__24_16() { super.copyFrom_128_64__16__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16_56_16() { super.copyFrom_128_64__16_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16_120_16() { super.copyFrom_128_64__16_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_32_56_16() { super.copyFrom_128_64_32_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_40_56_16() { super.copyFrom_128_64_40_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_40_120_16() { super.copyFrom_128_64_40_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48_56_16() { super.copyFrom_128_64_48_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48_120_16() { super.copyFrom_128_64_48_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_56_16() { super.copyFrom_128_64_56_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_64_16() { super.copyFrom_128_64_56_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_56_16() { super.copyFrom_128_64_64_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_72_16() { super.copyFrom_128_64_64_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72_64_16() { super.copyFrom_128_64_72_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72_80_16() { super.copyFrom_128_64_72_80_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_80_72_16() { super.copyFrom_128_64_80_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_96_120_16() { super.copyFrom_128_64_96_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_104_112_16() { super.copyFrom_128_64_104_112_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_104_120_16() { super.copyFrom_128_64_104_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_112_104_16() { super.copyFrom_128_64_112_104_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_112_120_16() { super.copyFrom_128_64_112_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120_112_16() { super.copyFrom_128_64_120_112_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120_120_16() { super.copyFrom_128_64_120_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120_128_16() { super.copyFrom_128_64_120_128_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_120_16() { super.copyFrom_128_64_128_120_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_136_16() { super.copyFrom_128_64_128_136_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_128_16() { super.copyFrom_128_64_136_128_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_136_144_16() { super.copyFrom_128_64_136_144_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_144_136_16() { super.copyFrom_128_64_144_136_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_72_17() { super.copyFrom_128_64_63_72_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_119_103_17() { super.copyFrom_128_64_119_103_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_127_136_17() { super.copyFrom_128_64_127_136_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_65_56_23() { super.copyFrom_128_64_65_56_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129_120_23() { super.copyFrom_128_64_129_120_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_32_48_24() { super.copyFrom_128_64_32_48_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48_56_24() { super.copyFrom_128_64_48_56_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_48_24() { super.copyFrom_128_64_56_48_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_96_112_24() { super.copyFrom_128_64_96_112_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_112_120_24() { super.copyFrom_128_64_112_120_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_120_112_24() { super.copyFrom_128_64_120_112_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_31_32() { super.copyFrom_128_64__1_31_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_24__8_32() { super.copyFrom_128_64_24__8_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_96_32() { super.copyFrom_128_64_64_96_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_96_64_32() { super.copyFrom_128_64_96_64_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_100_64_36() { super.copyFrom_128_64_100_64_36(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_56_48() { super.copyFrom_128_64_0_56_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_120_48() { super.copyFrom_128_64_64_120_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_113_64_48() { super.copyFrom_128_64_113_64_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_14_49() { super.copyFrom_128_64__1_14_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_56_49() { super.copyFrom_128_64__1_56_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_49__1_49() { super.copyFrom_128_64_49__1_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_120_49() { super.copyFrom_128_64_63_120_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_113_63_49() { super.copyFrom_128_64_113_63_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_1__8_55() { super.copyFrom_128_64_1__8_55(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__64_0_56() { super.copyFrom_128_64__64_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__56_0_56() { super.copyFrom_128_64__56_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_0_56() { super.copyFrom_128_64__8_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__57_56() { super.copyFrom_128_64_0__57_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__56_56() { super.copyFrom_128_64_0__56_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__8_56() { super.copyFrom_128_64_0__8_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_48_56() { super.copyFrom_128_64_0_48_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_56_56() { super.copyFrom_128_64_0_56_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_64_56() { super.copyFrom_128_64_0_64_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_71_56() { super.copyFrom_128_64_0_71_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_72_56() { super.copyFrom_128_64_0_72_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_120_56() { super.copyFrom_128_64_0_120_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_128_56() { super.copyFrom_128_64_0_128_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_136_56() { super.copyFrom_128_64_0_136_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_72_56() { super.copyFrom_128_64_64_72_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_112_56() { super.copyFrom_128_64_64_112_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_120_56() { super.copyFrom_128_64_64_120_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_128_56() { super.copyFrom_128_64_64_128_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_136_56() { super.copyFrom_128_64_64_136_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72_64_56() { super.copyFrom_128_64_72_64_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_80_0_56() { super.copyFrom_128_64_80_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_80_64_56() { super.copyFrom_128_64_80_64_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__8_64() { super.copyFrom_128_64__16__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__16_64() { super.copyFrom_128_64__8__16_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__8_64() { super.copyFrom_128_64__8__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_0_64() { super.copyFrom_128_64__8_0_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_64_64() { super.copyFrom_128_64__8_64_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__8_64() { super.copyFrom_128_64_0__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_64_64() { super.copyFrom_128_64_0_64_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_64_64() { super.copyFrom_128_64_56_64_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64__8_64() { super.copyFrom_128_64_64__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_56_64() { super.copyFrom_128_64_64_56_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_64_64() { super.copyFrom_128_64_64_64_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__9__73_65() { super.copyFrom_128_64__9__73_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__67_65() { super.copyFrom_128_64__1__67_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__66_65() { super.copyFrom_128_64__1__66_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__65_65() { super.copyFrom_128_64__1__65_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_56_65() { super.copyFrom_128_64__1_56_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_120_65() { super.copyFrom_128_64__1_120_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_128_65() { super.copyFrom_128_64__1_128_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_136_65() { super.copyFrom_128_64__1_136_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63__66_65() { super.copyFrom_128_64_63__66_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63__65_65() { super.copyFrom_128_64_63__65_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63__8_65() { super.copyFrom_128_64_63__8_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_120_65() { super.copyFrom_128_64_63_120_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_128_65() { super.copyFrom_128_64_63_128_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_136_65() { super.copyFrom_128_64_63_136_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128__1_65() { super.copyFrom_128_64_128__1_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_0_65() { super.copyFrom_128_64_128_0_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_63_65() { super.copyFrom_128_64_128_63_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_64_65() { super.copyFrom_128_64_128_64_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129__1_65() { super.copyFrom_128_64_129__1_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129_0_65() { super.copyFrom_128_64_129_0_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129_63_65() { super.copyFrom_128_64_129_63_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129_64_65() { super.copyFrom_128_64_129_64_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_63_66() { super.copyFrom_128_64_128_63_66(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129_63_66() { super.copyFrom_128_64_129_63_66(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129_64_66() { super.copyFrom_128_64_129_64_66(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129_63_67() { super.copyFrom_128_64_129_63_67(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_68_0_68() { super.copyFrom_128_64_68_0_68(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_1__7_71() { super.copyFrom_128_64_1__7_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_65__7_71() { super.copyFrom_128_64_65__7_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_65_0_71() { super.copyFrom_128_64_65_0_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_65_57_71() { super.copyFrom_128_64_65_57_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__88__8_72() { super.copyFrom_128_64__88__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__80__16_72() { super.copyFrom_128_64__80__16_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__80__8_72() { super.copyFrom_128_64__80__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__80_0_72() { super.copyFrom_128_64__80_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__80_56_72() { super.copyFrom_128_64__80_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__80_64_72() { super.copyFrom_128_64__80_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__72__8_72() { super.copyFrom_128_64__72__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__72_0_72() { super.copyFrom_128_64__72_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__72_56_72() { super.copyFrom_128_64__72_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__72_64_72() { super.copyFrom_128_64__72_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__24_56_72() { super.copyFrom_128_64__24_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__8_72() { super.copyFrom_128_64__16__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__16_72() { super.copyFrom_128_64__8__16_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__8_72() { super.copyFrom_128_64__8__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_0_72() { super.copyFrom_128_64__8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_56_72() { super.copyFrom_128_64__8_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_64_72() { super.copyFrom_128_64__8_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__73_72() { super.copyFrom_128_64_0__73_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__72_72() { super.copyFrom_128_64_0__72_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__8_72() { super.copyFrom_128_64_0__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_0_72() { super.copyFrom_128_64_0_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_55_72() { super.copyFrom_128_64_0_55_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_8_0_72() { super.copyFrom_128_64_8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48_56_72() { super.copyFrom_128_64_48_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56__8_72() { super.copyFrom_128_64_56__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_48_72() { super.copyFrom_128_64_56_48_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_56_72() { super.copyFrom_128_64_56_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_64_72() { super.copyFrom_128_64_56_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64__73_72() { super.copyFrom_128_64_64__73_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64__72_72() { super.copyFrom_128_64_64__72_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64__8_72() { super.copyFrom_128_64_64__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_0_72() { super.copyFrom_128_64_64_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_56_72() { super.copyFrom_128_64_64_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_64_72() { super.copyFrom_128_64_64_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_120_72() { super.copyFrom_128_64_64_120_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_128_72() { super.copyFrom_128_64_64_128_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_136_72() { super.copyFrom_128_64_64_136_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_144_72() { super.copyFrom_128_64_64_144_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_72_64_72() { super.copyFrom_128_64_72_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_137_64_72() { super.copyFrom_128_64_137_64_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__9__81_73() { super.copyFrom_128_64__9__81_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__75_73() { super.copyFrom_128_64__1__75_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__74_73() { super.copyFrom_128_64__1__74_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__73_73() { super.copyFrom_128_64__1__73_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__16_73() { super.copyFrom_128_64__1__16_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_54_73() { super.copyFrom_128_64__1_54_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63__74_73() { super.copyFrom_128_64_63__74_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63__73_73() { super.copyFrom_128_64_63__73_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63__11_73() { super.copyFrom_128_64_63__11_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63__9_73() { super.copyFrom_128_64_63__9_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_48_73() { super.copyFrom_128_64_63_48_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_120_73() { super.copyFrom_128_64_63_120_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_128_73() { super.copyFrom_128_64_63_128_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_136_73() { super.copyFrom_128_64_63_136_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_144_73() { super.copyFrom_128_64_63_144_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_137_63_73() { super.copyFrom_128_64_137_63_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_1__8_79() { super.copyFrom_128_64_1__8_79(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_65_56_79() { super.copyFrom_128_64_65_56_79(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__96__8_80() { super.copyFrom_128_64__96__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__88__16_80() { super.copyFrom_128_64__88__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__88__8_80() { super.copyFrom_128_64__88__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__88_56_80() { super.copyFrom_128_64__88_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__80__8_80() { super.copyFrom_128_64__80__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__80_56_80() { super.copyFrom_128_64__80_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__32_56_80() { super.copyFrom_128_64__32_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__24__8_80() { super.copyFrom_128_64__24__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__8_80() { super.copyFrom_128_64__16__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16_56_80() { super.copyFrom_128_64__16_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__16_80() { super.copyFrom_128_64__8__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__8_80() { super.copyFrom_128_64__8__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_0_80() { super.copyFrom_128_64__8_0_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__8_80() { super.copyFrom_128_64_0__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_40_56_80() { super.copyFrom_128_64_40_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48_56_80() { super.copyFrom_128_64_48_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_48_80() { super.copyFrom_128_64_56_48_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_56_80() { super.copyFrom_128_64_56_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_64_80() { super.copyFrom_128_64_56_64_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_56_80() { super.copyFrom_128_64_64_56_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_136_80() { super.copyFrom_128_64_64_136_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__9__89_81() { super.copyFrom_128_64__9__89_81(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_63_136_81() { super.copyFrom_128_64_63_136_81(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__96__16_88() { super.copyFrom_128_64__96__16_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__8_88() { super.copyFrom_128_64__16__8_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__16_88() { super.copyFrom_128_64__8__16_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_48_56_88() { super.copyFrom_128_64_48_56_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_56_48_88() { super.copyFrom_128_64_56_48_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_120_112() { super.copyFrom_128_64_0_120_112(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_113_0_112() { super.copyFrom_128_64_113_0_112(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_120_113() { super.copyFrom_128_64__1_120_113(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_113__1_113() { super.copyFrom_128_64_113__1_113(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_8_120() { super.copyFrom_128_64_0_8_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_56_120() { super.copyFrom_128_64_0_56_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_64_120() { super.copyFrom_128_64_0_64_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_112_120() { super.copyFrom_128_64_0_112_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_120_120() { super.copyFrom_128_64_0_120_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_128_120() { super.copyFrom_128_64_0_128_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_136_120() { super.copyFrom_128_64_0_136_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_8_0_120() { super.copyFrom_128_64_8_0_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_16_0_120() { super.copyFrom_128_64_16_0_120(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_0_128() { super.copyFrom_128_64__8_0_128(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__8_128() { super.copyFrom_128_64_0__8_128(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_0_128() { super.copyFrom_128_64_0_0_128(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__131_129() { super.copyFrom_128_64__1__131_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__130_129() { super.copyFrom_128_64__1__130_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__129_129() { super.copyFrom_128_64__1__129_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__66_129() { super.copyFrom_128_64__1__66_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__65_129() { super.copyFrom_128_64__1__65_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_56_129() { super.copyFrom_128_64__1_56_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_64_129() { super.copyFrom_128_64__1_64_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_120_129() { super.copyFrom_128_64__1_120_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_128_129() { super.copyFrom_128_64__1_128_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_136_129() { super.copyFrom_128_64__1_136_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64__1_129() { super.copyFrom_128_64_64__1_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64_0_129() { super.copyFrom_128_64_64_0_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_65__1_129() { super.copyFrom_128_64_65__1_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_65_0_129() { super.copyFrom_128_64_65_0_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128__1_129() { super.copyFrom_128_64_128__1_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128_0_129() { super.copyFrom_128_64_128_0_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129__1_129() { super.copyFrom_128_64_129__1_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129_0_129() { super.copyFrom_128_64_129_0_129(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_64__1_130() { super.copyFrom_128_64_64__1_130(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_65__1_130() { super.copyFrom_128_64_65__1_130(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_128__1_130() { super.copyFrom_128_64_128__1_130(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129__1_130() { super.copyFrom_128_64_129__1_130(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129_0_130() { super.copyFrom_128_64_129_0_130(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_129__1_131() { super.copyFrom_128_64_129__1_131(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_1__7_135() { super.copyFrom_128_64_1__7_135(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__152__8_136() { super.copyFrom_128_64__152__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__144__8_136() { super.copyFrom_128_64__144__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__144_0_136() { super.copyFrom_128_64__144_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__136__8_136() { super.copyFrom_128_64__136__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__136_0_136() { super.copyFrom_128_64__136_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__80__8_136() { super.copyFrom_128_64__80__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__72__8_136() { super.copyFrom_128_64__72__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__72_0_136() { super.copyFrom_128_64__72_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__8_136() { super.copyFrom_128_64__16__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__16_136() { super.copyFrom_128_64__8__16_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__8_136() { super.copyFrom_128_64__8__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_0_136() { super.copyFrom_128_64__8_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__137_136() { super.copyFrom_128_64_0__137_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__136_136() { super.copyFrom_128_64_0__136_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__72_136() { super.copyFrom_128_64_0__72_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__8_136() { super.copyFrom_128_64_0__8_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_0_136() { super.copyFrom_128_64_0_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_56_136() { super.copyFrom_128_64_0_56_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_64_136() { super.copyFrom_128_64_0_64_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_120_136() { super.copyFrom_128_64_0_120_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_128_136() { super.copyFrom_128_64_0_128_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_136_136() { super.copyFrom_128_64_0_136_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_144_136() { super.copyFrom_128_64_0_144_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_8_0_136() { super.copyFrom_128_64_8_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_137_0_136() { super.copyFrom_128_64_137_0_136(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__9__145_137() { super.copyFrom_128_64__9__145_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__139_137() { super.copyFrom_128_64__1__139_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__138_137() { super.copyFrom_128_64__1__138_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__137_137() { super.copyFrom_128_64__1__137_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__74_137() { super.copyFrom_128_64__1__74_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__73_137() { super.copyFrom_128_64__1__73_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1__16_137() { super.copyFrom_128_64__1__16_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_56_137() { super.copyFrom_128_64__1_56_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_64_137() { super.copyFrom_128_64__1_64_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_120_137() { super.copyFrom_128_64__1_120_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_128_137() { super.copyFrom_128_64__1_128_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_136_137() { super.copyFrom_128_64__1_136_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_144_137() { super.copyFrom_128_64__1_144_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_137__1_137() { super.copyFrom_128_64_137__1_137(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_1__8_143() { super.copyFrom_128_64_1__8_143(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__160__8_144() { super.copyFrom_128_64__160__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__152__16_144() { super.copyFrom_128_64__152__16_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__152__8_144() { super.copyFrom_128_64__152__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__144__8_144() { super.copyFrom_128_64__144__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__88__8_144() { super.copyFrom_128_64__88__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__80__8_144() { super.copyFrom_128_64__80__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__24__8_144() { super.copyFrom_128_64__24__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__8_144() { super.copyFrom_128_64__16__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__16_144() { super.copyFrom_128_64__8__16_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__8_144() { super.copyFrom_128_64__8__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8_0_144() { super.copyFrom_128_64__8_0_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0__8_144() { super.copyFrom_128_64_0__8_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64_0_136_144() { super.copyFrom_128_64_0_136_144(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__9__153_145() { super.copyFrom_128_64__9__153_145(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__1_136_145() { super.copyFrom_128_64__1_136_145(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__160__16_152() { super.copyFrom_128_64__160__16_152(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__16__8_152() { super.copyFrom_128_64__16__8_152(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_128_64__8__16_152() { super.copyFrom_128_64__8__16_152(); }
		}
		
		public static abstract class SafeCopyFromSameSource<T> implements StorageBuilder<T> {
			protected abstract void copyFrom(T source, int srcPos, T dest, int destPos, int length);
			
			// test cases for alignment
			
			@Test public void copyFrom_0_0_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  0, subject,  0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011001L);
				
				copyFrom(subject,  0, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111101L);
				
				copyFrom(subject,  0, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject,  0, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111101L);
				
				copyFrom(subject,  0, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_20() {
				T subject  = build(0b0000000000000000000000000000000000000000000110111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000110111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_24() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_28() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_32() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_40() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_48() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_64() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_96() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_112() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_128() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_160() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_192() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_224() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100110L);
				
				copyFrom(subject,  2, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110110L);
				
				copyFrom(subject,  2, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001101110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110110L);
				
				copyFrom(subject,  2, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110110L);
				
				copyFrom(subject,  2, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110110L);
				
				copyFrom(subject,  2, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000110111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110110L);
				
				copyFrom(subject,  2, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_20() {
				T subject  = build(0b0000000000000000000000000000000000000000011011111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110110L);
				
				copyFrom(subject,  2, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_22() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110110L);
				
				copyFrom(subject,  2, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_23() {
				T subject  = build(0b0000000000000000000000000000000000000011011111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110110L);
				
				copyFrom(subject,  2, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_2_28() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110110L);
				
				copyFrom(subject,  2, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011000L);
				
				copyFrom(subject,  4, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011000L);
				
				copyFrom(subject,  4, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001101111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_24() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_28() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_30() {
				T subject  = build(0b0000000000000000000000000000011011111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_40() {
				T subject  = build(0b0000000000000000000110111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_44() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_48() {
				T subject  = build(0b0000000000011011111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000011011111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_4_56() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_16() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_24() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_28() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_48() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_56() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_80() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_88() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_92() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_8_112() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_32() {
				T subject  = build(0b0000000000000001101111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_48() {
				T subject  = build(0b1011111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_56() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_96() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_112() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_120() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_160() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_176() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_184() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_16_224() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100101L);
				
				copyFrom(subject,  0, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000101101101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110101L);
				
				copyFrom(subject,  0, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001011011101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110101L);
				
				copyFrom(subject,  0, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000101101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110101L);
				
				copyFrom(subject,  0, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010110111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110101L);
				
				copyFrom(subject,  0, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000101101111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_20() {
				T subject  = build(0b0000000000000000000000000000000000000000010110111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_22() {
				T subject  = build(0b0000000000000000000000000000000000000001011011111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_23() {
				T subject  = build(0b0000000000000000000000000000000000000010110111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_28() {
				T subject  = build(0b0000000000000000000000000000000001011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_30() {
				T subject  = build(0b0000000000000000000000000000000101101111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_31() {
				T subject  = build(0b0000000000000000000000000000001011011111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000001101111111111111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_2_36() {
				T subject  = build(0b0000000000000000000000000101101111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000110111111111111111111111111111111110101L);
				
				copyFrom(subject,  0, subject,  2,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000110111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011101L);
				
				copyFrom(subject,  0, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010001101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011101L);
				
				copyFrom(subject,  0, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001000110111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_24() {
				T subject  = build(0b0000000000000000000000000000000000010001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_28() {
				T subject  = build(0b0000000000000000000000000000000100011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_30() {
				T subject  = build(0b0000000000000000000000000000010001101111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_40() {
				T subject  = build(0b0000000000000000000100011011111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_44() {
				T subject  = build(0b0000000000000001000110111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_46() {
				T subject  = build(0b0000000000000100011011111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000110111111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_56() {
				T subject  = build(0b0001000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_60() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_62() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000100L,
				                   0b0110111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_4_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011101L);
				
				copyFrom(subject,  0, subject,  4,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_16() {
				T subject  = build(0b0000000000000000000000000000000000000001000000011011111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_24() {
				T subject  = build(0b0000000000000000000000000000000100000001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_28() {
				T subject  = build(0b0000000000000000000000000001000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_32() {
				T subject  = build(0b0000000000000000000000010000000110111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_48() {
				T subject  = build(0b0000000100000001101111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_80() {
				T subject  = build(0b0000000000000000000000000000000000000001000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_88() {
				T subject  = build(0b0000000000000000000000000000000100000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_92() {
				T subject  = build(0b0000000000000000000000000001000000011011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_96() {
				T subject  = build(0b0000000000000000000000010000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_112() {
				T subject  = build(0b0000000100000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_120() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_124() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_144() {
				T subject  = build(0b0000000000000000000000000000000000000001000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_160() {
				T subject  = build(0b0000000000000000000000010000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_176() {
				T subject  = build(0b0000000100000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_184() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_224() {
				T subject  = build(0b0000000000000000000000010000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_240() {
				T subject  = build(0b0000000100000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_248() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_8_288() {
				T subject  = build(0b0000000000000000000000010000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,  0, subject,  8, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_0() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  0, subject, 64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b1000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000000011001L);
				
				copyFrom(subject,  0, subject, 64,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b1000000000000000000000000000000000000000000000000000000110111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000000000110111101L);
				
				copyFrom(subject,  0, subject, 64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000000000L,
				                   0b1000000000000000000000000000000000000000000000000001101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject,  0, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000000L,
				                   0b1000000000000000000000000000000000000000000000011011111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111111101L);
				
				copyFrom(subject,  0, subject, 64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_20() {
				T subject  = build(0b0000000000000000000000000000000000000000000100000000000000000000L,
				                   0b1000000000000000000000000000000000000000000110111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000000110111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_24() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b1000000000000000000000000000000000000001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_28() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000000000L,
				                   0b1000000000000000000000000000000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_32() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b1000000000000000000000000000000110111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_40() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b1000000000000000000000011011111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000000011011111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_48() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b1000000000000001101111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000000000001101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_56() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b1000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_64() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_96() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_112() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_160() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_192() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_64_224() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 64, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001000010L,
				                   0b0000000000000000000000000000000000000000000000000000000000011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011001L);
				
				copyFrom(subject,  0, subject, 66,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000010L,
				                   0b0000000000000000000000000000000000000000000000000000000001101101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000001101101L);
				
				copyFrom(subject,  0, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001000000010L,
				                   0b0000000000000000000000000000000000000000000000000000000011011101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000000011011101L);
				
				copyFrom(subject,  0, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000100000000000010L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject,  0, subject, 66,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000010L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				
				copyFrom(subject,  0, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000100000000000000010L,
				                   0b0000000000000000000000000000000000000000000000001101111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000001101111111111101L);
				
				copyFrom(subject,  0, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_20() {
				T subject  = build(0b0000000000000000000000000000000000000000010000000000000000000010L,
				                   0b0000000000000000000000000000000000000000000110111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000000110111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_22() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000010L,
				                   0b0000000000000000000000000000000000000000011011111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000000011011111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_23() {
				T subject  = build(0b0000000000000000000000000000000000000010000000000000000000000010L,
				                   0b0000000000000000000000000000000000000000110111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000000110111111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_28() {
				T subject  = build(0b0000000000000000000000000000000001000000000000000000000000000010L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_30() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000010L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111110110L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_31() {
				T subject  = build(0b0000000000000000000000000000001000000000000000000000000000000010L,
				                   0b0000000000000000000000000000000011011111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000001101111111111111111111111111110110L,
				                   0b0000000000000000000000000000000011011111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_66_36() {
				T subject  = build(0b0000000000000000000000000100000000000000000000000000000000000010L,
				                   0b0000000000000000000000000001101111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000110111111111111111111111111111111110110L,
				                   0b0000000000000000000000000001101111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 66,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000001000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111101L);
				
				copyFrom(subject,  0, subject, 68,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000001000L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject,  0, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001000000000000001000L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				
				copyFrom(subject,  0, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_24() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000001000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_28() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000001000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_30() {
				T subject  = build(0b0000000000000000000000000000010000000000000000000000000000001000L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_40() {
				T subject  = build(0b0000000000000000000100000000000000000000000000000000000000001000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_44() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000001000L,
				                   0b0000000000000000000110111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000000000110111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_46() {
				T subject  = build(0b0000000000000100000000000000000000000000000000000000000000001000L,
				                   0b0000000000000000011011111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000110111111111111111111111111111111111111111111011000L,
				                   0b0000000000000000011011111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_56() {
				T subject  = build(0b0001000000000000000000000000000000000000000000000000000000001000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000001000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111011000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_62() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000100L,
				                   0b0000000000000000000000000000000000000000000000000000000000001000L,
				                   0b0110111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L,
				                   0b0110111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_68_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 68,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_16() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000010000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111101L);
				
				copyFrom(subject,  0, subject, 72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_24() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000010000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_28() {
				T subject  = build(0b0000000000000000000000000001000000000000000000000000000010000000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_32() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000010000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_48() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000010000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_56() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000010000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_80() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_88() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_92() {
				T subject  = build(0b0000000000000000000000000001000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_96() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_112() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_120() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_124() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_144() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_160() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_176() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_184() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_224() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_240() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_248() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_72_288() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  0, subject, 72, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001101001L);
				
				copyFrom(subject,  2, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110101101L);
				
				copyFrom(subject,  2, subject,  0,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001101110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101011101L);
				
				copyFrom(subject,  2, subject,  0,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110101111111101L);
				
				copyFrom(subject,  2, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000011010111111111101L);
				
				copyFrom(subject,  2, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000110111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000110101111111111101L);
				
				copyFrom(subject,  2, subject,  0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_20() {
				T subject  = build(0b0000000000000000000000000000000000000000011011111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000011010111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_22() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000001101011111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_23() {
				T subject  = build(0b0000000000000000000000000000000000000011011111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000011010111111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_28() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000001101011111111111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_30() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000110101111111111111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_31() {
				T subject  = build(0b0000000000000000000000000000001101111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000001101011111111111111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_0_36() {
				T subject  = build(0b0000000000000000000000000110111111111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000110101111111111111111111111111111111101L);
				
				copyFrom(subject,  2, subject,  0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b1000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000001100110L);
				
				copyFrom(subject,  2, subject, 64,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001000000L,
				                   0b1000000000000000000000000000000000000000000000000000000110110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001101101L,
				                   0b1000000000000000000000000000000000000000000000000000000110110110L);
				
				copyFrom(subject,  2, subject, 64,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000010000000L,
				                   0b1000000000000000000000000000000000000000000000000000001101110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011011101L,
				                   0b1000000000000000000000000000000000000000000000000000001101110110L);
				
				copyFrom(subject,  2, subject, 64,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000000000L,
				                   0b1000000000000000000000000000000000000000000000000110111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000110111111110110L);
				
				copyFrom(subject,  2, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000100000000000000L,
				                   0b1000000000000000000000000000000000000000000000011011111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111110110L);
				
				copyFrom(subject,  2, subject, 64,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000001000000000000000L,
				                   0b1000000000000000000000000000000000000000000000110111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000001101111111111101L,
				                   0b1000000000000000000000000000000000000000000000110111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_20() {
				T subject  = build(0b0000000000000000000000000000000000000000000100000000000000000000L,
				                   0b1000000000000000000000000000000000000000011011111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000011011111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_22() {
				T subject  = build(0b0000000000000000000000000000000000000000010000000000000000000000L,
				                   0b1000000000000000000000000000000000000001101111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_23() {
				T subject  = build(0b0000000000000000000000000000000000000000100000000000000000000000L,
				                   0b1000000000000000000000000000000000000011011111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000110111111111111111111101L,
				                   0b1000000000000000000000000000000000000011011111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_28() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000000000L,
				                   0b1000000000000000000000000000000001101111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000001101111111111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_30() {
				T subject  = build(0b0000000000000000000000000000000001000000000000000000000000000000L,
				                   0b1000000000000000000000000000000110111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_31() {
				T subject  = build(0b0000000000000000000000000000000010000000000000000000000000000000L,
				                   0b1000000000000000000000000000001101111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000011011111111111111111111111111101L,
				                   0b1000000000000000000000000000001101111111111111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_64_36() {
				T subject  = build(0b0000000000000000000000000001000000000000000000000000000000000000L,
				                   0b1000000000000000000000000110111111111111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111101L,
				                   0b1000000000000000000000000110111111111111111111111111111111110110L);
				
				copyFrom(subject,  2, subject, 64,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001000010L,
				                   0b0000000000000000000000000000000000000000000000000000000001100110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000001100110L);
				
				copyFrom(subject,  2, subject, 66,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000010L,
				                   0b0000000000000000000000000000000000000000000000000000000110110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000110110110L);
				
				copyFrom(subject,  2, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001000000010L,
				                   0b0000000000000000000000000000000000000000000000000000001101110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000001101110110L);
				
				copyFrom(subject,  2, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000100000000000010L,
				                   0b0000000000000000000000000000000000000000000000000110111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000110111111110110L);
				
				copyFrom(subject,  2, subject, 66,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000010L,
				                   0b0000000000000000000000000000000000000000000000011011111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000011011111111110110L);
				
				copyFrom(subject,  2, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000100000000000000010L,
				                   0b0000000000000000000000000000000000000000000000110111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000110111111111110110L);
				
				copyFrom(subject,  2, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_20() {
				T subject  = build(0b0000000000000000000000000000000000000000010000000000000000000010L,
				                   0b0000000000000000000000000000000000000000011011111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000011011111111111111110110L);
				
				copyFrom(subject,  2, subject, 66,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_22() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000010L,
				                   0b0000000000000000000000000000000000000001101111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000001101111111111111111110110L);
				
				copyFrom(subject,  2, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_23() {
				T subject  = build(0b0000000000000000000000000000000000000010000000000000000000000010L,
				                   0b0000000000000000000000000000000000000011011111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000011011111111111111111110110L);
				
				copyFrom(subject,  2, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_2_66_28() {
				T subject  = build(0b0000000000000000000000000000000001000000000000000000000000000010L,
				                   0b0000000000000000000000000000000001101111111111111111111111110110L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000001101111111111111111111111110110L);
				
				copyFrom(subject,  2, subject, 66,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101110111101L);
				
				copyFrom(subject,  4, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011101111111101L);
				
				copyFrom(subject,  4, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001101111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001101110111111111101L);
				
				copyFrom(subject,  4, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_24() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000011011101111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_28() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000110111011111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_30() {
				T subject  = build(0b0000000000000000000000000000011011111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000011011101111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_40() {
				T subject  = build(0b0000000000000000000110111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000110111011111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_44() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000001101110111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_46() {
				T subject  = build(0b0000000000000110111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000110111011111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_56() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0001101110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_60() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b1011101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_62() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1110111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_0_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  4, subject,  0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b1000000000000000000000000000000000000000000000000001101111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000001101111011000L);
				
				copyFrom(subject,  4, subject, 64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000000000L,
				                   0b1000000000000000000000000000000000000000000000011011111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111011000L);
				
				copyFrom(subject,  4, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000100000000000000L,
				                   0b1000000000000000000000000000000000000000000001101111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000001101111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_24() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b1000000000000000000000000000000000011011111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000011011111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_28() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000000000L,
				                   0b1000000000000000000000000000000110111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_30() {
				T subject  = build(0b0000000000000000000000000000000001000000000000000000000000000000L,
				                   0b1000000000000000000000000000011011111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000011011111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_40() {
				T subject  = build(0b0000000000000000000000010000000000000000000000000000000000000000L,
				                   0b1000000000000000000110111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000110111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_44() {
				T subject  = build(0b0000000000000000000100000000000000000000000000000000000000000000L,
				                   0b1000000000000001101111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111111101L,
				                   0b1000000000000001101111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_46() {
				T subject  = build(0b0000000000000000010000000000000000000000000000000000000000000000L,
				                   0b1000000000000110111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000011011111111111111111111111111111111111111111101L,
				                   0b1000000000000110111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_56() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b1001101111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1001101111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_60() {
				T subject  = build(0b0001000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_62() {
				T subject  = build(0b0100000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0110111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_64_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000000001000L,
				                   0b0000000000000000000000000000000000000000000000000001101111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000001101111011000L);
				
				copyFrom(subject,  4, subject, 68,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000001000L,
				                   0b0000000000000000000000000000000000000000000000011011111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000011011111111011000L);
				
				copyFrom(subject,  4, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001000000000000001000L,
				                   0b0000000000000000000000000000000000000000000001101111111111011000L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000001101111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_24() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000001000L,
				                   0b0000000000000000000000000000000000011011111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000011011111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_28() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000001000L,
				                   0b0000000000000000000000000000000110111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000110111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_30() {
				T subject  = build(0b0000000000000000000000000000010000000000000000000000000000001000L,
				                   0b0000000000000000000000000000011011111111111111111111111111011000L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000011011111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_40() {
				T subject  = build(0b0000000000000000000100000000000000000000000000000000000000001000L,
				                   0b0000000000000000000110111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000110111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_44() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000001000L,
				                   0b0000000000000001101111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000001101111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_48() {
				T subject  = build(0b0000000000010000000000000000000000000000000000000000000000001000L,
				                   0b0000000000011011111111111111111111111111111111111111111111011000L);
				T expected = build(0b0000000000011011111111111111111111111111111111111111111111011000L,
				                   0b0000000000011011111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_4_68_56() {
				T subject  = build(0b0001000000000000000000000000000000000000000000000000000000001000L,
				                   0b0001101111111111111111111111111111111111111111111111111111011000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0001101111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject,  4, subject, 68,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_16() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111011111111111101L);
				
				copyFrom(subject,  8, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_24() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111101111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_28() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111011111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_32() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000011011111110111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_48() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_56() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_80() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_88() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_92() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_96() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000011011111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_112() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_120() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_124() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_144() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_160() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000011011111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_176() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_184() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_224() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000011011111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_240() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_248() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_0_288() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000011011111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  8, subject,  0, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000000L,
				                   0b1000000000000000000000000000000000000001101111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_24() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b1000000000000000000000000000000110111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_28() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000000000L,
				                   0b1000000000000000000000000001101111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000001101111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_32() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b1000000000000000000000011011111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000011011111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_48() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b1000000110111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000110111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_56() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_60() {
				T subject  = build(0b0001000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_88() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_92() {
				T subject  = build(0b0000000000000000000000000000000000010000000000000000000000000000L,
				                   0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_96() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_112() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_120() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_124() {
				T subject  = build(0b0001000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_144() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010000000000000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_160() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_176() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_184() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_224() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_240() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_248() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_64_288() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 64, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_16() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000010000000L,
				                   0b0000000000000000000000000000000000000001101111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000001101111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_24() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000010000000L,
				                   0b0000000000000000000000000000000110111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000110111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_28() {
				T subject  = build(0b0000000000000000000000000001000000000000000000000000000010000000L,
				                   0b0000000000000000000000000001101111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000001101111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_48() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000010000000L,
				                   0b0000000110111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000110111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_56() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000010000001L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110110000001L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000010000L,
				                   0b0000000000000000000000000000000000000000000000000000000010011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_80() {
				T subject  = build(0b0000000000000000000000000000000000000001000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_88() {
				T subject  = build(0b0000000000000000000000000000000100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_92() {
				T subject  = build(0b0000000000000000000000000001000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_8_72_112() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject,  8, subject, 72, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_32() {
				T subject  = build(0b0000000000000001000000000000000000000000000000001000000000000000L,
				                   0b0000000000000001101111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111011000000000000000L,
				                   0b0000000000000001101111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_48() {
				T subject  = build(0b0000000000000000000000000000000000000000000000001000000000000001L,
				                   0b1011111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111011000000000000001L,
				                   0b1011111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_56() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b0000000000000000000000000000000000000000000000001000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_96() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_112() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_120() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_160() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_176() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_184() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_16_80_224() {
				T subject  = build(0b0000000000000001000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 16, subject, 80, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_0() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject, 64, subject,  0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000000010000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000000011001L);
				
				copyFrom(subject, 64, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000000000100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000000000110111101L);
				
				copyFrom(subject, 64, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000001000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject, 64, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000000000000010000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111111101L);
				
				copyFrom(subject, 64, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_20() {
				T subject  = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000000100000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000000110111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_24() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000000001000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_28() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000000010000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_32() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000000000000100000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_40() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000000010000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000000011011111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_48() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000000000001000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000000000001101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1000000100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_64() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_96() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_112() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_128() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_160() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_192() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_0_224() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 64, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000001000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011001L,
				                   0b1000000000000000000000000000000000000000000000000000000001100110L);
				
				copyFrom(subject, 64, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001101101L,
				                   0b1000000000000000000000000000000000000000000000000000000100000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001101101L,
				                   0b1000000000000000000000000000000000000000000000000000000110110110L);
				
				copyFrom(subject, 64, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000011011101L,
				                   0b1000000000000000000000000000000000000000000000000000001000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000011011101L,
				                   0b1000000000000000000000000000000000000000000000000000001101110110L);
				
				copyFrom(subject, 64, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000100000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000000110111111110110L);
				
				copyFrom(subject, 64, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000000010000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111110110L);
				
				copyFrom(subject, 64, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000001101111111111101L,
				                   0b1000000000000000000000000000000000000000000000100000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000001101111111111101L,
				                   0b1000000000000000000000000000000000000000000000110111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_20() {
				T subject  = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000010000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000110111111111111111101L,
				                   0b1000000000000000000000000000000000000000011011111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_22() {
				T subject  = build(0b0000000000000000000000000000000000000000011011111111111111111101L,
				                   0b1000000000000000000000000000000000000001000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_23() {
				T subject  = build(0b0000000000000000000000000000000000000000110111111111111111111101L,
				                   0b1000000000000000000000000000000000000010000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000110111111111111111111101L,
				                   0b1000000000000000000000000000000000000011011111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_28() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000001000000000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000001101111111111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_30() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000000100000000000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_31() {
				T subject  = build(0b0000000000000000000000000000000011011111111111111111111111111101L,
				                   0b1000000000000000000000000000001000000000000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000011011111111111111111111111111101L,
				                   0b1000000000000000000000000000001101111111111111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_2_36() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111111111111101L,
				                   0b1000000000000000000000000100000000000000000000000000000000000010L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111101L,
				                   0b1000000000000000000000000110111111111111111111111111111111110110L);
				
				copyFrom(subject, 64, subject,  2,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000001000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111101L,
				                   0b1000000000000000000000000000000000000000000000000001101111011000L);
				
				copyFrom(subject, 64, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000010000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111101L,
				                   0b1000000000000000000000000000000000000000000000011011111111011000L);
				
				copyFrom(subject, 64, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000001000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111111101L,
				                   0b1000000000000000000000000000000000000000000001101111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_24() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000010000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000000011011111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_28() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000100000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_30() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000010000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111111101L,
				                   0b1000000000000000000000000000011011111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_40() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000100000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111101L,
				                   0b1000000000000000000110111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_44() {
				T subject  = build(0b0000000000000000000110111111111111111111111111111111111111111101L,
				                   0b1000000000000001000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111111101L,
				                   0b1000000000000001101111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_46() {
				T subject  = build(0b0000000000000000011011111111111111111111111111111111111111111101L,
				                   0b1000000000000100000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000000011011111111111111111111111111111111111111111101L,
				                   0b1000000000000110111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1001000000000000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1001101111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_60() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_62() {
				T subject  = build(0b0110111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0110111111111111111111111111111111111111111111111111111111111110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_4_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 64, subject,  4,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000001000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111101L,
				                   0b1000000000000000000000000000000000000001101111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_24() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000100000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111101L,
				                   0b1000000000000000000000000000000110111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_28() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000001000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111101L,
				                   0b1000000000000000000000000001101111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_32() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000010000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111101L,
				                   0b1000000000000000000000011011111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_48() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000100000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111101L,
				                   0b1000000110111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_60() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_88() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_92() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111111111L,
				                   0b1111111111111111111111111111101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_96() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_112() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_120() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_124() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111111011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_144() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111111111L,
				                   0b1111111111111111111111111111111111111111101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_160() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_176() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_184() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_224() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_240() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_248() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_8_288() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L,
				                   0b1000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 64, subject,  8, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000000010000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000000011001L);
				
				copyFrom(subject, 66, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000001000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000001101101L);
				
				copyFrom(subject, 66, subject,  0,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000000011011101L);
				
				copyFrom(subject, 66, subject,  0,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000001000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject, 66, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000000100000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				
				copyFrom(subject, 66, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000001101111111111101L);
				
				copyFrom(subject, 66, subject,  0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_20() {
				T subject  = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000000100000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000000110111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_22() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000000010000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000000011011111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_23() {
				T subject  = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000000100000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000000110111111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_28() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000000010000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_30() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111110110L,
				                   0b0000000000000000000000000000000001000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111110110L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_31() {
				T subject  = build(0b0000000000000000000000000000001101111111111111111111111111110110L,
				                   0b0000000000000000000000000000000010000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000001101111111111111111111111111110110L,
				                   0b0000000000000000000000000000000011011111111111111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_0_36() {
				T subject  = build(0b0000000000000000000000000110111111111111111111111111111111110110L,
				                   0b0000000000000000000000000001000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000110111111111111111111111111111111110110L,
				                   0b0000000000000000000000000001101111111111111111111111111111111101L);
				
				copyFrom(subject, 66, subject,  0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_4() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000001000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000001100110L,
				                   0b0000000000000000000000000000000000000000000000000000000001100110L);
				
				copyFrom(subject, 66, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_6() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000100000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110110110L,
				                   0b0000000000000000000000000000000000000000000000000000000110110110L);
				
				copyFrom(subject, 66, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_7() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000001000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001101110110L,
				                   0b0000000000000000000000000000000000000000000000000000001101110110L);
				
				copyFrom(subject, 66, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000100000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000000110111111110110L,
				                   0b0000000000000000000000000000000000000000000000000110111111110110L);
				
				copyFrom(subject, 66, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000010000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111110110L,
				                   0b0000000000000000000000000000000000000000000000011011111111110110L);
				
				copyFrom(subject, 66, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000100000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000000000110111111111110110L,
				                   0b0000000000000000000000000000000000000000000000110111111111110110L);
				
				copyFrom(subject, 66, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_20() {
				T subject  = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000010000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000000011011111111111111110110L,
				                   0b0000000000000000000000000000000000000000011011111111111111110110L);
				
				copyFrom(subject, 66, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_22() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000001000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111110110L,
				                   0b0000000000000000000000000000000000000001101111111111111111110110L);
				
				copyFrom(subject, 66, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_23() {
				T subject  = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000010000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000000000011011111111111111111110110L,
				                   0b0000000000000000000000000000000000000011011111111111111111110110L);
				
				copyFrom(subject, 66, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_66_2_28() {
				T subject  = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000001000000000000000000000000000010L);
				T expected = build(0b0000000000000000000000000000000001101111111111111111111111110110L,
				                   0b0000000000000000000000000000000001101111111111111111111111110110L);
				
				copyFrom(subject, 66, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000000000100000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000000000110111101L);
				
				copyFrom(subject, 68, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000000001000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000000001101111111101L);
				
				copyFrom(subject, 68, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000000000100000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000000000110111111111101L);
				
				copyFrom(subject, 68, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_24() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000000001000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_28() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000000010000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_30() {
				T subject  = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000000001000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000000001101111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_40() {
				T subject  = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000000010000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000000011011111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_44() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000000000100000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000000000110111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_46() {
				T subject  = build(0b0000000000000110111111111111111111111111111111111111111111011000L,
				                   0b0000000000000000010000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000110111111111111111111111111111111111111111111011000L,
				                   0b0000000000000000011011111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_56() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0000000100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_60() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111011000L,
				                   0b0001000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111011000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_62() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L,
				                   0b0100000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000110L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L,
				                   0b0110111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_0_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 68, subject,  0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000001000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001101111011000L,
				                   0b0000000000000000000000000000000000000000000000000001101111011000L);
				
				copyFrom(subject, 68, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_12() {
				T subject  = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000010000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000000011011111111011000L,
				                   0b0000000000000000000000000000000000000000000000011011111111011000L);
				
				copyFrom(subject, 68, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_14() {
				T subject  = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000001000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000000000000001101111111111011000L,
				                   0b0000000000000000000000000000000000000000000001101111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_24() {
				T subject  = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000010000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000000011011111111111111111111011000L,
				                   0b0000000000000000000000000000000000011011111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_28() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000100000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111011000L,
				                   0b0000000000000000000000000000000110111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_30() {
				T subject  = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000010000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000000000000011011111111111111111111111111011000L,
				                   0b0000000000000000000000000000011011111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_40() {
				T subject  = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000100000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000000000110111111111111111111111111111111111111011000L,
				                   0b0000000000000000000110111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_44() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000001000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111011000L,
				                   0b0000000000000001101111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_48() {
				T subject  = build(0b0000000000011011111111111111111111111111111111111111111111011000L,
				                   0b0000000000010000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0000000000011011111111111111111111111111111111111111111111011000L,
				                   0b0000000000011011111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_68_4_56() {
				T subject  = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0001000000000000000000000000000000000000000000000000000000001000L);
				T expected = build(0b0001101111111111111111111111111111111111111111111111111111011000L,
				                   0b0001101111111111111111111111111111111111111111111111111111011000L);
				
				copyFrom(subject, 68, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_16() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000010000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000011011111111111101L);
				
				copyFrom(subject, 72, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_24() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000001000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000001101111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_28() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000010000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000011011111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_32() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000100000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000110111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_48() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000001000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000001101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_56() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0001000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0001101111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_80() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_88() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_92() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111011111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_96() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_112() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_120() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_124() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111101111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_144() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111011111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_160() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_176() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_184() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_224() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_240() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_248() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_0_288() {
				T subject  = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000011011111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject, 72, subject,  0, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_16() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000001000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111110110000000L,
				                   0b0000000000000000000000000000000000000001101111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_24() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000100000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111110110000000L,
				                   0b0000000000000000000000000000000110111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_28() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000001000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111110110000000L,
				                   0b0000000000000000000000000001101111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_48() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000100000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111110110000000L,
				                   0b0000000110111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_56() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111110110000001L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110110000001L,
				                   0b1011111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_60() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110010000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110011011L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_80() {
				T subject  = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000000000001101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111101111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_88() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000000000110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_92() {
				T subject  = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000000000000000000000001101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111101111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_72_8_112() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000000L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110110000000L);
				
				copyFrom(subject, 72, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_32() {
				T subject  = build(0b0000000000000001101111111111111111111111111111011000000000000000L,
				                   0b0000000000000001000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111011000000000000000L,
				                   0b0000000000000001101111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_48() {
				T subject  = build(0b1011111111111111111111111111111111111111111111011000000000000001L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111011000000000000001L,
				                   0b1011111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_56() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000100000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000110111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_96() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_112() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_120() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_160() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_176() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_184() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_80_16_224() {
				T subject  = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000001101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111011000000000000000L);
				
				copyFrom(subject, 80, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}
			
			// test cases for boundaries
			
			@Test public void copyFrom_0_0__16__8_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -16, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__16_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject, -16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__8_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8_0_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8_8_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0__8_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   0, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_0_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   0, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_8_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   0, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8__8_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_0_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_8_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_16_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject,  16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16_8_0() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  16, subject,   8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__32__16_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -32, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__24__16_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -24, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__24__8_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -24, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__32_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -16, subject, -32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__24_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -16, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__16_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -16, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__8_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -16, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16_0_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -16, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16_8_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -16, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__24_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__16_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__8_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8_0_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8_8_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0__16_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   0, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0__8_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   0, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_0_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   0, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_8_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   0, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_16_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   0, subject,  16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8__16_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8__8_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_0_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_8_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_16_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject,  16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_24_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject,  24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16_0_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  16, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16_8_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  16, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_24_8_8() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  24, subject,   8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__1__24_9() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -1, subject, -24,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__1_8_9() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -1, subject,   8,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__1_16_9() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -1, subject,  16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__4__16_12() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -4, subject, -16,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_4__8_12() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   4, subject,  -8,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_9__7_15() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   9, subject,  -7,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__32__24_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -32, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__32__8_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -32, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__24__32_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -24, subject, -32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__24__16_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -24, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__24__8_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -24, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__24_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -16, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__8_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -16, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__16_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__8_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8_0_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject,   0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0__8_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   0, subject,  -8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_0_8_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   0, subject,   8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_0_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject,   0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_8_16_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   8, subject,  16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_16_8_16() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  16, subject,   8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__9__25_17() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -9, subject, -25,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__1_8_17() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -1, subject,   8,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0_1__8_23() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,   1, subject,  -8,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__32__16_24() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -32, subject, -16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__16__8_24() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject, -16, subject,  -8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_0_0__8__16_24() {
				T subject  = build();
				T expected = build();
				
				copyFrom(subject,  -8, subject, -16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -16, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  -8, subject, -16,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__8_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  -8, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_0_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  -8, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_56_0() {
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  -8, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_64_0() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  -8, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_72_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  -8, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__8_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,   0, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_0_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,   0, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_56_0() {
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000110000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,   0, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_64_0() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,   0, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_72_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,   0, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_56_0() {
				T subject  = build(0b0000000110000001100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110000001100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  48, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56__8_0() {
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_0_0() {
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000110000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  56, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_48_0() {
				T subject  = build(0b0000000110000001100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110000001100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  48,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_56_0() {
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_64_0() {
				T subject  = build(0b1000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_72_0() {
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64__8_0() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_0_0() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  64, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_56_0() {
				T subject  = build(0b1000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_64_0() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_72_0() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72__8_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  -8,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_0_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  72, subject,   0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_56_0() {
				T subject  = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  56,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_64_0() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_72_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_80_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  80,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_80_72_0() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  80, subject,  72,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__32__16_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -32, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24__16_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -24, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24__8_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject, -24, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__32_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -16, subject, -32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__24_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -16, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__16_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -16, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject, -16, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16_48_8() {
				T subject  = build(0b0000000100000000100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000100000000100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -16, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16_56_8() {
				T subject  = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -16, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16_64_8() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -16, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16_72_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -16, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__24_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  -8, subject, -24,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  -8, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__8_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  -8, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_48_8() {
				T subject  = build(0b0000000100000000100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000100000000100000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  -8, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_56_8() {
				T subject  = build(0b0000000010000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000010000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  -8, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_64_8() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  -8, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_72_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  -8, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_32_48_8() {
				T subject  = build(0b0000000100000000100000011011110110000000000000000000000000000000L);
				T expected = build(0b0000000110111101100000011011110110000000000000000000000000000000L);
				
				copyFrom(subject,  32, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_40_48_8() {
				T subject  = build(0b0000000100000001101111011000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111101101111011000000000000000000000000000000000000000L);
				
				copyFrom(subject,  40, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_40_56_8() {
				T subject  = build(0b0000000010000001101111011000000000000000000000000000000000000000L);
				T expected = build(0b1011110110000001101111011000000000000000000000000000000000000000L);
				
				copyFrom(subject,  40, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48__16_8() {
				T subject  = build(0b0000000110111101100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111101100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  48, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48__8_8() {
				T subject  = build(0b0000000110111101100000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000110111101100000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  48, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_32_8() {
				T subject  = build(0b0000000110111101100000010000000010000000000000000000000000000000L);
				T expected = build(0b0000000110111101100000011011110110000000000000000000000000000000L);
				
				copyFrom(subject,  48, subject,  32,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_40_8() {
				T subject  = build(0b0000000110111101100000001000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111101101111011000000000000000000000000000000000000000L);
				
				copyFrom(subject,  48, subject,  40,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_48_8() {
				T subject  = build(0b0000000110111101100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111101100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  48, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_56_8() {
				T subject  = build(0b0000000110111101100000000000000000000000000000000000000000000000L);
				T expected = build(0b1011110110111101100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  48, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_64_8() {
				T subject  = build(0b1000000110111101100000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000110111101100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  48, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_72_8() {
				T subject  = build(0b0000000110111101100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000110111101100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  48, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56__16_8() {
				T subject  = build(0b1011110110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011110110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56__8_8() {
				T subject  = build(0b1011110110000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1011110110000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  56, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_40_8() {
				T subject  = build(0b1011110110000001000000001000000000000000000000000000000000000000L);
				T expected = build(0b1011110110000001101111011000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  40,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_48_8() {
				T subject  = build(0b1011110110000000100000000000000000000000000000000000000000000000L);
				T expected = build(0b1011110110111101100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_56_8() {
				T subject  = build(0b1011110110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011110110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_64_8() {
				T subject  = build(0b1011110110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011110110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_72_8() {
				T subject  = build(0b1011110110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1011110110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64__16_8() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64__8_8() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  64, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_0_8() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000100000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000100000000L);
				
				copyFrom(subject,  64, subject,   0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_48_8() {
				T subject  = build(0b1000000100000000100000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000100000000100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_56_8() {
				T subject  = build(0b1000000010000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_64_8() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_72_8() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_80_8() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72__16_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject, -16,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72__8_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  72, subject,  -8,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_48_8() {
				T subject  = build(0b0000000100000000100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000100000000100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  48,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_56_8() {
				T subject  = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  56,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_64_8() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_72_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_80_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  80,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_88_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  88,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_80_64_8() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  80, subject,  64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_80_72_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  80, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_88_72_8() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  88, subject,  72,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63__16_9() {
				T subject  = build(0b1100000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1100000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  63, subject, -16,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63__9_9() {
				T subject  = build(0b1100000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b1100000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject,  63, subject,  -9,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63_40_9() {
				T subject  = build(0b1100000000000010000000001000000000000000000000000000000000000000L);
				T expected = build(0b1100000000000010000000011000000000000000000000000000000000000000L);
				
				copyFrom(subject,  63, subject,  40,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63_72_9() {
				T subject  = build(0b1100000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1100000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  63, subject,  72,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63_80_9() {
				T subject  = build(0b1100000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1100000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  63, subject,  80,   9);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_60_48_12() {
				T subject  = build(0b1101100000000000100000000000000000000000000000000000000000000000L);
				T expected = build(0b1101000000001101100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  60, subject,  48,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_68_56_12() {
				T subject  = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  68, subject,  56,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_65_0_15() {
				T subject  = build(0b0000000000000000000000000000000000000000000000001000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000001000000000000000L);
				
				copyFrom(subject,  65, subject,   0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_73_57_15() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  73, subject,  57,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__32__24_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -32, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24__32_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -24, subject, -32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24__16_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject, -24, subject, -16,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24_56_16() {
				T subject  = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -24, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__24_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject, -16, subject, -24,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16_56_16() {
				T subject  = build(0b0000000010000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000010000000000000000000000000000000000000000000000000000001L);
				
				copyFrom(subject, -16, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_32_40_16() {
				T subject  = build(0b0000000100000001101111111111110110000000000000000000000000000000L);
				T expected = build(0b0000000110111111111111011111110110000000000000000000000000000000L);
				
				copyFrom(subject,  32, subject,  40,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_32_56_16() {
				T subject  = build(0b0000000010000001101111111111110110000000000000000000000000000000L);
				T expected = build(0b1111110110000001101111111111110110000000000000000000000000000000L);
				
				copyFrom(subject,  32, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_40_32_16() {
				T subject  = build(0b0000000110111111111111011000000010000000000000000000000000000000L);
				T expected = build(0b0000000110111111101111111111110110000000000000000000000000000000L);
				
				copyFrom(subject,  40, subject,  32,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_40_48_16() {
				T subject  = build(0b0000000110111111111111011000000000000000000000000000000000000000L);
				T expected = build(0b1011111111111101111111011000000000000000000000000000000000000000L);
				
				copyFrom(subject,  40, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_40_56_16() {
				T subject  = build(0b0000000110111111111111011000000000000000000000000000000000000000L);
				T expected = build(0b1111110110111111111111011000000000000000000000000000000000000000L);
				
				copyFrom(subject,  40, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_40_16() {
				T subject  = build(0b1011111111111101100000001000000000000000000000000000000000000000L);
				T expected = build(0b1011111110111111111111011000000000000000000000000000000000000000L);
				
				copyFrom(subject,  48, subject,  40,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_56_16() {
				T subject  = build(0b1011111111111101100000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110111111101100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  48, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_48_16() {
				T subject  = build(0b1111110110000000100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000011111101100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  48,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_56_16() {
				T subject  = build(0b1111110110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_64_16() {
				T subject  = build(0b1111110110000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110110000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_56_16() {
				T subject  = build(0b1000000010000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject,  56,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_64_72_16() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  64, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_64_16() {
				T subject  = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_72_80_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  72, subject,  80,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_80_72_16() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  80, subject,  72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_55_39_17() {
				T subject  = build(0b1111111011000000000000000100000000000000000000000000000000000000L);
				T expected = build(0b1111111000000000111111101100000000000000000000000000000000000000L);
				
				copyFrom(subject,  55, subject,  39,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_63_72_17() {
				T subject  = build(0b1100000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b1100000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  63, subject,  72,  17);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_65_56_23() {
				T subject  = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000010000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  65, subject,  56,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_32_48_24() {
				T subject  = build(0b0000000110111111111111111111110110000000000000000000000000000000L);
				T expected = build(0b1111111111111101111111111111110110000000000000000000000000000000L);
				
				copyFrom(subject,  32, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_48_56_24() {
				T subject  = build(0b1111111111111101100000000000000000000000000000000000000000000000L);
				T expected = build(0b1111110111111101100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  48, subject,  56,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_56_48_24() {
				T subject  = build(0b1111110110000000100000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000011111101100000000000000000000000000000000000000000000000L);
				
				copyFrom(subject,  56, subject,  48,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_28_0_28() {
				T subject  = build(0b0000000110111111111111111111111111011000000000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111011011111111111111111111111101L);
				
				copyFrom(subject,  28, subject,   0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1_31_32() {
				T subject  = build(0b1000000000000000000000000000000011011111111111111111111111111110L);
				T expected = build(0b1101111111111111111111111111111001011111111111111111111111111110L);
				
				copyFrom(subject,  -1, subject,  31,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_32_32() {
				T subject  = build(0b0000000000000000000000000000000110111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111110110111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject,  32,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_24__8_32() {
				T subject  = build(0b0000000110111111111111111111111111111101100000000000000000000000L);
				T expected = build(0b0000000110111111111111111111111111111101101111111111111111111111L);
				
				copyFrom(subject,  24, subject,  -8,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_32_0_32() {
				T subject  = build(0b1011111111111111111111111111110110000000000000000000000000000000L);
				T expected = build(0b1011111111111111111111111111110110111111111111111111111111111101L);
				
				copyFrom(subject,  32, subject,   0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_36_0_36() {
				T subject  = build(0b1111111111111111111111111101100000000000000000000000000000000000L);
				T expected = build(0b1111111111111111111111111101000000001111111111111111111111111101L);
				
				copyFrom(subject,  36, subject,   0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_15_48() {
				T subject  = build(0b1000000000000001101111111111111111111111111111111111111111111101L);
				T expected = build(0b1101111111111111111111111111111111111111111111101111111111111101L);
				
				copyFrom(subject,   0, subject,  15,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_56_48() {
				T subject  = build(0b0000000010000001101111111111111111111111111111111111111111111101L);
				T expected = build(0b1111110110000001101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject,  56,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_8_0_48() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000110111111101111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   8, subject,   0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_49_0_48() {
				T subject  = build(0b1111111111111011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111011000000000000000000000000000000000111111111111101L);
				
				copyFrom(subject,  49, subject,   0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1_14_49() {
				T subject  = build(0b1000000000000001101111111111111111111111111111111111111111111110L);
				T expected = build(0b1101111111111111111111111111111111111111111111110011111111111110L);
				
				copyFrom(subject,  -1, subject,  14,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1_56_49() {
				T subject  = build(0b0000000010000001101111111111111111111111111111111111111111111110L);
				T expected = build(0b1111110010000001101111111111111111111111111111111111111111111110L);
				
				copyFrom(subject,  -1, subject,  56,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_49__1_49() {
				T subject  = build(0b1111111111111011000000000000000000000000000000000000000000000000L);
				T expected = build(0b1111111111111011000000000000000000000000000000000011111111111110L);
				
				copyFrom(subject,  49, subject,  -1,  49);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_1__8_55() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111011L);
				T expected = build(0b0000000110111111110111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,   1, subject,  -8,  55);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__64_0_56() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -64, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__56_0_56() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -56, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_0_56() {
				T subject  = build(0b0000000100000001101111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(subject,  -8, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__57_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject, -57,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__56_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject, -56,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__8_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111101111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,   0, subject,  -8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_0_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_8_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111110111111101L);
				
				copyFrom(subject,   0, subject,   8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_48_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1111111111111101111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject,  48,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_56_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1111110110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject,  56,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_64_56() {
				T subject  = build(0b1000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject,  64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_72_56() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject,  72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_8_0_56() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b1011111110111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   8, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_16_0_56() {
				T subject  = build(0b1111111111111111111111111111111111111111111111011000000000000000L);
				T expected = build(0b1111111100000000111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,  16, subject,   0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_64() {
				T subject  = build(0b0000000100000001101111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(subject, -16, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_64() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000110111111101111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,  -8, subject, -16,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__8_64() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,  -8, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_0_64() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(subject,  -8, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__8_64() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111110111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,   0, subject,  -8,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_0_64() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject,   0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__9__73_65() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000110111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,  -9, subject, -73,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__67_65() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(subject,  -1, subject, -67,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__66_65() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(subject,  -1, subject, -66,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__65_65() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(subject,  -1, subject, -65,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1_56_65() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111110011111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(subject,  -1, subject,  56,  65);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_1__7_71() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111011L);
				T expected = build(0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,   1, subject,  -7,  71);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__88__8_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -88, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__80__16_72() {
				T subject  = build(0b0000000100000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000100000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -80, subject, -16,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__80__8_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -80, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__80_0_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -80, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__72__8_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -72, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__72_0_72() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -72, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_72() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(subject, -16, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_72() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1011111110111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,  -8, subject, -16,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__8_72() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,  -8, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_0_72() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(subject,  -8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__73_72() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject, -73,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__72_72() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject, -72,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__8_72() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,   0, subject,  -8,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_0_72() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0_56_72() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b1111110111111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   0, subject,  56,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_8_0_72() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111110110000000L);
				T expected = build(0b0000000011111111111111111111111111111111111111111111111111111101L);
				
				copyFrom(subject,   8, subject,   0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__9__81_73() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1011111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,  -9, subject, -81,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__75_73() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(subject,  -1, subject, -75,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__74_73() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(subject,  -1, subject, -74,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__73_73() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(subject,  -1, subject, -73,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1__16_73() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111000000001111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,  -1, subject, -16,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__1_55_73() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111001111111111111111111111111111111111111111111111111111110L);
				
				copyFrom(subject,  -1, subject,  55,  73);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_1__8_79() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111011L);
				T expected = build(0b0000000001111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,   1, subject,  -8,  79);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__96__8_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -96, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__88__16_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -88, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__88__8_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -88, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__80__8_80() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -80, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__24__8_80() {
				T subject  = build(0b0000000110111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111110000000000000000L);
				
				copyFrom(subject, -24, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_80() {
				T subject  = build(0b1011111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(subject, -16, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_80() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,  -8, subject, -16,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__8_80() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,  -8, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8_0_80() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(subject,  -8, subject,   0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64_0__8_80() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111101L);
				T expected = build(0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,   0, subject,  -8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__9__89_81() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,  -9, subject, -89,  81);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__96__16_88() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				
				copyFrom(subject, -96, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__16__8_88() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				
				copyFrom(subject, -16, subject,  -8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void copyFrom_64_64__8__16_88() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0000000011111111111111111111111111111111111111111111111111111111L);
				
				copyFrom(subject,  -8, subject, -16,  88);
				assertThat(subject, is(equalTo(expected)));
			}
		}

		public static abstract class CopyFromSameSource<T> extends SafeCopyFromSameSource<T> {
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__8_0() { super.copyFrom_0_0__16__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__16_0() { super.copyFrom_0_0__8__16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__8_0() { super.copyFrom_0_0__8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8_0_0() { super.copyFrom_0_0__8_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8_8_0() { super.copyFrom_0_0__8_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0__8_0() { super.copyFrom_0_0_0__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0_8_0() { super.copyFrom_0_0_0_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8__8_0() { super.copyFrom_0_0_8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_0_0() { super.copyFrom_0_0_8_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_8_0() { super.copyFrom_0_0_8_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_16_0() { super.copyFrom_0_0_8_16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_16_8_0() { super.copyFrom_0_0_16_8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__32__16_8() { super.copyFrom_0_0__32__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__24__16_8() { super.copyFrom_0_0__24__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__24__8_8() { super.copyFrom_0_0__24__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__32_8() { super.copyFrom_0_0__16__32_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__24_8() { super.copyFrom_0_0__16__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__16_8() { super.copyFrom_0_0__16__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__8_8() { super.copyFrom_0_0__16__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16_0_8() { super.copyFrom_0_0__16_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16_8_8() { super.copyFrom_0_0__16_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__24_8() { super.copyFrom_0_0__8__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__16_8() { super.copyFrom_0_0__8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__8_8() { super.copyFrom_0_0__8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8_0_8() { super.copyFrom_0_0__8_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8_8_8() { super.copyFrom_0_0__8_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0__16_8() { super.copyFrom_0_0_0__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0__8_8() { super.copyFrom_0_0_0__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0_0_8() { super.copyFrom_0_0_0_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0_8_8() { super.copyFrom_0_0_0_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0_16_8() { super.copyFrom_0_0_0_16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8__16_8() { super.copyFrom_0_0_8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8__8_8() { super.copyFrom_0_0_8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_0_8() { super.copyFrom_0_0_8_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_8_8() { super.copyFrom_0_0_8_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_16_8() { super.copyFrom_0_0_8_16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_24_8() { super.copyFrom_0_0_8_24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_16_0_8() { super.copyFrom_0_0_16_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_16_8_8() { super.copyFrom_0_0_16_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_24_8_8() { super.copyFrom_0_0_24_8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__1__24_9() { super.copyFrom_0_0__1__24_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__1_8_9() { super.copyFrom_0_0__1_8_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__1_16_9() { super.copyFrom_0_0__1_16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__4__16_12() { super.copyFrom_0_0__4__16_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_4__8_12() { super.copyFrom_0_0_4__8_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_9__7_15() { super.copyFrom_0_0_9__7_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__32__24_16() { super.copyFrom_0_0__32__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__32__8_16() { super.copyFrom_0_0__32__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__24__32_16() { super.copyFrom_0_0__24__32_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__24__16_16() { super.copyFrom_0_0__24__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__24__8_16() { super.copyFrom_0_0__24__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__24_16() { super.copyFrom_0_0__16__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__8_16() { super.copyFrom_0_0__16__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__16_16() { super.copyFrom_0_0__8__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__8_16() { super.copyFrom_0_0__8__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8_0_16() { super.copyFrom_0_0__8_0_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0__8_16() { super.copyFrom_0_0_0__8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_0_8_16() { super.copyFrom_0_0_0_8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_0_16() { super.copyFrom_0_0_8_0_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_8_16_16() { super.copyFrom_0_0_8_16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_16_8_16() { super.copyFrom_0_0_16_8_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__9__25_17() { super.copyFrom_0_0__9__25_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__1_8_17() { super.copyFrom_0_0__1_8_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0_1__8_23() { super.copyFrom_0_0_1__8_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__32__16_24() { super.copyFrom_0_0__32__16_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__16__8_24() { super.copyFrom_0_0__16__8_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_0_0__8__16_24() { super.copyFrom_0_0__8__16_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_0() { super.copyFrom_64_64__16__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_0() { super.copyFrom_64_64__8__16_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__8_0() { super.copyFrom_64_64__8__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_0_0() { super.copyFrom_64_64__8_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_56_0() { super.copyFrom_64_64__8_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_64_0() { super.copyFrom_64_64__8_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_72_0() { super.copyFrom_64_64__8_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__8_0() { super.copyFrom_64_64_0__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_72_0() { super.copyFrom_64_64_0_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56__8_0() { super.copyFrom_64_64_56__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_72_0() { super.copyFrom_64_64_56_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64__8_0() { super.copyFrom_64_64_64__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_72_0() { super.copyFrom_64_64_64_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72__8_0() { super.copyFrom_64_64_72__8_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_0_0() { super.copyFrom_64_64_72_0_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_56_0() { super.copyFrom_64_64_72_56_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_64_0() { super.copyFrom_64_64_72_64_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_72_0() { super.copyFrom_64_64_72_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_80_0() { super.copyFrom_64_64_72_80_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_80_72_0() { super.copyFrom_64_64_80_72_0(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__32__16_8() { super.copyFrom_64_64__32__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24__16_8() { super.copyFrom_64_64__24__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24__8_8() { super.copyFrom_64_64__24__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__32_8() { super.copyFrom_64_64__16__32_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__24_8() { super.copyFrom_64_64__16__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__16_8() { super.copyFrom_64_64__16__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_8() { super.copyFrom_64_64__16__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16_48_8() { super.copyFrom_64_64__16_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16_56_8() { super.copyFrom_64_64__16_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16_64_8() { super.copyFrom_64_64__16_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16_72_8() { super.copyFrom_64_64__16_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__24_8() { super.copyFrom_64_64__8__24_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_8() { super.copyFrom_64_64__8__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__8_8() { super.copyFrom_64_64__8__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_48_8() { super.copyFrom_64_64__8_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_56_8() { super.copyFrom_64_64__8_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_64_8() { super.copyFrom_64_64__8_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_72_8() { super.copyFrom_64_64__8_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48__16_8() { super.copyFrom_64_64_48__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48__8_8() { super.copyFrom_64_64_48__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48_64_8() { super.copyFrom_64_64_48_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48_72_8() { super.copyFrom_64_64_48_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56__16_8() { super.copyFrom_64_64_56__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56__8_8() { super.copyFrom_64_64_56__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_64_8() { super.copyFrom_64_64_56_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_72_8() { super.copyFrom_64_64_56_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64__16_8() { super.copyFrom_64_64_64__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64__8_8() { super.copyFrom_64_64_64__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_0_8() { super.copyFrom_64_64_64_0_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_48_8() { super.copyFrom_64_64_64_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_56_8() { super.copyFrom_64_64_64_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_64_8() { super.copyFrom_64_64_64_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_72_8() { super.copyFrom_64_64_64_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_80_8() { super.copyFrom_64_64_64_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72__16_8() { super.copyFrom_64_64_72__16_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72__8_8() { super.copyFrom_64_64_72__8_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_48_8() { super.copyFrom_64_64_72_48_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_56_8() { super.copyFrom_64_64_72_56_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_64_8() { super.copyFrom_64_64_72_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_72_8() { super.copyFrom_64_64_72_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_80_8() { super.copyFrom_64_64_72_80_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_88_8() { super.copyFrom_64_64_72_88_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_80_64_8() { super.copyFrom_64_64_80_64_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_80_72_8() { super.copyFrom_64_64_80_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_88_72_8() { super.copyFrom_64_64_88_72_8(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63__16_9() { super.copyFrom_64_64_63__16_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63__9_9() { super.copyFrom_64_64_63__9_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63_40_9() { super.copyFrom_64_64_63_40_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63_72_9() { super.copyFrom_64_64_63_72_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63_80_9() { super.copyFrom_64_64_63_80_9(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_60_48_12() { super.copyFrom_64_64_60_48_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_68_56_12() { super.copyFrom_64_64_68_56_12(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_65_0_15() { super.copyFrom_64_64_65_0_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_73_57_15() { super.copyFrom_64_64_73_57_15(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__32__24_16() { super.copyFrom_64_64__32__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24__32_16() { super.copyFrom_64_64__24__32_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24__16_16() { super.copyFrom_64_64__24__16_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24_56_16() { super.copyFrom_64_64__24_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__24_16() { super.copyFrom_64_64__16__24_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16_56_16() { super.copyFrom_64_64__16_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_32_56_16() { super.copyFrom_64_64_32_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_40_56_16() { super.copyFrom_64_64_40_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48_56_16() { super.copyFrom_64_64_48_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_48_16() { super.copyFrom_64_64_56_48_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_56_16() { super.copyFrom_64_64_56_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_64_16() { super.copyFrom_64_64_56_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_56_16() { super.copyFrom_64_64_64_56_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_64_72_16() { super.copyFrom_64_64_64_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_64_16() { super.copyFrom_64_64_72_64_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_72_80_16() { super.copyFrom_64_64_72_80_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_80_72_16() { super.copyFrom_64_64_80_72_16(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_55_39_17() { super.copyFrom_64_64_55_39_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_63_72_17() { super.copyFrom_64_64_63_72_17(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_65_56_23() { super.copyFrom_64_64_65_56_23(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_32_48_24() { super.copyFrom_64_64_32_48_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_48_56_24() { super.copyFrom_64_64_48_56_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_56_48_24() { super.copyFrom_64_64_56_48_24(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1_31_32() { super.copyFrom_64_64__1_31_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_24__8_32() { super.copyFrom_64_64_24__8_32(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_36_0_36() { super.copyFrom_64_64_36_0_36(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_56_48() { super.copyFrom_64_64_0_56_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_49_0_48() { super.copyFrom_64_64_49_0_48(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1_14_49() { super.copyFrom_64_64__1_14_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1_56_49() { super.copyFrom_64_64__1_56_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_49__1_49() { super.copyFrom_64_64_49__1_49(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_1__8_55() { super.copyFrom_64_64_1__8_55(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__64_0_56() { super.copyFrom_64_64__64_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__56_0_56() { super.copyFrom_64_64__56_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_0_56() { super.copyFrom_64_64__8_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__57_56() { super.copyFrom_64_64_0__57_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__56_56() { super.copyFrom_64_64_0__56_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__8_56() { super.copyFrom_64_64_0__8_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_48_56() { super.copyFrom_64_64_0_48_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_56_56() { super.copyFrom_64_64_0_56_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_64_56() { super.copyFrom_64_64_0_64_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_72_56() { super.copyFrom_64_64_0_72_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_16_0_56() { super.copyFrom_64_64_16_0_56(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_64() { super.copyFrom_64_64__16__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_64() { super.copyFrom_64_64__8__16_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__8_64() { super.copyFrom_64_64__8__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_0_64() { super.copyFrom_64_64__8_0_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__8_64() { super.copyFrom_64_64_0__8_64(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__9__73_65() { super.copyFrom_64_64__9__73_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__67_65() { super.copyFrom_64_64__1__67_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__66_65() { super.copyFrom_64_64__1__66_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__65_65() { super.copyFrom_64_64__1__65_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1_56_65() { super.copyFrom_64_64__1_56_65(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_1__7_71() { super.copyFrom_64_64_1__7_71(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__88__8_72() { super.copyFrom_64_64__88__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__80__16_72() { super.copyFrom_64_64__80__16_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__80__8_72() { super.copyFrom_64_64__80__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__80_0_72() { super.copyFrom_64_64__80_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__72__8_72() { super.copyFrom_64_64__72__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__72_0_72() { super.copyFrom_64_64__72_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_72() { super.copyFrom_64_64__16__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_72() { super.copyFrom_64_64__8__16_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__8_72() { super.copyFrom_64_64__8__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_0_72() { super.copyFrom_64_64__8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__73_72() { super.copyFrom_64_64_0__73_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__72_72() { super.copyFrom_64_64_0__72_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__8_72() { super.copyFrom_64_64_0__8_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_0_72() { super.copyFrom_64_64_0_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0_56_72() { super.copyFrom_64_64_0_56_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_8_0_72() { super.copyFrom_64_64_8_0_72(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__9__81_73() { super.copyFrom_64_64__9__81_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__75_73() { super.copyFrom_64_64__1__75_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__74_73() { super.copyFrom_64_64__1__74_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__73_73() { super.copyFrom_64_64__1__73_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1__16_73() { super.copyFrom_64_64__1__16_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__1_55_73() { super.copyFrom_64_64__1_55_73(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_1__8_79() { super.copyFrom_64_64_1__8_79(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__96__8_80() { super.copyFrom_64_64__96__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__88__16_80() { super.copyFrom_64_64__88__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__88__8_80() { super.copyFrom_64_64__88__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__80__8_80() { super.copyFrom_64_64__80__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__24__8_80() { super.copyFrom_64_64__24__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_80() { super.copyFrom_64_64__16__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_80() { super.copyFrom_64_64__8__16_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__8_80() { super.copyFrom_64_64__8__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8_0_80() { super.copyFrom_64_64__8_0_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64_0__8_80() { super.copyFrom_64_64_0__8_80(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__9__89_81() { super.copyFrom_64_64__9__89_81(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__96__16_88() { super.copyFrom_64_64__96__16_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__16__8_88() { super.copyFrom_64_64__16__8_88(); }
			@Override @Test(expected = ArrayIndexOutOfBoundsException.class) public void copyFrom_64_64__8__16_88() { super.copyFrom_64_64__8__16_88(); }
		}
	}
	
	@RunWith(Enclosed.class)
	public static class ByteArray extends ByteArrayBuilder {
		public static class CopyFromDifferentSource extends Cases.CopyFromDifferentSource<byte[]> {
			@Override protected void copyFrom(byte[] source, int srcPos, byte[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public byte[] build(long... d) { return build0(d); }
		}
		
		public static class CopyFromSameSource extends Cases.CopyFromSameSource<byte[]> {
			@Override protected void copyFrom(byte[] source, int srcPos, byte[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public byte[] build(long... d) { return build0(d); }
		}
	}

	@RunWith(Enclosed.class)
	public static class CharArray extends CharArrayBuilder {
		public static class CopyFromDifferentSource extends Cases.CopyFromDifferentSource<char[]> {
			@Override protected void copyFrom(char[] source, int srcPos, char[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public char[] build(long... d) { return build0(d); }
		}
	
		public static class CopyFromSameSource extends Cases.CopyFromSameSource<char[]> {
			@Override protected void copyFrom(char[] source, int srcPos, char[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public char[] build(long... d) { return build0(d); }
		}
	}

	@RunWith(Enclosed.class)
	public static class ShortArray extends ShortArrayBuilder {
		public static class CopyFromDifferentSource extends Cases.CopyFromDifferentSource<short[]> {
			@Override protected void copyFrom(short[] source, int srcPos, short[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public short[] build(long... d) { return build0(d); }
		}
		
		public static class CopyFromSameSource extends Cases.CopyFromSameSource<short[]> {
			@Override protected void copyFrom(short[] source, int srcPos, short[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public short[] build(long... d) { return build0(d); }
		}
	}

	@RunWith(Enclosed.class)
	public static class IntArray extends IntArrayBuilder {
		public static class CopyFromDifferentSource extends Cases.CopyFromDifferentSource<int[]> {
			@Override protected void copyFrom(int[] source, int srcPos, int[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public int[] build(long... d) { return build0(d); }
		}
		
		public static class CopyFromSameSource extends Cases.CopyFromSameSource<int[]> {
			@Override protected void copyFrom(int[] source, int srcPos, int[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public int[] build(long... d) { return build0(d); }
		}
	}

	@RunWith(Enclosed.class)
	public static class LongArray extends LongArrayBuilder {
		public static class CopyFromDifferentSource extends Cases.CopyFromDifferentSource<long[]> {
			@Override protected void copyFrom(long[] source, int srcPos, long[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public long[] build(long... d) { return build0(d); }
		}
		
		public static class CopyFromSameSource extends Cases.CopyFromSameSource<long[]> {
			@Override protected void copyFrom(long[] source, int srcPos, long[] dest, int destPos, int length) {
				Copy.copyFrom(source, srcPos, dest, destPos, length);
			}
			@Override public long[] build(long... d) { return build0(d); }
		}
	}
}
