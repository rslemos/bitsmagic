/*******************************************************************************
 * BEGIN COPYRIGHT NOTICE
 * 
 * The MIT License (MIT)
 * 
 * Copyright (c) 2016 Rodrigo Lemos
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * END COPYRIGHT NOTICE
 *******************************************************************************/
package br.eti.rslemos.bitsmagic;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.experimental.runners.Enclosed;
import org.junit.runner.RunWith;

import br.eti.rslemos.bitsmagic.StorageBuilder.ByteArrayBuilder;
import br.eti.rslemos.bitsmagic.StorageBuilder.CharArrayBuilder;
import br.eti.rslemos.bitsmagic.StorageBuilder.IntArrayBuilder;
import br.eti.rslemos.bitsmagic.StorageBuilder.ShortArrayBuilder;

@RunWith(Enclosed.class)
public class XorUnitTest {
	@Ignore
	public static abstract class Cases {
		public static abstract class XorFromDifferentSource<T> implements StorageBuilder<T> {
			protected abstract void xorFrom(T source, int srcPos, T dest, int destPos, int length);
				
			@Test public void xorFrom_0_0_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				xorFrom(source,  0, subject,  0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101001L);
				
				xorFrom(source,  0, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000001L);
				
				xorFrom(source,  0, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000001L);
				
				xorFrom(source,  0, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000001L);
				
				xorFrom(source,  0, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_20() {
				T source   = build(0b0000000000000000000000000000000000000000000111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111001111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111010000000000000000001L);
				
				xorFrom(source,  0, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_24() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000001L);
				
				xorFrom(source,  0, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_28() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_32() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_40() {
				T source   = build(0b0000000000000000000000011111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111100111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111101000000000000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_48() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_56() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_96() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_112() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_128() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_160() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_192() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_0_224() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  0, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_2_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000001111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111110011001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111110100101L);
				
				xorFrom(source,  2, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_2_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000101L);
				
				xorFrom(source,  2, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_2_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000001111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111110011111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111110100000101L);
				
				xorFrom(source,  2, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_2_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111001111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111010000000000101L);
				
				xorFrom(source,  2, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_2_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000101L);
				
				xorFrom(source,  2, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_2_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111001111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111010000000000000101L);
				
				xorFrom(source,  2, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_2_20() {
				T source   = build(0b0000000000000000000000000000000000000000011111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111100111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111101000000000000000000101L);
				
				xorFrom(source,  2, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_2_22() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000101L);
				
				xorFrom(source,  2, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_2_23() {
				T source   = build(0b0000000000000000000000000000000000000011111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111100111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111101000000000000000000000101L);
				
				xorFrom(source,  2, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_2_28() {
				T source   = build(0b0000000000000000000000000000000001111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111110011111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111110100000000000000000000000000101L);
				
				xorFrom(source,  2, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_4_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000010111L);
				
				xorFrom(source,  4, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_4_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000010111L);
				
				xorFrom(source,  4, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_4_14() {
				T source   = build(0b0000000000000000000000000000000000000000000001111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111110100000000000010111L);
				
				xorFrom(source,  4, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_4_24() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000010111L);
				
				xorFrom(source,  4, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_4_28() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000010111L);
				
				xorFrom(source,  4, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_4_30() {
				T source   = build(0b0000000000000000000000000000011111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111101000000000000000000000000000010111L);
				
				xorFrom(source,  4, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_4_40() {
				T source   = build(0b0000000000000000000111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111001111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111010000000000000000000000000000000000000010111L);
				
				xorFrom(source,  4, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_4_44() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  4, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_4_48() {
				T source   = build(0b0000000000011111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111100111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111101000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  4, subject,  4,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_4_56() {
				T source   = build(0b0001111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1110011111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1110100000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  4, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_8_16() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000101111111L);
				
				xorFrom(source,  8, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_8_24() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000101111111L);
				
				xorFrom(source,  8, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_8_28() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000101111111L);
				
				xorFrom(source,  8, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_8_48() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  8, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_8_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  8, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_8_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  8, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_8_80() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  8, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_8_88() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  8, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_8_92() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  8, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_8_112() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  8, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_16_32() {
				T source   = build(0b0000000000000001111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 16, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_16_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 16, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_16_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 16, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_16_96() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 16, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_16_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 16, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_16_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 16, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_16_160() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 16, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_16_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 16, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_16_184() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 16, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_16_224() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 16, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111110011001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111110100101L);
				
				xorFrom(source,  0, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000001111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000101L);
				
				xorFrom(source,  0, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000011111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111110011111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111110100000101L);
				
				xorFrom(source,  0, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111001111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111010000000000101L);
				
				xorFrom(source,  0, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000101L);
				
				xorFrom(source,  0, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000001111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111001111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111010000000000000101L);
				
				xorFrom(source,  0, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_20() {
				T source   = build(0b0000000000000000000000000000000000000000000111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111100111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111101000000000000000000101L);
				
				xorFrom(source,  0, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_22() {
				T source   = build(0b0000000000000000000000000000000000000000011111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000101L);
				
				xorFrom(source,  0, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_23() {
				T source   = build(0b0000000000000000000000000000000000000000111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111100111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111101000000000000000000000101L);
				
				xorFrom(source,  0, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_28() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111110011111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111110100000000000000000000000000101L);
				
				xorFrom(source,  0, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_30() {
				T source   = build(0b0000000000000000000000000000000001111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000101L);
				
				xorFrom(source,  0, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_31() {
				T source   = build(0b0000000000000000000000000000000011111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111110011111111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111110100000000000000000000000000000101L);
				
				xorFrom(source,  0, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_2_36() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111001111111111111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111010000000000000000000000000000000000101L);
				
				xorFrom(source,  0, subject,  2,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000010111L);
				
				xorFrom(source,  0, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000010111L);
				
				xorFrom(source,  0, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111110100000000000010111L);
				
				xorFrom(source,  0, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_24() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000010111L);
				
				xorFrom(source,  0, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_28() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000010111L);
				
				xorFrom(source,  0, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_30() {
				T source   = build(0b0000000000000000000000000000000001111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111101000000000000000000000000000010111L);
				
				xorFrom(source,  0, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_40() {
				T source   = build(0b0000000000000000000000011111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111001111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111010000000000000000000000000000000000000010111L);
				
				xorFrom(source,  0, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_44() {
				T source   = build(0b0000000000000000000111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  0, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_46() {
				T source   = build(0b0000000000000000011111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111001111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111010000000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  0, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_56() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1110011111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1110100000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  0, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_60() {
				T source   = build(0b0001111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  0, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_62() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  0, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_4_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  0, subject,  4,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000101111111L);
				
				xorFrom(source,  0, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_24() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_28() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_48() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_56() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_88() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_92() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_112() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_120() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_124() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  0, subject,  8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_32() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_48() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_96() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_112() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_160() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_176() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_184() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_224() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_240() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_248() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_16_288() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  0, subject, 16, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_20() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111001111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111010000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_32() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_40() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111100111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111101000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_64() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_96() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_128() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_160() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_192() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_64_224() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 64, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111110011001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111110100101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000011111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111110011111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111110100000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111001111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111010000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111001111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111010000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_20() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111100111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111101000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_22() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_23() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111100111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111101000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111110011111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111110100000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_30() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_31() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000011111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111110011111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111110100000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_66_36() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111001111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111010000000000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 66,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111110100000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_30() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111101000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_40() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111001111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111010000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_44() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_46() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000011111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111001111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111010000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1110011111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1110100000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_62() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_68_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 68,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_92() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_124() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_72_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 72, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_32() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_96() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_160() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_176() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_184() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_224() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_240() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_248() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_0_80_288() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  0, subject, 80, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000001111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101001L);
				
				xorFrom(source,  2, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111110011110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111110100001L);
				
				xorFrom(source,  2, subject,  0,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000001111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111100111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111101000001L);
				
				xorFrom(source,  2, subject,  0,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000001L);
				
				xorFrom(source,  2, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111001111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111010000000000001L);
				
				xorFrom(source,  2, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111110011111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111110100000000000001L);
				
				xorFrom(source,  2, subject,  0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_20() {
				T source   = build(0b0000000000000000000000000000000000000000011111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111001111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111010000000000000000001L);
				
				xorFrom(source,  2, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_22() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111100111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111101000000000000000000001L);
				
				xorFrom(source,  2, subject,  0,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_23() {
				T source   = build(0b0000000000000000000000000000000000000011111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111001111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111010000000000000000000001L);
				
				xorFrom(source,  2, subject,  0,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_28() {
				T source   = build(0b0000000000000000000000000000000001111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000000001L);
				
				xorFrom(source,  2, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_30() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111110011111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111110100000000000000000000000000001L);
				
				xorFrom(source,  2, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_31() {
				T source   = build(0b0000000000000000000000000000001111111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111100111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111101000000000000000000000000000001L);
				
				xorFrom(source,  2, subject,  0,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_0_36() {
				T source   = build(0b0000000000000000000000000111111111111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000000000001L);
				
				xorFrom(source,  2, subject,  0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_4_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111100111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111101000010111L);
				
				xorFrom(source,  2, subject,  4,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_4_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000001111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111001111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111010000010111L);
				
				xorFrom(source,  2, subject,  4,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_4_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111110100000000000010111L);
				
				xorFrom(source,  2, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_4_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111100111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111101000000000000010111L);
				
				xorFrom(source,  2, subject,  4,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_4_22() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111001111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111010000000000000000000010111L);
				
				xorFrom(source,  2, subject,  4,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_4_23() {
				T source   = build(0b0000000000000000000000000000000000000011111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111110011111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111110100000000000000000000010111L);
				
				xorFrom(source,  2, subject,  4,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_4_30() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111101000000000000000000000000000010111L);
				
				xorFrom(source,  2, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_4_31() {
				T source   = build(0b0000000000000000000000000000001111111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111001111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111010000000000000000000000000000010111L);
				
				xorFrom(source,  2, subject,  4,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111110011110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111110100001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111100111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111101000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111001111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111010000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111110011111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111110100000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_20() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111001111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111010000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_22() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111100111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111101000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_23() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000011111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111001111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111010000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_30() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111110011111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111110100000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_31() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001111111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111100111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111101000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_64_36() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000111111111111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 64,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_66_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111110011001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111110100101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 66,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_66_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_66_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111110011111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111110100000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_66_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111001111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111010000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 66,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_66_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_66_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111001111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111010000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_66_20() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111100111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111101000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 66,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_66_22() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_66_23() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000011111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111100111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111101000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_66_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111110011111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111110100000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 66,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_68_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111100111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111101000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 68,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_68_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111001111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111010000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 68,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_68_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111110100000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_68_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111111111100111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111101000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 68,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_68_22() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111111001111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111010000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 68,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_68_23() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000011111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111111111110011111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111110100000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 68,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_68_30() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111101000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_2_68_31() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001111111111111111111111111111111100L);
				T subject  = build(0b1111111111111111111111111111001111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111010000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  2, subject, 68,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000001L);
				
				xorFrom(source,  4, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000001L);
				
				xorFrom(source,  4, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_14() {
				T source   = build(0b0000000000000000000000000000000000000000000001111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111001111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111010000000000001L);
				
				xorFrom(source,  4, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_24() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000001L);
				
				xorFrom(source,  4, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_28() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000000001L);
				
				xorFrom(source,  4, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_30() {
				T source   = build(0b0000000000000000000000000000011111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111110011111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111110100000000000000000000000000001L);
				
				xorFrom(source,  4, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_40() {
				T source   = build(0b0000000000000000000111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111100111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111101000000000000000000000000000000000000001L);
				
				xorFrom(source,  4, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_44() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111001111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111010000000000000000000000000000000000000000001L);
				
				xorFrom(source,  4, subject,  0,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_46() {
				T source   = build(0b0000000000000111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111100111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111101000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  4, subject,  0,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_56() {
				T source   = build(0b0001111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  4, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1110011111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1110100000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  4, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_62() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1001111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1010000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  4, subject,  0,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_0_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  4, subject,  0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_2_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000011111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000101L);
				
				xorFrom(source,  4, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_2_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111110011111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111110100000101L);
				
				xorFrom(source,  4, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_2_14() {
				T source   = build(0b0000000000000000000000000000000000000000000001111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000101L);
				
				xorFrom(source,  4, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_2_15() {
				T source   = build(0b0000000000000000000000000000000000000000000011111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111001111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111010000000000000101L);
				
				xorFrom(source,  4, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_2_22() {
				T source   = build(0b0000000000000000000000000000000000000111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000101L);
				
				xorFrom(source,  4, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_2_23() {
				T source   = build(0b0000000000000000000000000000000000001111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111100111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111101000000000000000000000101L);
				
				xorFrom(source,  4, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_2_30() {
				T source   = build(0b0000000000000000000000000000011111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000101L);
				
				xorFrom(source,  4, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_2_31() {
				T source   = build(0b0000000000000000000000000000111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111110011111111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111110100000000000000000000000000000101L);
				
				xorFrom(source,  4, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_8_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111001111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111010000000000101111111L);
				
				xorFrom(source,  4, subject,  8,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_8_14() {
				T source   = build(0b0000000000000000000000000000000000000000000001111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111100111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111101000000000000101111111L);
				
				xorFrom(source,  4, subject,  8,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_8_28() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000101111111L);
				
				xorFrom(source,  4, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_8_30() {
				T source   = build(0b0000000000000000000000000000011111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111001111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111010000000000000000000000000000101111111L);
				
				xorFrom(source,  4, subject,  8,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_8_44() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111100111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111101000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  4, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_8_46() {
				T source   = build(0b0000000000000111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111110011111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111110100000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  4, subject,  8,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_8_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  4, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_8_62() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111110011111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111110100000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source,  4, subject,  8,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_10_54() {
				T source   = build(0b0000011111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111100111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000010111111111L);
				
				xorFrom(source,  4, subject, 10,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111001111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111010000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_30() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111110011111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111110100000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_40() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111100111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111101000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_44() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111001111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111010000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_46() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111100111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111101000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1110011111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1110100000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_62() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1001111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1010000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_64_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 64,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_66_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000011111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 66,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_66_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111110011111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111110100000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 66,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_66_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 66,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_66_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000011111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111001111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111010000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 66,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_66_22() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 66,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_66_23() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000001111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111100111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111101000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 66,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_66_30() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 66,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_66_31() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111110011111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111110100000000000000000000000000000101L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 66,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_68_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 68,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_68_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_68_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111110100000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_68_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000011111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 68,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_68_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_68_30() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111101000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_68_40() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111001111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111010000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 68,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_68_44() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_68_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000011111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111100111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111101000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 68,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_68_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1110011111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1110100000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 68,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_72_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111001111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111010000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 72,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_72_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111100111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111101000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 72,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_72_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_72_30() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111001111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111010000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 72,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_72_44() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111100111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111101000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 72,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_72_46() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111110011111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111110100000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 72,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_72_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_72_62() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111110011111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111110100000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 72,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_4_74_54() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011111111111111111111111111111111111111111111111111111110000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111100111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000010111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  4, subject, 74,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_16() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000001L);
				
				xorFrom(source,  8, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_24() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000001L);
				
				xorFrom(source,  8, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_28() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000000001L);
				
				xorFrom(source,  8, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_48() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  8, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  8, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110100000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  8, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_80() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  8, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_88() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  8, subject,  0,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_92() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  8, subject,  0,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_112() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  8, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  8, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_124() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110100000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  8, subject,  0, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_0_144() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source,  8, subject,  0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_4_12() {
				T source   = build(0b0000000000000000000000000000000000000000000111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000010111L);
				
				xorFrom(source,  8, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_4_14() {
				T source   = build(0b0000000000000000000000000000000000000000011111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111110011111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111110100000000000010111L);
				
				xorFrom(source,  8, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_4_28() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000010111L);
				
				xorFrom(source,  8, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_4_30() {
				T source   = build(0b0000000000000000000000000111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111100111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111101000000000000000000000000000010111L);
				
				xorFrom(source,  8, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_4_44() {
				T source   = build(0b0000000000011111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  8, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_4_46() {
				T source   = build(0b0000000001111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111001111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111010000000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  8, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_4_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  8, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_4_62() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source,  8, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_16_24() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111100111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111101000000000000000000000010111111111111111L);
				
				xorFrom(source,  8, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_16_28() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111001111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111010000000000000000000000000010111111111111111L);
				
				xorFrom(source,  8, subject, 16,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_16_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  8, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_16_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  8, subject, 16,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_16_88() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111101000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  8, subject, 16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_16_92() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111001111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111010000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  8, subject, 16,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_16_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  8, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_16_124() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source,  8, subject, 16, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_20_44() {
				T source   = build(0b0000000000011111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111001111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000101111111111111111111L);
				
				xorFrom(source,  8, subject, 20,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1110011111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1110100000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_92() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111100111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111101000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_124() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1110011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1110100000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_64_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 64, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_68_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 68,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_68_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000011111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111110011111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111110100000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 68,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_68_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 68,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_68_30() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111100111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111101000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 68,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_68_44() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000011111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 68,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_68_46() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000001111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111001111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111010000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 68,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_68_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 68,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_68_62() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 68,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_72_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 72,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_72_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_72_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_72_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 72,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_72_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_72_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_72_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 72,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_72_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_72_92() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_72_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 72, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_80_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111100111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111101000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 80,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_80_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111001111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111010000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 80,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_80_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_80_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 80,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_80_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111101000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 80,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_80_92() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111001111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111010000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 80,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_80_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_80_124() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 80, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_8_84_44() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000011111111111111111111111111111111111111111111100000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000101111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source,  8, subject, 84,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_10_4_54() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110000000000L);
				T subject  = build(0b1111100111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111101000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 10, subject,  4,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_10_68_54() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111110000000000L);
				T subject  = build(0b1111100111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111101000000000000000000000000000000000000000000000000000010111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 10, subject, 68,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_32() {
				T source   = build(0b0000000000000001111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_96() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_160() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_184() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_224() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_248() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_0_288() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 16, subject,  0, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_8_24() {
				T source   = build(0b0000000000000000000000011111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000101111111L);
				
				xorFrom(source, 16, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_8_28() {
				T source   = build(0b0000000000000000000111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000101111111L);
				
				xorFrom(source, 16, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_8_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 16, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_8_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 16, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_8_88() {
				T source   = build(0b0000000000000000000000011111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 16, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_8_92() {
				T source   = build(0b0000000000000000000111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 16, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_8_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 16, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_8_124() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 16, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_32_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 32,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_32_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 32,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_32_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 32, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_32_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 32, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_32_176() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 32, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_32_180() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111010000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 32, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_32_240() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 32, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_32_248() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 32, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_40_24() {
				T source   = build(0b0000000000000000000000011111111111111111111111110000000000000000L);
				T subject  = build(0b0111111111111111111111100111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000010111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 40,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_32() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_96() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_160() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_176() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_184() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_224() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_240() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_248() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_64_288() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 64, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_72_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 72,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_72_28() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 72,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_72_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 72,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_72_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 72,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_72_88() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 72,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_72_92() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111110100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 72,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_72_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 72, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_72_124() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 72, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_80_32() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 80,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_80_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_80_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_80_96() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 80,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_80_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 80, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_80_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_80_160() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 80, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_80_176() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 80, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_80_184() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 80, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_80_224() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 80, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_96_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 96,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_96_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 96,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_96_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 96, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_96_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 96, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_96_176() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 96, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_96_180() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111010000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 96, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_96_240() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 96, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_96_248() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 96, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_16_104_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000011111111111111111111111110000000000000000L);
				T subject  = build(0b0111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000010111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 16, subject, 104,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_20_8_44() {
				T source   = build(0b1111111111111111111111111111111111111111111100000000000000000000L);
				T subject  = build(0b1111111111100111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111101000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 20, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_20_72_44() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111100000000000000000000L);
				T subject  = build(0b1111111111100111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111101000000000000000000000000000000000000000000101111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 20, subject, 72,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_16_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 32, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_16_56() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 32, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_16_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 32, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_16_120() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 32, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_16_176() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 32, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_16_180() {
				T source   = build(0b0000000000000000000000000000000000000000000111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 32, subject, 16, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_16_240() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 32, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_16_248() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 32, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_80_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 32, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_80_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 32, subject, 80,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_80_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 32, subject, 80, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_80_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 32, subject, 80, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_80_176() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 32, subject, 80, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_80_180() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 32, subject, 80, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_80_240() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 32, subject, 80, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_80_248() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 32, subject, 80, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_32_144_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L);
				T subject  = build(0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 32, subject, 144,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_40_16_24() {
				T source   = build(0b1111111111111111111111110000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111100111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111101000000000000000000000010111111111111111L);
				
				xorFrom(source, 40, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_40_80_24() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111110000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111100111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111101000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 40, subject, 80,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_0() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L);
				
				xorFrom(source, 64, subject,  0,   0);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101001L);
				
				xorFrom(source, 64, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000001L);
				
				xorFrom(source, 64, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100000000001L);
				
				xorFrom(source, 64, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000001L);
				
				xorFrom(source, 64, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_20() {
				T source   = build(0b0000000000000000000000000000000000000000000111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111010000000000000000001L);
				
				xorFrom(source, 64, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_24() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000001L);
				
				xorFrom(source, 64, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_28() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_32() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_40() {
				T source   = build(0b0000000000000000000000011111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111101000000000000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_48() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_56() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_64() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0,  64);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_96() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_112() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_128() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0, 128);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_160() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_192() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0, 192);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_0_224() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 64, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110100101L);
				
				xorFrom(source, 64, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000001111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000101L);
				
				xorFrom(source, 64, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000011111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110100000101L);
				
				xorFrom(source, 64, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111010000000000101L);
				
				xorFrom(source, 64, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000101L);
				
				xorFrom(source, 64, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000001111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111001111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111010000000000000101L);
				
				xorFrom(source, 64, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_20() {
				T source   = build(0b0000000000000000000000000000000000000000000111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111101000000000000000000101L);
				
				xorFrom(source, 64, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_22() {
				T source   = build(0b0000000000000000000000000000000000000000011111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000101L);
				
				xorFrom(source, 64, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_23() {
				T source   = build(0b0000000000000000000000000000000000000000111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111101000000000000000000000101L);
				
				xorFrom(source, 64, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_28() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110100000000000000000000000000101L);
				
				xorFrom(source, 64, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_30() {
				T source   = build(0b0000000000000000000000000000000001111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000101L);
				
				xorFrom(source, 64, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_31() {
				T source   = build(0b0000000000000000000000000000000011111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110011111111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110100000000000000000000000000000101L);
				
				xorFrom(source, 64, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_2_36() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111001111111111111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111010000000000000000000000000000000000101L);
				
				xorFrom(source, 64, subject,  2,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100000010111L);
				
				xorFrom(source, 64, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000010111L);
				
				xorFrom(source, 64, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000000111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110100000000000010111L);
				
				xorFrom(source, 64, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_24() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101000000000000000000000010111L);
				
				xorFrom(source, 64, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_28() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000010111L);
				
				xorFrom(source, 64, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_30() {
				T source   = build(0b0000000000000000000000000000000001111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111101000000000000000000000000000010111L);
				
				xorFrom(source, 64, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_40() {
				T source   = build(0b0000000000000000000000011111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111010000000000000000000000000000000000000010111L);
				
				xorFrom(source, 64, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_44() {
				T source   = build(0b0000000000000000000111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 64, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_46() {
				T source   = build(0b0000000000000000011111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111001111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111010000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 64, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_56() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110100000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 64, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_60() {
				T source   = build(0b0001111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 64, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_62() {
				T source   = build(0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 64, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_4_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 64, subject,  4,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_16() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000101111111L);
				
				xorFrom(source, 64, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_24() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_28() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110100000000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_48() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_56() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_60() {
				T source   = build(0b0001111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_80() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_88() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_92() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_112() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_120() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_124() {
				T source   = build(0b0001111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_8_144() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 64, subject,  8, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_32() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_48() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_56() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_96() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_112() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_120() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_160() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_176() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_184() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_224() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_240() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_248() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_64_16_288() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 64, subject, 16, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000001111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101001L);
				
				xorFrom(source, 66, subject,  0,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110100001L);
				
				xorFrom(source, 66, subject,  0,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000001111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111101000001L);
				
				xorFrom(source, 66, subject,  0,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100000000001L);
				
				xorFrom(source, 66, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111010000000000001L);
				
				xorFrom(source, 66, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110011111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110100000000000001L);
				
				xorFrom(source, 66, subject,  0,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_20() {
				T source   = build(0b0000000000000000000000000000000000000000011111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111010000000000000000001L);
				
				xorFrom(source, 66, subject,  0,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_22() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111101000000000000000000001L);
				
				xorFrom(source, 66, subject,  0,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_23() {
				T source   = build(0b0000000000000000000000000000000000000011111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111001111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111010000000000000000000001L);
				
				xorFrom(source, 66, subject,  0,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_28() {
				T source   = build(0b0000000000000000000000000000000001111111111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101000000000000000000000000001L);
				
				xorFrom(source, 66, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_30() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110100000000000000000000000000001L);
				
				xorFrom(source, 66, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_31() {
				T source   = build(0b0000000000000000000000000000001111111111111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111101000000000000000000000000000001L);
				
				xorFrom(source, 66, subject,  0,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_0_36() {
				T source   = build(0b0000000000000000000000000111111111111111111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110100000000000000000000000000000000001L);
				
				xorFrom(source, 66, subject,  0,  36);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_2_4() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000001111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110100101L);
				
				xorFrom(source, 66, subject,  2,   4);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_2_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000101L);
				
				xorFrom(source, 66, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_2_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000001111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110100000101L);
				
				xorFrom(source, 66, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_2_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000000111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111010000000000101L);
				
				xorFrom(source, 66, subject,  2,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_2_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000101L);
				
				xorFrom(source, 66, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_2_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111001111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111010000000000000101L);
				
				xorFrom(source, 66, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_2_20() {
				T source   = build(0b0000000000000000000000000000000000000000011111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111101000000000000000000101L);
				
				xorFrom(source, 66, subject,  2,  20);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_2_22() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000101L);
				
				xorFrom(source, 66, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_2_23() {
				T source   = build(0b0000000000000000000000000000000000000011111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111101000000000000000000000101L);
				
				xorFrom(source, 66, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_2_28() {
				T source   = build(0b0000000000000000000000000000000001111111111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110100000000000000000000000000101L);
				
				xorFrom(source, 66, subject,  2,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_4_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111100111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111101000010111L);
				
				xorFrom(source, 66, subject,  4,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_4_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000001111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111001111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111010000010111L);
				
				xorFrom(source, 66, subject,  4,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_4_14() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110100000000000010111L);
				
				xorFrom(source, 66, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_4_15() {
				T source   = build(0b0000000000000000000000000000000000000000000000111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111100111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111101000000000000010111L);
				
				xorFrom(source, 66, subject,  4,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_4_22() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111001111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111010000000000000000000010111L);
				
				xorFrom(source, 66, subject,  4,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_4_23() {
				T source   = build(0b0000000000000000000000000000000000000011111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111110011111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111110100000000000000000000010111L);
				
				xorFrom(source, 66, subject,  4,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_4_30() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111101000000000000000000000000000010111L);
				
				xorFrom(source, 66, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_66_4_31() {
				T source   = build(0b0000000000000000000000000000001111111111111111111111111111111100L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111001111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111010000000000000000000000000000010111L);
				
				xorFrom(source, 66, subject,  4,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000001L);
				
				xorFrom(source, 68, subject,  0,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100000000001L);
				
				xorFrom(source, 68, subject,  0,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_14() {
				T source   = build(0b0000000000000000000000000000000000000000000001111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111001111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111010000000000001L);
				
				xorFrom(source, 68, subject,  0,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_24() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000001L);
				
				xorFrom(source, 68, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_28() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101000000000000000000000000001L);
				
				xorFrom(source, 68, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_30() {
				T source   = build(0b0000000000000000000000000000011111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110100000000000000000000000000001L);
				
				xorFrom(source, 68, subject,  0,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_40() {
				T source   = build(0b0000000000000000000111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111101000000000000000000000000000000000000001L);
				
				xorFrom(source, 68, subject,  0,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_44() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111010000000000000000000000000000000000000000001L);
				
				xorFrom(source, 68, subject,  0,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_46() {
				T source   = build(0b0000000000000111111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111100111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111101000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 68, subject,  0,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_56() {
				T source   = build(0b0001111111111111111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 68, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110100000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 68, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_62() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1001111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1010000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 68, subject,  0,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_0_72() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 68, subject,  0,  72);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_2_6() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000011111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000101L);
				
				xorFrom(source, 68, subject,  2,   6);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_2_7() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110011111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111110100000101L);
				
				xorFrom(source, 68, subject,  2,   7);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_2_14() {
				T source   = build(0b0000000000000000000000000000000000000000000001111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000101L);
				
				xorFrom(source, 68, subject,  2,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_2_15() {
				T source   = build(0b0000000000000000000000000000000000000000000011111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111001111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111010000000000000101L);
				
				xorFrom(source, 68, subject,  2,  15);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_2_22() {
				T source   = build(0b0000000000000000000000000000000000000111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000101L);
				
				xorFrom(source, 68, subject,  2,  22);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_2_23() {
				T source   = build(0b0000000000000000000000000000000000001111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111101000000000000000000000101L);
				
				xorFrom(source, 68, subject,  2,  23);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_2_30() {
				T source   = build(0b0000000000000000000000000000011111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000101L);
				
				xorFrom(source, 68, subject,  2,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_2_31() {
				T source   = build(0b0000000000000000000000000000111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110011111111111111111111111111111001L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110100000000000000000000000000000101L);
				
				xorFrom(source, 68, subject,  2,  31);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_4_8() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100000010111L);
				
				xorFrom(source, 68, subject,  4,   8);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_4_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000010111L);
				
				xorFrom(source, 68, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_4_14() {
				T source   = build(0b0000000000000000000000000000000000000000000001111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110100000000000010111L);
				
				xorFrom(source, 68, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_4_24() {
				T source   = build(0b0000000000000000000000000000000000011111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101000000000000000000000010111L);
				
				xorFrom(source, 68, subject,  4,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_4_28() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000010111L);
				
				xorFrom(source, 68, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_4_30() {
				T source   = build(0b0000000000000000000000000000011111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111101000000000000000000000000000010111L);
				
				xorFrom(source, 68, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_4_40() {
				T source   = build(0b0000000000000000000111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111010000000000000000000000000000000000000010111L);
				
				xorFrom(source, 68, subject,  4,  40);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_4_44() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 68, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_4_48() {
				T source   = build(0b0000000000011111111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111101000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 68, subject,  4,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_4_56() {
				T source   = build(0b0001111111111111111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110100000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 68, subject,  4,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_8_12() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111010000000000101111111L);
				
				xorFrom(source, 68, subject,  8,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_8_14() {
				T source   = build(0b0000000000000000000000000000000000000000000001111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111101000000000000101111111L);
				
				xorFrom(source, 68, subject,  8,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_8_28() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110100000000000000000000000000101111111L);
				
				xorFrom(source, 68, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_8_30() {
				T source   = build(0b0000000000000000000000000000011111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111001111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111010000000000000000000000000000101111111L);
				
				xorFrom(source, 68, subject,  8,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_8_44() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111101000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 68, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_8_46() {
				T source   = build(0b0000000000000111111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110011111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110100000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 68, subject,  8,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_8_60() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 68, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_8_62() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110100000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 68, subject,  8,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_68_10_54() {
				T source   = build(0b0000011111111111111111111111111111111111111111111111111111110000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111100111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000010111111111L);
				
				xorFrom(source, 68, subject, 10,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_16() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000001L);
				
				xorFrom(source, 72, subject,  0,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_24() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000001L);
				
				xorFrom(source, 72, subject,  0,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_28() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101000000000000000000000000001L);
				
				xorFrom(source, 72, subject,  0,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_48() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 72, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 72, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110100000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 72, subject,  0,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_80() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 72, subject,  0,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_88() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 72, subject,  0,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_92() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 72, subject,  0,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_112() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 72, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 72, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_124() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110011111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1110100000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 72, subject,  0, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_0_144() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 72, subject,  0, 144);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_4_12() {
				T source   = build(0b0000000000000000000000000000000000000000000111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000010111L);
				
				xorFrom(source, 72, subject,  4,  12);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_4_14() {
				T source   = build(0b0000000000000000000000000000000000000000011111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110011111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110100000000000010111L);
				
				xorFrom(source, 72, subject,  4,  14);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_4_28() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000010111L);
				
				xorFrom(source, 72, subject,  4,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_4_30() {
				T source   = build(0b0000000000000000000000000111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111100111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111101000000000000000000000000000010111L);
				
				xorFrom(source, 72, subject,  4,  30);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_4_44() {
				T source   = build(0b0000000000011111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 72, subject,  4,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_4_46() {
				T source   = build(0b0000000001111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111001111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111010000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 72, subject,  4,  46);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_4_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 72, subject,  4,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_4_62() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111001L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111010L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 72, subject,  4,  62);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_8_16() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000101111111L);
				
				xorFrom(source, 72, subject,  8,  16);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_8_24() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000101111111L);
				
				xorFrom(source, 72, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_8_28() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110100000000000000000000000000101111111L);
				
				xorFrom(source, 72, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_8_48() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 72, subject,  8,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_8_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 72, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_8_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 72, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_8_80() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 72, subject,  8,  80);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_8_88() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 72, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_8_92() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 72, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_8_112() {
				T source   = build(0b0000000111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 72, subject,  8, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_16_24() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111101000000000000000000000010111111111111111L);
				
				xorFrom(source, 72, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_16_28() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111010000000000000000000000000010111111111111111L);
				
				xorFrom(source, 72, subject, 16,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_16_56() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 72, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_16_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 72, subject, 16,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_16_88() {
				T source   = build(0b0000000000000000000000000000000111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111101000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 72, subject, 16,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_16_92() {
				T source   = build(0b0000000000000000000000000001111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111010000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 72, subject, 16,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_16_120() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 72, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_16_124() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 72, subject, 16, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_72_20_44() {
				T source   = build(0b0000000000011111111111111111111111111111111111111111111100000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111001111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000101111111111111111111L);
				
				xorFrom(source, 72, subject, 20,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_74_4_54() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111110000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111100111111111111111111111111111111111111111111111111111100111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111101000000000000000000000000000000000000000000000000000010111L);
				
				xorFrom(source, 74, subject,  4,  54);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_32() {
				T source   = build(0b0000000000000001111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_96() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_160() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_184() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_224() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_248() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111010000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_0_288() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				
				xorFrom(source, 80, subject,  0, 288);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_8_24() {
				T source   = build(0b0000000000000000000000011111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000101111111L);
				
				xorFrom(source, 80, subject,  8,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_8_28() {
				T source   = build(0b0000000000000000000111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110100000000000000000000000000101111111L);
				
				xorFrom(source, 80, subject,  8,  28);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_8_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 80, subject,  8,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_8_60() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 80, subject,  8,  60);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_8_88() {
				T source   = build(0b0000000000000000000000011111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111010000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 80, subject,  8,  88);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_8_92() {
				T source   = build(0b0000000000000000000111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110011111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110100000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 80, subject,  8,  92);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_8_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 80, subject,  8, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_8_124() {
				T source   = build(0b0000000000000000000000000000000000000000000000000001111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 80, subject,  8, 124);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_16_32() {
				T source   = build(0b0000000000000001111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 80, subject, 16,  32);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_16_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 80, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_16_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 80, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_16_96() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 80, subject, 16,  96);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_16_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 80, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_16_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 80, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_16_160() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 80, subject, 16, 160);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_16_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 80, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_16_184() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 80, subject, 16, 184);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_16_224() {
				T source   = build(0b0000000000000001111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110011111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110100000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 80, subject, 16, 224);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_32_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 80, subject, 32,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_32_56() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 80, subject, 32,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_32_112() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 80, subject, 32, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_32_120() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 80, subject, 32, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_32_176() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 80, subject, 32, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_32_180() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111001111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111010000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 80, subject, 32, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_32_240() {
				T source   = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 80, subject, 32, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_32_248() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110011111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111110100000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 80, subject, 32, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_40_24() {
				T source   = build(0b0000000000000000000000011111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111100111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000010111111111111111111111111111111111111111L);
				
				xorFrom(source, 80, subject, 40,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_80_96_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 80, subject, 96,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_84_8_44() {
				T source   = build(0b1111111111111111111111111111111111111111111100000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100111111111111111111111111111111111111111111001111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111101000000000000000000000000000000000000000000101111111L);
				
				xorFrom(source, 84, subject,  8,  44);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_96_16_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 96, subject, 16,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_96_16_56() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 96, subject, 16,  56);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_96_16_112() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 96, subject, 16, 112);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_96_16_120() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 96, subject, 16, 120);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_96_16_176() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 96, subject, 16, 176);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_96_16_180() {
				T source   = build(0b0000000000000000000000000000000000000000000111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 96, subject, 16, 180);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_96_16_240() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 96, subject, 16, 240);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_96_16_248() {
				T source   = build(0b0000000000000000000000000000000000000001111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111001111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111010000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111111111111111L);
				
				xorFrom(source, 96, subject, 16, 248);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_96_80_48() {
				T source   = build(0b0000000000000000000000000000000000000000000000011111111111111111L,
				                   0b1111111111111111111111111111111100000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b0111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1000000000000000000000000000000000000000000000010111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				
				xorFrom(source, 96, subject, 80,  48);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_104_16_24() {
				T source   = build(0b1111111111111111111111110000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111100111111111111111111111100111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111101000000000000000000000010111111111111111L);
				
				xorFrom(source, 104, subject, 16,  24);
				assertThat(subject, is(equalTo(expected)));
			}

			@Test public void xorFrom_144_32_48() {
				T source   = build(0b1111111111111111111111111111111111111111111111110000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100111111111111111L,
				                   0b1111111111111111111111111111111001111111111111111111111111111111L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111101000000000000000L,
				                   0b0000000000000000000000000000000101111111111111111111111111111111L);
				
				xorFrom(source, 144, subject, 32,  48);
				assertThat(subject, is(equalTo(expected)));
			}
		}
	}

	@RunWith(Enclosed.class)
	public static class ByteArray extends ByteArrayBuilder {
		public static class XorFromDifferentSource extends Cases.XorFromDifferentSource<byte[]> {
			@Override protected void xorFrom(byte[] source, int srcPos, byte[] dest, int destPos, int length) {
				Xor.xorFrom(source, srcPos, dest, destPos, length);
			}
			@Override public byte[] build(long... d) { return build0(d); }
		}
	}

	@RunWith(Enclosed.class)
	public static class CharArray extends CharArrayBuilder {
		public static class XorFromDifferentSource extends Cases.XorFromDifferentSource<char[]> {
			@Override protected void xorFrom(char[] source, int srcPos, char[] dest, int destPos, int length) {
				Xor.xorFrom(source, srcPos, dest, destPos, length);
			}
			@Override public char[] build(long... d) { return build0(d); }
		}
	}

	@RunWith(Enclosed.class)
	public static class ShortArray extends ShortArrayBuilder {
		public static class XorFromDifferentSource extends Cases.XorFromDifferentSource<short[]> {
			@Override protected void xorFrom(short[] source, int srcPos, short[] dest, int destPos, int length) {
				Xor.xorFrom(source, srcPos, dest, destPos, length);
			}
			@Override public short[] build(long... d) { return build0(d); }
		}
	}

	@RunWith(Enclosed.class)
	public static class IntArray extends IntArrayBuilder {
		public static class XorFromDifferentSource extends Cases.XorFromDifferentSource<int[]> {
			@Override protected void xorFrom(int[] source, int srcPos, int[] dest, int destPos, int length) {
				Xor.xorFrom(source, srcPos, dest, destPos, length);
			}
			@Override public int[] build(long... d) { return build0(d); }
		}
	}
}
