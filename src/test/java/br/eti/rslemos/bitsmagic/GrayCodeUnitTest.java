/*******************************************************************************
 * BEGIN COPYRIGHT NOTICE
 * 
 * The MIT License (MIT)
 * 
 * Copyright (c) 2016 Rodrigo Lemos
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * END COPYRIGHT NOTICE
 *******************************************************************************/
package br.eti.rslemos.bitsmagic;

import static br.eti.rslemos.bitsmagic.GrayCode.fromGray;
import static br.eti.rslemos.bitsmagic.GrayCode.toGray;
import static br.eti.rslemos.bitsmagic.Ones.ones;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.experimental.runners.Enclosed;
import org.junit.runner.RunWith;

@RunWith(Enclosed.class)
public class GrayCodeUnitTest {
	
	@RunWith(Enclosed.class)
	public static class Primitives {
		public static class Byte {
			@Test public void grayProperty() {
				byte v = java.lang.Byte.MIN_VALUE;
				byte g = toGray(v);
				
				do {
					v++;
					byte g1 = toGray(v);
					assertThat(ones((g ^ g1) & 0xff), is(equalTo(1)));
					g = g1;
				} while (v != java.lang.Byte.MIN_VALUE);
			}
			
			@Test public void grayInverse() {
				byte v = java.lang.Byte.MIN_VALUE;
				do {
					v++;
					assertThat(fromGray(toGray(v)), is(equalTo(v)));
				} while (v != java.lang.Byte.MIN_VALUE);
			}
		}
		
		public static class Char {
			@Test public void grayProperty() {
				char v = Character.MIN_VALUE;
				char g = toGray(v);
				
				do {
					v++;
					char g1 = toGray(v);
					assertThat(ones((g ^ g1) & 0xffff), is(equalTo(1)));
					g = g1;
				} while (v != Character.MIN_VALUE);
			}
		
			@Test public void grayInverse() {
				char v = Character.MIN_VALUE;
				do {
					v++;
					assertThat(fromGray(toGray(v)), is(equalTo(v)));
				} while (v != Character.MIN_VALUE);
			}
		}
		
		public static class Short {
			@Test public void grayProperty() {
				short v = java.lang.Short.MIN_VALUE;
				short g = toGray(v);
				
				do {
					v++;
					short g1 = toGray(v);
					assertThat(ones((g ^ g1) & 0xffff), is(equalTo(1)));
					g = g1;
				} while (v != java.lang.Short.MIN_VALUE);
			}
		
			@Test public void grayInverse() {
				short v = java.lang.Short.MIN_VALUE;
				do {
					v++;
					assertThat(fromGray(toGray(v)), is(equalTo(v)));
				} while (v != java.lang.Short.MIN_VALUE);
			}
		}
		
		public static class Int {
			@Test public void grayProperty() {
				// special cases
				testGrayProperty(Integer.MIN_VALUE);
				testGrayProperty(-1);
				testGrayProperty(0);
				testGrayProperty(1);
				testGrayProperty(Integer.MAX_VALUE-1);
				testGrayProperty(Integer.MAX_VALUE);
		
				int v = -10000000;
				int g = toGray(v);
				
				do {
					v++;
					int g1 = toGray(v);
					assertThat(ones(g ^ g1), is(equalTo(1)));
					g = g1;
				} while (v != 10000000);
			}
			
			private void testGrayProperty(int v) {
				int g0 = toGray(v);
				int g = toGray(v+1);
				assertThat(ones(g0 ^ g), is(equalTo(1)));
			}
		
			@Test public void grayInverse() {
				// special cases
				testGrayInverse(Integer.MIN_VALUE);
				testGrayInverse(Integer.MIN_VALUE+1);
				testGrayInverse(Integer.MAX_VALUE-1);
				testGrayInverse(Integer.MAX_VALUE);
		
				int v = -10000000;
				
				do {
					v++;
					testGrayInverse(v);
				} while (v != 10000000);
			}
			
			private void testGrayInverse(int v) {
				assertThat(fromGray(toGray(v)), is(equalTo(v)));
			}
		}
		
		public static class Long {
			@Test public void grayProperty() {
				// special cases
				testGrayProperty(java.lang.Long.MIN_VALUE);
				testGrayProperty(java.lang.Long.MIN_VALUE+1);
				testGrayProperty(java.lang.Long.MAX_VALUE-1);
				testGrayProperty(java.lang.Long.MAX_VALUE);
		
				long v = -10000000;
				long g = toGray(v);
				
				do {
					v++;
					long g1 = toGray(v);
					assertThat(ones(g ^ g1), is(equalTo(1)));
					g = g1;
				} while (v != 10000000);
			}
			
			private void testGrayProperty(long a) {
				long g0 = toGray(a);
				long g = toGray(a+1);
				assertThat(ones(g0 ^ g), is(equalTo(1)));
			}
			
			@Test public void grayInverse() {
				// special cases
				testGrayInverse(java.lang.Long.MIN_VALUE);
				testGrayInverse(-1);
				testGrayInverse(0);
				testGrayInverse(1);
				testGrayInverse(java.lang.Long.MAX_VALUE-1);
				testGrayInverse(java.lang.Long.MAX_VALUE);
		
				long v = -10000000;
				
				do {
					v++;
					testGrayInverse(v);
				} while (v != 10000000);
			}
			
			private void testGrayInverse(long v) {
				assertThat(fromGray(toGray(v)), is(equalTo(v)));
			}
		}
	}
	
	@Ignore
	public abstract static class Cases<T> {
		public abstract static class HammingDistance1<T> implements StorageBuilder<T> {
			protected abstract void toGray(T data, int from, int to);
			protected abstract void xorFrom(T src, int srcPos, T dest, int destPos, int length);
			protected abstract int ones(T data, int from, int to);
			
			@Test public void toGray_0_1() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);

				hammingDistance1(subject0, subject1, 0, 1);
			}

			@Test public void toGray_0_2() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111100L);

				hammingDistance1(subject0, subject1, 0, 2);
			}

			@Test public void toGray_0_3() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111010L);

				hammingDistance1(subject0, subject1, 0, 3);
			}

			@Test public void toGray_0_4() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110010L);

				hammingDistance1(subject0, subject1, 0, 4);
			}

			@Test public void toGray_0_5() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111100111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);

				hammingDistance1(subject0, subject1, 0, 5);
			}

			@Test public void toGray_0_6() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011100L);

				hammingDistance1(subject0, subject1, 0, 6);
			}

			@Test public void toGray_0_7() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111001101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111001110L);

				hammingDistance1(subject0, subject1, 0, 7);
			}

			@Test public void toGray_0_8() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110111101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110111110L);

				hammingDistance1(subject0, subject1, 0, 8);
			}

			@Test public void toGray_0_9() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110101011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110101100L);

				hammingDistance1(subject0, subject1, 0, 9);
			}

			@Test public void toGray_0_10() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110010111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011000L);

				hammingDistance1(subject0, subject1, 0, 10);
			}

			@Test public void toGray_0_11() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111000100001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111000100010L);

				hammingDistance1(subject0, subject1, 0, 11);
			}

			@Test public void toGray_0_12() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111101100001001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111101100001010L);

				hammingDistance1(subject0, subject1, 0, 12);
			}

			@Test public void toGray_0_13() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111011110101111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111011110110000L);

				hammingDistance1(subject0, subject1, 0, 13);
			}

			@Test public void toGray_0_14() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111000010010011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111000010010100L);

				hammingDistance1(subject0, subject1, 0, 14);
			}

			@Test public void toGray_0_15() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100011110101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100011110110L);

				hammingDistance1(subject0, subject1, 0, 15);
			}

			@Test public void toGray_0_16() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110101100011010101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110101100011010110L);

				hammingDistance1(subject0, subject1, 0, 16);
			}

			@Test public void toGray_0_17() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100011011110110011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100011011110110100L);

				hammingDistance1(subject0, subject1, 0, 17);
			}

			@Test public void toGray_0_18() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111101001110001111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111101001110010000L);

				hammingDistance1(subject0, subject1, 0, 18);
			}

			@Test public void toGray_0_19() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110101110110101101001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110101110110101101010L);

				hammingDistance1(subject0, subject1, 0, 19);
			}

			@Test public void toGray_0_20() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111100001001110101000001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111100001001110101000010L);

				hammingDistance1(subject0, subject1, 0, 20);
			}

			@Test public void toGray_0_21() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110110100100100010111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110110100100100011000L);

				hammingDistance1(subject0, subject1, 0, 21);
			}

			@Test public void toGray_0_22() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111110011101001100011101011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111110011101001100011101100L);

				hammingDistance1(subject0, subject1, 0, 22);
			}

			@Test public void toGray_0_23() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111100011110000010111101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111100011110000010111110L);

				hammingDistance1(subject0, subject1, 0, 23);
			}

			@Test public void toGray_0_24() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111001100000110000010001101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111001100000110000010001110L);

				hammingDistance1(subject0, subject1, 0, 24);
			}

			@Test public void toGray_0_25() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111101101000001011011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111101101000001011100L);

				hammingDistance1(subject0, subject1, 0, 25);
			}

			@Test public void toGray_0_26() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100010110111001000000100111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100010110111001000000101000L);

				hammingDistance1(subject0, subject1, 0, 26);
			}

			@Test public void toGray_0_27() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111101100110000010111111110001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111101100110000010111111110010L);

				hammingDistance1(subject0, subject1, 0, 27);
			}

			@Test public void toGray_0_28() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100100010010111110111001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100100010010111110111010L);

				hammingDistance1(subject0, subject1, 0, 28);
			}

			@Test public void toGray_0_29() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100010100010011110111101111111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100010100010011110111110000000L);

				hammingDistance1(subject0, subject1, 0, 29);
			}

			@Test public void toGray_0_30() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100110011110101110111101000011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100110011110101110111101000100L);

				hammingDistance1(subject0, subject1, 0, 30);
			}

			@Test public void toGray_0_31() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101010011010110110111100000101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101010011010110110111100000110L);

				hammingDistance1(subject0, subject1, 0, 31);
			}

			@Test public void toGray_0_32() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101010010010110110111011000101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101010010010110110111011000110L);

				hammingDistance1(subject0, subject1, 0, 32);
			}

			@Test public void toGray_0_33() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111011010001010100110111010000011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111011010001010100110111010000100L);

				hammingDistance1(subject0, subject1, 0, 33);
			}

			@Test public void toGray_0_34() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011001111001100110111000111111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011001111001100110111001000000L);

				hammingDistance1(subject0, subject1, 0, 34);
			}

			@Test public void toGray_0_35() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111011011001101000000110110111111001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111011011001101000000110110111111010L);

				hammingDistance1(subject0, subject1, 0, 35);
			}

			@Test public void toGray_0_36() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110011011001000100000110110110110001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110011011001000100000110110110110010L);

				hammingDistance1(subject0, subject1, 0, 36);
			}

			@Test public void toGray_0_37() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111011111011000011111000110110101100111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111011111011000011111000110110101101000L);

				hammingDistance1(subject0, subject1, 0, 37);
			}

			@Test public void toGray_0_38() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110101111010111010011000110110100011011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110101111010111010011000110110100011100L);

				hammingDistance1(subject0, subject1, 0, 38);
			}

			@Test public void toGray_0_39() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111100111111010110000101000110110011001101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111100111111010110000101000110110011001110L);

				hammingDistance1(subject0, subject1, 0, 39);
			}

			@Test public void toGray_0_40() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111000111111010011100101000110110001111101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111000111111010011100101000110110001111110L);

				hammingDistance1(subject0, subject1, 0, 40);
			}

			@Test public void toGray_0_41() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111101111111111010001000001000110110000101011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111101111111111010001000001000110110000101100L);

				hammingDistance1(subject0, subject1, 0, 41);
			}

			@Test public void toGray_0_42() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111011011111111001011110001000110101111010111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111011011111111001011110001000110101111011000L);

				hammingDistance1(subject0, subject1, 0, 42);
			}

			@Test public void toGray_0_43() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111110101111111111000110011001000110101110000001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111110101111111111000110011001000110101110000010L);

				hammingDistance1(subject0, subject1, 0, 43);
			}

			@Test public void toGray_0_44() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111101001111111110111011011001000110101100101001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111101001111111110111011011001000110101100101010L);

				hammingDistance1(subject0, subject1, 0, 44);
			}

			@Test public void toGray_0_45() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111110110000001001000110101011001111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111110110000001001000110101011010000L);

				hammingDistance1(subject0, subject1, 0, 45);
			}

			@Test public void toGray_0_46() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111110010111111111110011001001001000110101001110011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111110010111111111110011001001001000110101001110100L);

				hammingDistance1(subject0, subject1, 0, 46);
			}

			@Test public void toGray_0_47() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111100011111111111110000001101001000110101000010101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111100011111111111110000001101001000110101000010110L);

				hammingDistance1(subject0, subject1, 0, 47);
			}

			@Test public void toGray_0_48() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111000011111111111101010001101001000110100110110101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111000011111111111101010001101001000110100110110110L);

				hammingDistance1(subject0, subject1, 0, 48);
			}

			@Test public void toGray_0_49() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100100000101001000110100101010011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100100000101001000110100101010100L);

				hammingDistance1(subject0, subject1, 0, 49);
			}

			@Test public void toGray_0_50() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111101101111111111111010111100101001000110100011101111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111101101111111111111010111100101001000110100011110000L);

				hammingDistance1(subject0, subject1, 0, 50);
			}

			@Test public void toGray_0_51() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111000111111111111111001010110101001000110100010001001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111000111111111111111001010110101001000110100010001010L);

				hammingDistance1(subject0, subject1, 0, 51);
			}

			@Test public void toGray_0_52() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110111111111111110110000110101001000110100000100001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110111111111111110110000110101001000110100000100010L);

				hammingDistance1(subject0, subject1, 0, 52);
			}

			@Test public void toGray_0_53() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111101001111111111111110010110010101001000110011110110111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111101001111111111111110010110010101001000110011110111000L);

				hammingDistance1(subject0, subject1, 0, 53);
			}

			@Test public void toGray_0_54() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111101111111111111101100000010101001000110011101001011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111101111111111111101100000010101001000110011101001100L);

				hammingDistance1(subject0, subject1, 0, 54);
			}

			@Test public void toGray_0_55() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110100001111111111111100101001010101001000110011011011101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110100001111111111111100101001010101001000110011011011110L);

				hammingDistance1(subject0, subject1, 0, 55);
			}

			@Test public void toGray_0_56() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100001111111111111010111001010101001000110011001101101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100001111111111111010111001010101001000110011001101110L);

				hammingDistance1(subject0, subject1, 0, 56);
			}

			@Test public void toGray_0_57() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001010001111111111111001000111010101001000110010111111011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001010001111111111111001000111010101001000110010111111100L);

				hammingDistance1(subject0, subject1, 0, 57);
			}

			@Test public void toGray_0_58() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111100010001111111111110101011111010101001000110010110000111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111100010001111111111110101011111010101001000110010110001000L);

				hammingDistance1(subject0, subject1, 0, 58);
			}

			@Test public void toGray_0_59() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111100001010001111111111110001110011010101001000110010100010001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111100001010001111111111110001110011010101001000110010100010010L);

				hammingDistance1(subject0, subject1, 0, 59);
			}

			@Test public void toGray_0_60() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111101001010001111111111101010010011010101001000110010010011001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111101001010001111111111101010010011010101001000110010010011010L);

				hammingDistance1(subject0, subject1, 0, 60);
			}

			@Test public void toGray_0_61() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110101010001111111111100010101011010101001000110010000011111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110101010001111111111100010101011010101001000110010000100000L);

				hammingDistance1(subject0, subject1, 0, 61);
			}

			@Test public void toGray_0_62() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100000101010001111111111010011001011010101001000110001110100011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100000101010001111111111010011001011010101001000110001110100100L);

				hammingDistance1(subject0, subject1, 0, 62);
			}

			@Test public void toGray_0_63() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100010101010001111111111000011011011010101001000110001100100101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100010101010001111111111000011011011010101001000110001100100110L);

				hammingDistance1(subject0, subject1, 0, 63);
			}

			@Test public void toGray_0_64() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100010101010001111111110100011011011010101001000110001010100101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100010101010001111111110100011011011010101001000110001010100110L);

				hammingDistance1(subject0, subject1, 0, 64);
			}

			@Test public void toGray_0_65() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011010101010001111111110000010111011010101001000110001000100011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011010101010001111111110000010111011010101001000110001000100100L);

				hammingDistance1(subject0, subject1, 0, 65);
			}

			@Test public void toGray_0_66() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0111010101010001111111101000000111011010101001000110000110011111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0111010101010001111111101000000111011010101001000110000110100000L);

				hammingDistance1(subject0, subject1, 0, 66);
			}

			@Test public void toGray_0_67() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1011010101010001111111011111101111011010101001000110000100011001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1011010101010001111111011111101111011010101001000110000100011010L);

				hammingDistance1(subject0, subject1, 0, 67);
			}

			@Test public void toGray_0_68() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1011010101010001111111001110101111011010101001000110000010010001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1011010101010001111111001110101111011010101001000110000010010010L);

				hammingDistance1(subject0, subject1, 0, 68);
			}

			@Test public void toGray_0_69() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111110111L,
				                   0b1011010101010001111110111101011111011010101001000110000000000111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111110111L,
				                   0b1011010101010001111110111101011111011010101001000110000000001000L);

				hammingDistance1(subject0, subject1, 0, 69);
			}

			@Test public void toGray_0_70() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111101011L,
				                   0b1011010101010001111110011010011111011010101001000101111101111011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111101011L,
				                   0b1011010101010001111110011010011111011010101001000101111101111100L);

				hammingDistance1(subject0, subject1, 0, 70);
			}

			@Test public void toGray_0_71() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111001111L,
				                   0b1011010101010001111101110110111111011010101001000101111011101101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111001111L,
				                   0b1011010101010001111101110110111111011010101001000101111011101110L);

				hammingDistance1(subject0, subject1, 0, 71);
			}

			@Test public void toGray_0_72() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111110001111L,
				                   0b1011010101010001111100101110111111011010101001000101111001011101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111110001111L,
				                   0b1011010101010001111100101110111111011010101001000101111001011110L);

				hammingDistance1(subject0, subject1, 0, 72);
			}

			@Test public void toGray_0_73() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111011111111L,
				                   0b1011010101010001111011100101111111011010101001000101110111001011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111011111111L,
				                   0b1011010101010001111011100101111111011010101001000101110111001100L);

				hammingDistance1(subject0, subject1, 0, 73);
			}

			@Test public void toGray_0_74() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111110110111111L,
				                   0b1011010101010001111001010001111111011010101001000101110100110111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111110110111111L,
				                   0b1011010101010001111001010001111111011010101001000101110100111000L);

				hammingDistance1(subject0, subject1, 0, 74);
			}

			@Test public void toGray_0_75() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111101011111111L,
				                   0b1011010101010001110110111011111111011010101001000101110010100001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111101011111111L,
				                   0b1011010101010001110110111011111111011010101001000101110010100010L);

				hammingDistance1(subject0, subject1, 0, 75);
			}

			@Test public void toGray_0_76() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111010011111111L,
				                   0b1011010101010001110010001011111111011010101001000101110000001001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111010011111111L,
				                   0b1011010101010001110010001011111111011010101001000101110000001010L);

				hammingDistance1(subject0, subject1, 0, 76);
			}

			@Test public void toGray_0_77() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1011010101010001101101010111111111011010101001000101101101101111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1011010101010001101101010111111111011010101001000101101101110000L);

				hammingDistance1(subject0, subject1, 0, 77);
			}

			@Test public void toGray_0_78() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111100101111111111L,
				                   0b1011010101010001100011100111111111011010101001000101101011010011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111100101111111111L,
				                   0b1011010101010001100011100111111111011010101001000101101011010100L);

				hammingDistance1(subject0, subject1, 0, 78);
			}

			@Test public void toGray_0_79() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111000111111111111L,
				                   0b1011010101010001011001101111111111011010101001000101101000110101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111000111111111111L,
				                   0b1011010101010001011001101111111111011010101001000101101000110110L);

				hammingDistance1(subject0, subject1, 0, 79);
			}

			@Test public void toGray_0_80() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111110000111111111111L,
				                   0b1011010101010001000101101111111111011010101001000101100110010101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111110000111111111111L,
				                   0b1011010101010001000101101111111111011010101001000101100110010110L);

				hammingDistance1(subject0, subject1, 0, 80);
			}

			@Test public void toGray_0_81() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011010101010000110001011111111111011010101001000101100011110011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011010101010000110001011111111111011010101001000101100011110100L);

				hammingDistance1(subject0, subject1, 0, 81);
			}

			@Test public void toGray_0_82() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111011011111111111111L,
				                   0b1011010101010000001000011111111111011010101001000101100001001111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111011011111111111111L,
				                   0b1011010101010000001000011111111111011010101001000101100001010000L);

				hammingDistance1(subject0, subject1, 0, 82);
			}

			@Test public void toGray_0_83() {
				T subject0 = build(0b1111111111111111111111111111111111111111111110001111111111111111L,
				                   0b1011010101001111011110111111111111011010101001000101011110101001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111110001111111111111111L,
				                   0b1011010101001111011110111111111111011010101001000101011110101010L);

				hammingDistance1(subject0, subject1, 0, 83);
			}

			@Test public void toGray_0_84() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111101111111111111111L,
				                   0b1011010101001110001010111111111111011010101001000101011100000001L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111101111111111111111L,
				                   0b1011010101001110001010111111111111011010101001000101011100000010L);

				hammingDistance1(subject0, subject1, 0, 84);
			}

			@Test public void toGray_0_85() {
				T subject0 = build(0b1111111111111111111111111111111111111111111010011111111111111111L,
				                   0b1011010101001100110101111111111111011010101001000101011001010111L);
				T subject1 = build(0b1111111111111111111111111111111111111111111010011111111111111111L,
				                   0b1011010101001100110101111111111111011010101001000101011001011000L);

				hammingDistance1(subject0, subject1, 0, 85);
			}

			@Test public void toGray_0_86() {
				T subject0 = build(0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1011010101001010001001111111111111011010101001000101010110101011L);
				T subject1 = build(0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1011010101001010001001111111111111011010101001000101010110101100L);

				hammingDistance1(subject0, subject1, 0, 86);
			}

			@Test public void toGray_0_87() {
				T subject0 = build(0b1111111111111111111111111111111111111111101000011111111111111111L,
				                   0b1011010101000111011011111111111111011010101001000101010011111101L);
				T subject1 = build(0b1111111111111111111111111111111111111111101000011111111111111111L,
				                   0b1011010101000111011011111111111111011010101001000101010011111110L);

				hammingDistance1(subject0, subject1, 0, 87);
			}

			@Test public void toGray_0_88() {
				T subject0 = build(0b1111111111111111111111111111111111111111111000011111111111111111L,
				                   0b1011010101000001111011111111111111011010101001000101010001001101L);
				T subject1 = build(0b1111111111111111111111111111111111111111111000011111111111111111L,
				                   0b1011010101000001111011111111111111011010101001000101010001001110L);

				hammingDistance1(subject0, subject1, 0, 88);
			}

			@Test public void toGray_0_89() {
				T subject0 = build(0b1111111111111111111111111111111111111110010100011111111111111111L,
				                   0b1011010100111100010111111111111111011010101001000101001110011011L);
				T subject1 = build(0b1111111111111111111111111111111111111110010100011111111111111111L,
				                   0b1011010100111100010111111111111111011010101001000101001110011100L);

				hammingDistance1(subject0, subject1, 0, 89);
			}

			@Test public void toGray_0_90() {
				T subject0 = build(0b1111111111111111111111111111111111111111000100011111111111111111L,
				                   0b1011010100110001000111111111111111011010101001000101001011100111L);
				T subject1 = build(0b1111111111111111111111111111111111111111000100011111111111111111L,
				                   0b1011010100110001000111111111111111011010101001000101001011101000L);

				hammingDistance1(subject0, subject1, 0, 90);
			}

			@Test public void toGray_0_91() {
				T subject0 = build(0b1111111111111111111111111111111111111000010100011111111111111111L,
				                   0b1011010100100101101111111111111111011010101001000101001000110001L);
				T subject1 = build(0b1111111111111111111111111111111111111000010100011111111111111111L,
				                   0b1011010100100101101111111111111111011010101001000101001000110010L);

				hammingDistance1(subject0, subject1, 0, 91);
			}

			@Test public void toGray_0_92() {
				T subject0 = build(0b1111111111111111111111111111111111111010010100011111111111111111L,
				                   0b1011010100001110101111111111111111011010101001000101000101111001L);
				T subject1 = build(0b1111111111111111111111111111111111111010010100011111111111111111L,
				                   0b1011010100001110101111111111111111011010101001000101000101111010L);

				hammingDistance1(subject0, subject1, 0, 92);
			}

			@Test public void toGray_0_93() {
				T subject0 = build(0b1111111111111111111111111111111111111101010100011111111111111111L,
				                   0b1011010011110111011111111111111111011010101001000101000010111111L);
				T subject1 = build(0b1111111111111111111111111111111111111101010100011111111111111111L,
				                   0b1011010011110111011111111111111111011010101001000101000011000000L);

				hammingDistance1(subject0, subject1, 0, 93);
			}

			@Test public void toGray_0_94() {
				T subject0 = build(0b1111111111111111111111111111111111000001010100011111111111111111L,
				                   0b1011010011001000011111111111111111011010101001000101000000000011L);
				T subject1 = build(0b1111111111111111111111111111111111000001010100011111111111111111L,
				                   0b1011010011001000011111111111111111011010101001000101000000000100L);

				hammingDistance1(subject0, subject1, 0, 94);
			}

			@Test public void toGray_0_95() {
				T subject0 = build(0b1111111111111111111111111111111111000101010100011111111111111111L,
				                   0b1011010010011000111111111111111111011010101001000100111101000101L);
				T subject1 = build(0b1111111111111111111111111111111111000101010100011111111111111111L,
				                   0b1011010010011000111111111111111111011010101001000100111101000110L);

				hammingDistance1(subject0, subject1, 0, 95);
			}

			@Test public void toGray_0_96() {
				T subject0 = build(0b1111111111111111111111111111111111000101010100011111111111111111L,
				                   0b1011010000111000111111111111111111011010101001000100111010000101L);
				T subject1 = build(0b1111111111111111111111111111111111000101010100011111111111111111L,
				                   0b1011010000111000111111111111111111011010101001000100111010000110L);

				hammingDistance1(subject0, subject1, 0, 96);
			}

			@Test public void toGray_0_97() {
				T subject0 = build(0b1111111111111111111111111111111110110101010100011111111111111111L,
				                   0b1011001111010111111111111111111111011010101001000100110111000011L);
				T subject1 = build(0b1111111111111111111111111111111110110101010100011111111111111111L,
				                   0b1011001111010111111111111111111111011010101001000100110111000100L);

				hammingDistance1(subject0, subject1, 0, 97);
			}

			@Test public void toGray_0_98() {
				T subject0 = build(0b1111111111111111111111111111111101110101010100011111111111111111L,
				                   0b1011001100010011111111111111111111011010101001000100110011111111L);
				T subject1 = build(0b1111111111111111111111111111111101110101010100011111111111111111L,
				                   0b1011001100010011111111111111111111011010101001000100110100000000L);

				hammingDistance1(subject0, subject1, 0, 98);
			}

			@Test public void toGray_0_99() {
				T subject0 = build(0b1111111111111111111111111111111010110101010100011111111111111111L,
				                   0b1011001001001101111111111111111111011010101001000100110000111001L);
				T subject1 = build(0b1111111111111111111111111111111010110101010100011111111111111111L,
				                   0b1011001001001101111111111111111111011010101001000100110000111010L);

				hammingDistance1(subject0, subject1, 0, 99);
			}

			@Test public void toGray_0_100() {
				T subject0 = build(0b1111111111111111111111111111110010110101010100011111111111111111L,
				                   0b1011000010111101111111111111111111011010101001000100101101110001L);
				T subject1 = build(0b1111111111111111111111111111110010110101010100011111111111111111L,
				                   0b1011000010111101111111111111111111011010101001000100101101110010L);

				hammingDistance1(subject0, subject1, 0, 100);
			}

			@Test public void toGray_0_101() {
				T subject0 = build(0b1111111111111111111111111111011110110101010100011111111111111111L,
				                   0b1010111100101001111111111111111111011010101001000100101010100111L);
				T subject1 = build(0b1111111111111111111111111111011110110101010100011111111111111111L,
				                   0b1010111100101001111111111111111111011010101001000100101010101000L);

				hammingDistance1(subject0, subject1, 0, 101);
			}

			@Test public void toGray_0_102() {
				T subject0 = build(0b1111111111111111111111111110101110110101010100011111111111111111L,
				                   0b1010101111111001111111111111111111011010101001000100100111011011L);
				T subject1 = build(0b1111111111111111111111111110101110110101010100011111111111111111L,
				                   0b1010101111111001111111111111111111011010101001000100100111011100L);

				hammingDistance1(subject0, subject1, 0, 102);
			}

			@Test public void toGray_0_103() {
				T subject0 = build(0b1111111111111111111111111100111110110101010100011111111111111111L,
				                   0b1010100011000001111111111111111111011010101001000100100100001101L);
				T subject1 = build(0b1111111111111111111111111100111110110101010100011111111111111111L,
				                   0b1010100011000001111111111111111111011010101001000100100100001110L);

				hammingDistance1(subject0, subject1, 0, 103);
			}

			@Test public void toGray_0_104() {
				T subject0 = build(0b1111111111111111111111111000111110110101010100011111111111111111L,
				                   0b1010001001000001111111111111111111011010101001000100100000111101L);
				T subject1 = build(0b1111111111111111111111111000111110110101010100011111111111111111L,
				                   0b1010001001000001111111111111111111011010101001000100100000111110L);

				hammingDistance1(subject0, subject1, 0, 104);
			}

			@Test public void toGray_0_105() {
				T subject0 = build(0b1111111111111111111111101111111110110101010100011111111111111111L,
				                   0b1001101110110001111111111111111111011010101001000100011101101011L);
				T subject1 = build(0b1111111111111111111111101111111110110101010100011111111111111111L,
				                   0b1001101110110001111111111111111111011010101001000100011101101100L);

				hammingDistance1(subject0, subject1, 0, 105);
			}

			@Test public void toGray_0_106() {
				T subject0 = build(0b1111111111111111111111011011111110110101010100011111111111111111L,
				                   0b1000111001110001111111111111111111011010101001000100011010010111L);
				T subject1 = build(0b1111111111111111111111011011111110110101010100011111111111111111L,
				                   0b1000111001110001111111111111111111011010101001000100011010011000L);

				hammingDistance1(subject0, subject1, 0, 106);
			}

			@Test public void toGray_0_107() {
				T subject0 = build(0b1111111111111111111110101111111110110101010100011111111111111111L,
				                   0b1000000100010001111111111111111111011010101001000100010111000001L);
				T subject1 = build(0b1111111111111111111110101111111110110101010100011111111111111111L,
				                   0b1000000100010001111111111111111111011010101001000100010111000010L);

				hammingDistance1(subject0, subject1, 0, 107);
			}

			@Test public void toGray_0_108() {
				T subject0 = build(0b1111111111111111111101001111111110110101010100011111111111111111L,
				                   0b0110011000010001111111111111111111011010101001000100010011101001L);
				T subject1 = build(0b1111111111111111111101001111111110110101010100011111111111111111L,
				                   0b0110011000010001111111111111111111011010101001000100010011101010L);

				hammingDistance1(subject0, subject1, 0, 108);
			}

			@Test public void toGray_0_109() {
				T subject0 = build(0b1111111111111111111001111111111110110101010100011111111111111111L,
				                   0b0100101011010001111111111111111111011010101001000100010000001111L);
				T subject1 = build(0b1111111111111111111001111111111110110101010100011111111111111111L,
				                   0b0100101011010001111111111111111111011010101001000100010000010000L);

				hammingDistance1(subject0, subject1, 0, 109);
			}

			@Test public void toGray_0_110() {
				T subject0 = build(0b1111111111111111110010111111111110110101010100011111111111111111L,
				                   0b0001001111010001111111111111111111011010101001000100001100110011L);
				T subject1 = build(0b1111111111111111110010111111111110110101010100011111111111111111L,
				                   0b0001001111010001111111111111111111011010101001000100001100110100L);

				hammingDistance1(subject0, subject1, 0, 110);
			}

			@Test public void toGray_0_111() {
				T subject0 = build(0b1111111111111111100011111111111110110101010100011111111111111110L,
				                   0b1101110001010001111111111111111111011010101001000100001001010101L);
				T subject1 = build(0b1111111111111111100011111111111110110101010100011111111111111110L,
				                   0b1101110001010001111111111111111111011010101001000100001001010110L);

				hammingDistance1(subject0, subject1, 0, 111);
			}

			@Test public void toGray_0_112() {
				T subject0 = build(0b1111111111111111000011111111111110110101010100011111111111111110L,
				                   0b0110110001010001111111111111111111011010101001000100000101110101L);
				T subject1 = build(0b1111111111111111000011111111111110110101010100011111111111111110L,
				                   0b0110110001010001111111111111111111011010101001000100000101110110L);

				hammingDistance1(subject0, subject1, 0, 112);
			}

			@Test public void toGray_0_113() {
				T subject0 = build(0b1111111111111111111111111111111110110101010100011111111111111101L,
				                   0b1111101101010001111111111111111111011010101001000100000010010011L);
				T subject1 = build(0b1111111111111111111111111111111110110101010100011111111111111101L,
				                   0b1111101101010001111111111111111111011010101001000100000010010100L);

				hammingDistance1(subject0, subject1, 0, 113);
			}

			@Test public void toGray_0_114() {
				T subject0 = build(0b1111111111111101101111111111111110110101010100011111111111111101L,
				                   0b0001011101010001111111111111111111011010101001000011111110101111L);
				T subject1 = build(0b1111111111111101101111111111111110110101010100011111111111111101L,
				                   0b0001011101010001111111111111111111011010101001000011111110110000L);

				hammingDistance1(subject0, subject1, 0, 114);
			}

			@Test public void toGray_0_115() {
				T subject0 = build(0b1111111111111000111111111111111110110101010100011111111111111100L,
				                   0b0011000101010001111111111111111111011010101001000011111011001001L);
				T subject1 = build(0b1111111111111000111111111111111110110101010100011111111111111100L,
				                   0b0011000101010001111111111111111111011010101001000011111011001010L);

				hammingDistance1(subject0, subject1, 0, 115);
			}

			@Test public void toGray_0_116() {
				T subject0 = build(0b1111111111111110111111111111111110110101010100011111111111111010L,
				                   0b0110000101010001111111111111111111011010101001000011110111100001L);
				T subject1 = build(0b1111111111111110111111111111111110110101010100011111111111111010L,
				                   0b0110000101010001111111111111111111011010101001000011110111100010L);

				hammingDistance1(subject0, subject1, 0, 116);
			}

			@Test public void toGray_0_117() {
				T subject0 = build(0b1111111111101001111111111111111110110101010100011111111111111000L,
				                   0b1000110101010001111111111111111111011010101001000011110011110111L);
				T subject1 = build(0b1111111111101001111111111111111110110101010100011111111111111000L,
				                   0b1000110101010001111111111111111111011010101001000011110011111000L);

				hammingDistance1(subject0, subject1, 0, 117);
			}

			@Test public void toGray_0_118() {
				T subject0 = build(0b1111111111111101111111111111111110110101010100011111111111110100L,
				                   0b1101110101010001111111111111111111011010101001000011110000001011L);
				T subject1 = build(0b1111111111111101111111111111111110110101010100011111111111110100L,
				                   0b1101110101010001111111111111111111011010101001000011110000001100L);

				hammingDistance1(subject0, subject1, 0, 118);
			}

			@Test public void toGray_0_119() {
				T subject0 = build(0b1111111110100001111111111111111110110101010100011111111111110001L,
				                   0b0010010101010001111111111111111111011010101001000011101100011101L);
				T subject1 = build(0b1111111110100001111111111111111110110101010100011111111111110001L,
				                   0b0010010101010001111111111111111111011010101001000011101100011110L);

				hammingDistance1(subject0, subject1, 0, 119);
			}

			@Test public void toGray_0_120() {
				T subject0 = build(0b1111111111100001111111111111111110110101010100011111111111101001L,
				                   0b1010010101010001111111111111111111011010101001000011101000101101L);
				T subject1 = build(0b1111111111100001111111111111111110110101010100011111111111101001L,
				                   0b1010010101010001111111111111111111011010101001000011101000101110L);

				hammingDistance1(subject0, subject1, 0, 120);
			}

			@Test public void toGray_0_121() {
				T subject0 = build(0b1111111001010001111111111111111110110101010100011111111111100010L,
				                   0b0001010101010001111111111111111111011010101001000011100100111011L);
				T subject1 = build(0b1111111001010001111111111111111110110101010100011111111111100010L,
				                   0b0001010101010001111111111111111111011010101001000011100100111100L);

				hammingDistance1(subject0, subject1, 0, 121);
			}

			@Test public void toGray_0_122() {
				T subject0 = build(0b1111111100010001111111111111111110110101010100011111111111010010L,
				                   0b1101010101010001111111111111111111011010101001000011100001000111L);
				T subject1 = build(0b1111111100010001111111111111111110110101010100011111111111010010L,
				                   0b1101010101010001111111111111111111011010101001000011100001001000L);

				hammingDistance1(subject0, subject1, 0, 122);
			}

			@Test public void toGray_0_123() {
				T subject0 = build(0b1111100001010001111111111111111110110101010100011111111111000011L,
				                   0b0111010101010001111111111111111111011010101001000011011101010001L);
				T subject1 = build(0b1111100001010001111111111111111110110101010100011111111111000011L,
				                   0b0111010101010001111111111111111111011010101001000011011101010010L);

				hammingDistance1(subject0, subject1, 0, 123);
			}

			@Test public void toGray_0_124() {
				T subject0 = build(0b1111101001010001111111111111111110110101010100011111111110100100L,
				                   0b0111010101010001111111111111111111011010101001000011011001011001L);
				T subject1 = build(0b1111101001010001111111111111111110110101010100011111111110100100L,
				                   0b0111010101010001111111111111111111011010101001000011011001011010L);

				hammingDistance1(subject0, subject1, 0, 124);
			}

			@Test public void toGray_0_125() {
				T subject0 = build(0b1111110101010001111111111111111110110101010100011111111110000101L,
				                   0b0011010101010001111111111111111111011010101001000011010101011111L);
				T subject1 = build(0b1111110101010001111111111111111110110101010100011111111110000101L,
				                   0b0011010101010001111111111111111111011010101001000011010101100000L);

				hammingDistance1(subject0, subject1, 0, 125);
			}

			@Test public void toGray_0_126() {
				T subject0 = build(0b1100000101010001111111111111111110110101010100011111111101000110L,
				                   0b0011010101010001111111111111111111011010101001000011010001100011L);
				T subject1 = build(0b1100000101010001111111111111111110110101010100011111111101000110L,
				                   0b0011010101010001111111111111111111011010101001000011010001100100L);

				hammingDistance1(subject0, subject1, 0, 126);
			}

			@Test public void toGray_0_127() {
				T subject0 = build(0b1100010101010001111111111111111110110101010100011111111100000110L,
				                   0b1011010101010001111111111111111111011010101001000011001101100101L);
				T subject1 = build(0b1100010101010001111111111111111110110101010100011111111100000110L,
				                   0b1011010101010001111111111111111111011010101001000011001101100110L);

				hammingDistance1(subject0, subject1, 0, 127);
			}

			@Test public void toGray_0_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000000L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);

				hammingDistance1(subject0, subject1, 0, 128);
			}

			@Test public void toGray_1_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000111L);

				hammingDistance1(subject0, subject1, 1, 128);
			}

			@Test public void toGray_2_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L);

				hammingDistance1(subject0, subject1, 2, 128);
			}

			@Test public void toGray_3_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000110101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000111101L);

				hammingDistance1(subject0, subject1, 3, 128);
			}

			@Test public void toGray_4_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010000101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010010101L);

				hammingDistance1(subject0, subject1, 4, 128);
			}

			@Test public void toGray_5_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000100111111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101011111L);

				hammingDistance1(subject0, subject1, 5, 128);
			}

			@Test public void toGray_6_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001011101011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100101011L);

				hammingDistance1(subject0, subject1, 6, 128);
			}

			@Test public void toGray_7_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000011010111001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000011100111001L);

				hammingDistance1(subject0, subject1, 7, 128);
			}

			@Test public void toGray_8_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000111101001001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001000001001001L);

				hammingDistance1(subject0, subject1, 8, 128);
			}

			@Test public void toGray_9_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000010001001011011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000010010001011011L);

				hammingDistance1(subject0, subject1, 9, 128);
			}

			@Test public void toGray_10_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000100110001101111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000101000001101111L);

				hammingDistance1(subject0, subject1, 10, 128);
			}

			@Test public void toGray_11_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001010100111100101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001011000111100101L);

				hammingDistance1(subject0, subject1, 11, 128);
			}

			@Test public void toGray_12_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000010111010011111101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000010011111101L);

				hammingDistance1(subject0, subject1, 12, 128);
			}

			@Test public void toGray_13_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000110010100001010111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000110100100001010111L);

				hammingDistance1(subject0, subject1, 13, 128);
			}

			@Test public void toGray_14_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001101100111101110011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001110000111101110011L);

				hammingDistance1(subject0, subject1, 14, 128);
			}

			@Test public void toGray_15_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000011101001011100010001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000011110001011100010001L);

				hammingDistance1(subject0, subject1, 15, 128);
			}

			@Test public void toGray_16_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000111111010011100110001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000001000001010011100110001L);

				hammingDistance1(subject0, subject1, 16, 128);
			}

			@Test public void toGray_17_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010000111100100001010011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010001011100100001010011L);

				hammingDistance1(subject0, subject1, 17, 128);
			}

			@Test public void toGray_18_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000100011000010110001110111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000100100000010110001110111L);

				hammingDistance1(subject0, subject1, 18, 128);
			}

			@Test public void toGray_19_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001001011010001001010011101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001001101010001001010011101L);

				hammingDistance1(subject0, subject1, 19, 128);
			}

			@Test public void toGray_20_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000010011111110110001011000101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000010100011110110001011000101L);

				hammingDistance1(subject0, subject1, 20, 128);
			}

			@Test public void toGray_21_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000101001001001011011011101111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000101010001001011011011101111L);

				hammingDistance1(subject0, subject1, 21, 128);
			}

			@Test public void toGray_22_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000001010111100010110011100011011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000001011001100010110011100011011L);

				hammingDistance1(subject0, subject1, 22, 128);
			}

			@Test public void toGray_23_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010110100011100001111101001001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111000011100001111101001001L);

				hammingDistance1(subject0, subject1, 23, 128);
			}

			@Test public void toGray_24_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000101111110011111001111101111001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000110000110011111001111101111001L);

				hammingDistance1(subject0, subject1, 24, 128);
			}

			@Test public void toGray_25_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100010011000010010111110101011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100100011000010010111110101011L);

				hammingDistance1(subject0, subject1, 25, 128);
			}

			@Test public void toGray_26_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000011001111101001000110111111011111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000011010011101001000110111111011111L);

				hammingDistance1(subject0, subject1, 26, 128);
			}

			@Test public void toGray_27_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110101010011001111101000000010101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110110010011001111101000000010101L);

				hammingDistance1(subject0, subject1, 27, 128);
			}

			@Test public void toGray_28_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001101110000011011101101000001001101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001110000000011011101101000001001101L);

				hammingDistance1(subject0, subject1, 28, 128);
			}

			@Test public void toGray_29_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011100111101011101100001000010000111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011101011101011101100001000010000111L);

				hammingDistance1(subject0, subject1, 29, 128);
			}

			@Test public void toGray_30_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000111011011001100001010001000011000011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000111100011001100001010001000011000011L);

				hammingDistance1(subject0, subject1, 30, 128);
			}

			@Test public void toGray_31_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111010010101100101001001000100000001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111100010101100101001001000100000001L);

				hammingDistance1(subject0, subject1, 31, 128);
			}

			@Test public void toGray_32_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000011111100010101101101001001000101000001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000100000000010101101101001001000101000001L);

				hammingDistance1(subject0, subject1, 32, 128);
			}

			@Test public void toGray_33_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000001000001000100101110101011001000110000011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000001000010000100101110101011001000110000011L);

				hammingDistance1(subject0, subject1, 33, 128);
			}

			@Test public void toGray_34_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010000110001100110000110011001000111000111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010001000001100110000110011001000111000111L);

				hammingDistance1(subject0, subject1, 34, 128);
			}

			@Test public void toGray_35_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000100010100100100110010111111001001000001101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000100011000100100110010111111001001000001101L);

				hammingDistance1(subject0, subject1, 35, 128);
			}

			@Test public void toGray_36_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000001000111001100100110111011111001001001010101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000001001000001100100110111011111001001001010101L);

				hammingDistance1(subject0, subject1, 36, 128);
			}

			@Test public void toGray_37_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000010010010100000100111100000111001001010011111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000010010100100000100111100000111001001010011111L);

				hammingDistance1(subject0, subject1, 37, 128);
			}

			@Test public void toGray_38_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000100101101010000101000101100111001001011101011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000100110001010000101000101100111001001011101011L);

				hammingDistance1(subject0, subject1, 38, 128);
			}

			@Test public void toGray_39_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000001001101011000000101001111010111001001100111001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000001001110011000000101001111010111001001100111001L);

				hammingDistance1(subject0, subject1, 39, 128);
			}

			@Test public void toGray_40_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000010011110111000000101100011010111001001110001001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000010100000111000000101100011010111001001110001001L);

				hammingDistance1(subject0, subject1, 40, 128);
			}

			@Test public void toGray_41_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000101000110000000000101110111110111001001111011011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000101001010000000000101110111110111001001111011011L);

				hammingDistance1(subject0, subject1, 41, 128);
			}

			@Test public void toGray_42_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001010011100100000000110100001110111001010000101111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001010100100100000000110100001110111001010000101111L);

				hammingDistance1(subject0, subject1, 42, 128);
			}

			@Test public void toGray_43_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000010101011010000000000111001100110111001010010000101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000010101101010000000000111001100110111001010010000101L);

				hammingDistance1(subject0, subject1, 43, 128);
			}

			@Test public void toGray_44_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000101011110110000000001000100100110111001010011011101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000101100010110000000001000100100110111001010011011101L);

				hammingDistance1(subject0, subject1, 44, 128);
			}

			@Test public void toGray_45_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000001011001110000000000001001111110110111001010100110111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000001011010110000000000001001111110110111001010100110111L);

				hammingDistance1(subject0, subject1, 45, 128);
			}

			@Test public void toGray_46_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000010110111101000000000001100110110110111001010110010011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000010111001101000000000001100110110110111001010110010011L);

				hammingDistance1(subject0, subject1, 46, 128);
			}

			@Test public void toGray_47_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000101110111100000000000001111110010110111001010111110001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000101111011100000000000001111110010110111001010111110001L);

				hammingDistance1(subject0, subject1, 47, 128);
			}

			@Test public void toGray_48_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000001011111111100000000000010101110010110111001011001010001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000001100000111100000000000010101110010110111001011001010001L);

				hammingDistance1(subject0, subject1, 48, 128);
			}

			@Test public void toGray_49_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011000010000000000000000011011111010110111001011010110011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011000100000000000000000011011111010110111001011010110011L);

				hammingDistance1(subject0, subject1, 49, 128);
			}

			@Test public void toGray_50_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110001110010000000000000101000011010110111001011100010111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110010010010000000000000101000011010110111001011100010111L);

				hammingDistance1(subject0, subject1, 50, 128);
			}

			@Test public void toGray_51_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100101111000000000000000110101001010110111001011101111101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100110111000000000000000110101001010110111001011101111101L);

				hammingDistance1(subject0, subject1, 51, 128);
			}

			@Test public void toGray_52_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011001110001000000000000001001111001010110111001011111100101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011010000001000000000000001001111001010110111001011111100101L);

				hammingDistance1(subject0, subject1, 52, 128);
			}

			@Test public void toGray_53_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000110100110110000000000000001101001101010110111001100001001111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000110101010110000000000000001101001101010110111001100001001111L);

				hammingDistance1(subject0, subject1, 53, 128);
			}

			@Test public void toGray_54_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001101011000010000000000000010011111101010110111001100010111011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001101100000010000000000000010011111101010110111001100010111011L);

				hammingDistance1(subject0, subject1, 54, 128);
			}

			@Test public void toGray_55_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0011011011011110000000000000011010110101010110111001100100101001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0011011101011110000000000000011010110101010110111001100100101001L);

				hammingDistance1(subject0, subject1, 55, 128);
			}

			@Test public void toGray_56_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0110111100011110000000000000101000110101010110111001100110011001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0111000000011110000000000000101000110101010110111001100110011001L);

				hammingDistance1(subject0, subject1, 56, 128);
			}

			@Test public void toGray_57_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b1110001110101110000000000000110111000101010110111001101000001011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b1110010110101110000000000000110111000101010110111001101000001011L);

				hammingDistance1(subject0, subject1, 57, 128);
			}

			@Test public void toGray_58_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1100110011101110000000000001010100000101010110111001101001111111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1101000011101110000000000001010100000101010110111001101001111111L);

				hammingDistance1(subject0, subject1, 58, 128);
			}

			@Test public void toGray_59_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1010111110101110000000000001110001100101010110111001101011110101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1011011110101110000000000001110001100101010110111001101011110101L);

				hammingDistance1(subject0, subject1, 59, 128);
			}

			@Test public void toGray_60_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000000111L,
				                   0b0111010110101110000000000010101101100101010110111001101101101101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000000111L,
				                   0b1000010110101110000000000010101101100101010110111001101101101101L);

				hammingDistance1(subject0, subject1, 60, 128);
			}

			@Test public void toGray_61_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000001111L,
				                   0b0010001010101110000000000011101010100101010110111001101111100111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000001111L,
				                   0b0100001010101110000000000011101010100101010110111001101111100111L);

				hammingDistance1(subject0, subject1, 61, 128);
			}

			@Test public void toGray_62_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000011110L,
				                   0b1111111010101110000000000101100110100101010110111001110001100011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b0011111010101110000000000101100110100101010110111001110001100011L);

				hammingDistance1(subject0, subject1, 62, 128);
			}

			@Test public void toGray_63_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000000111110L,
				                   0b1011101010101110000000000111100100100101010110111001110011100001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000000111111L,
				                   0b0011101010101110000000000111100100100101010110111001110011100001L);

				hammingDistance1(subject0, subject1, 63, 128);
			}

			@Test public void toGray_64_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000001111111L,
				                   0b0011101010101110000000001011100100100101010110111001110101100001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000010000000L,
				                   0b0011101010101110000000001011100100100101010110111001110101100001L);

				hammingDistance1(subject0, subject1, 64, 128);
			}

			@Test public void toGray_65_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000000100000010L,
				                   0b0100101010101110000000001111101000100101010110111001110111100011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000000100000100L,
				                   0b0100101010101110000000001111101000100101010110111001110111100011L);

				hammingDistance1(subject0, subject1, 65, 128);
			}

			@Test public void toGray_66_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000001000001100L,
				                   0b1000101010101110000000010111111000100101010110111001111001100111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000001000010000L,
				                   0b1000101010101110000000010111111000100101010110111001111001100111L);

				hammingDistance1(subject0, subject1, 66, 128);
			}

			@Test public void toGray_67_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000010000101001L,
				                   0b0100101010101110000000100000010000100101010110111001111011101101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000010000110001L,
				                   0b0100101010101110000000100000010000100101010110111001111011101101L);

				hammingDistance1(subject0, subject1, 67, 128);
			}

			@Test public void toGray_68_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000000100001110011L,
				                   0b0100101010101110000000110001010000100101010110111001111101110101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000000100010000011L,
				                   0b0100101010101110000000110001010000100101010110111001111101110101L);

				hammingDistance1(subject0, subject1, 68, 128);
			}

			@Test public void toGray_69_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000001000100101000L,
				                   0b0100101010101110000001000010100000100101010110111001111111111111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000001000101001000L,
				                   0b0100101010101110000001000010100000100101010110111001111111111111L);

				hammingDistance1(subject0, subject1, 69, 128);
			}

			@Test public void toGray_70_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000010001011010100L,
				                   0b0100101010101110000001100101100000100101010110111010000010001011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000010001100010100L,
				                   0b0100101010101110000001100101100000100101010110111010000010001011L);

				hammingDistance1(subject0, subject1, 70, 128);
			}

			@Test public void toGray_71_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000000100011010110000L,
				                   0b0100101010101110000010001001000000100101010110111010000100011001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000000100011100110000L,
				                   0b0100101010101110000010001001000000100101010110111010000100011001L);

				hammingDistance1(subject0, subject1, 71, 128);
			}

			@Test public void toGray_72_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000001000111101110000L,
				                   0b0100101010101110000011010001000000100101010110111010000110101001L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000001001000001110000L,
				                   0b0100101010101110000011010001000000100101010110111010000110101001L);

				hammingDistance1(subject0, subject1, 72, 128);
			}

			@Test public void toGray_73_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000010010001100000000L,
				                   0b0100101010101110000100011010000000100101010110111010001000111011L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000010010010100000000L,
				                   0b0100101010101110000100011010000000100101010110111010001000111011L);

				hammingDistance1(subject0, subject1, 73, 128);
			}

			@Test public void toGray_74_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000000100100111001000000L,
				                   0b0100101010101110000110101110000000100101010110111010001011001111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000000100101001001000000L,
				                   0b0100101010101110000110101110000000100101010110111010001011001111L);

				hammingDistance1(subject0, subject1, 74, 128);
			}

			@Test public void toGray_75_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000001001010110100000000L,
				                   0b0100101010101110001001000100000000100101010110111010001101100101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000001001011010100000000L,
				                   0b0100101010101110001001000100000000100101010110111010001101100101L);

				hammingDistance1(subject0, subject1, 75, 128);
			}

			@Test public void toGray_76_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000010010111101100000000L,
				                   0b0100101010101110001101110100000000100101010110111010001111111101L);
				T subject1 = build(0b0000000000000000000000000000000000000000000010011000101100000000L,
				                   0b0100101010101110001101110100000000100101010110111010001111111101L);

				hammingDistance1(subject0, subject1, 76, 128);
			}

			@Test public void toGray_77_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000000100110011100000000000L,
				                   0b0100101010101110010010101000000000100101010110111010010010010111L);
				T subject1 = build(0b0000000000000000000000000000000000000000000100110101100000000000L,
				                   0b0100101010101110010010101000000000100101010110111010010010010111L);

				hammingDistance1(subject0, subject1, 77, 128);
			}

			@Test public void toGray_78_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000001001101111010000000000L,
				                   0b0100101010101110011100011000000000100101010110111010010100110011L);
				T subject1 = build(0b0000000000000000000000000000000000000000001001110011010000000000L,
				                   0b0100101010101110011100011000000000100101010110111010010100110011L);

				hammingDistance1(subject0, subject1, 78, 128);
			}

			@Test public void toGray_79_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000010011101111000000000000L,
				                   0b0100101010101110100110010000000000100101010110111010010111010001L);
				T subject1 = build(0b0000000000000000000000000000000000000000010011110111000000000000L,
				                   0b0100101010101110100110010000000000100101010110111010010111010001L);

				hammingDistance1(subject0, subject1, 79, 128);
			}

			@Test public void toGray_80_128() {
				T subject0 = build(0b0000000000000000000000000000000000000000100111111111000000000000L,
				                   0b0100101010101110111010010000000000100101010110111010011001110001L);
				T subject1 = build(0b0000000000000000000000000000000000000000101000001111000000000000L,
				                   0b0100101010101110111010010000000000100101010110111010011001110001L);

				hammingDistance1(subject0, subject1, 80, 128);
			}

			@Test public void toGray_81_128() {
				T subject0 = build(0b0000000000000000000000000000000000000001010000100000000000000000L,
				                   0b0100101010101111001110100000000000100101010110111010011100010011L);
				T subject1 = build(0b0000000000000000000000000000000000000001010001000000000000000000L,
				                   0b0100101010101111001110100000000000100101010110111010011100010011L);

				hammingDistance1(subject0, subject1, 81, 128);
			}

			@Test public void toGray_82_128() {
				T subject0 = build(0b0000000000000000000000000000000000000010100011100100000000000000L,
				                   0b0100101010101111110111100000000000100101010110111010011110110111L);
				T subject1 = build(0b0000000000000000000000000000000000000010100100100100000000000000L,
				                   0b0100101010101111110111100000000000100101010110111010011110110111L);

				hammingDistance1(subject0, subject1, 82, 128);
			}

			@Test public void toGray_83_128() {
				T subject0 = build(0b0000000000000000000000000000000000000101001011110000000000000000L,
				                   0b0100101010110000100001000000000000100101010110111010100001011101L);
				T subject1 = build(0b0000000000000000000000000000000000000101001101110000000000000000L,
				                   0b0100101010110000100001000000000000100101010110111010100001011101L);

				hammingDistance1(subject0, subject1, 83, 128);
			}

			@Test public void toGray_84_128() {
				T subject0 = build(0b0000000000000000000000000000000000001010011100010000000000000000L,
				                   0b0100101010110001110101000000000000100101010110111010100100000101L);
				T subject1 = build(0b0000000000000000000000000000000000001010100000010000000000000000L,
				                   0b0100101010110001110101000000000000100101010110111010100100000101L);

				hammingDistance1(subject0, subject1, 84, 128);
			}

			@Test public void toGray_85_128() {
				T subject0 = build(0b0000000000000000000000000000000000010101001101100000000000000000L,
				                   0b0100101010110011001010000000000000100101010110111010100110101111L);
				T subject1 = build(0b0000000000000000000000000000000000010101010101100000000000000000L,
				                   0b0100101010110011001010000000000000100101010110111010100110101111L);

				hammingDistance1(subject0, subject1, 85, 128);
			}

			@Test public void toGray_86_128() {
				T subject0 = build(0b0000000000000000000000000000000000101010110000100000000000000000L,
				                   0b0100101010110101110110000000000000100101010110111010101001011011L);
				T subject1 = build(0b0000000000000000000000000000000000101011000000100000000000000000L,
				                   0b0100101010110101110110000000000000100101010110111010101001011011L);

				hammingDistance1(subject0, subject1, 86, 128);
			}

			@Test public void toGray_87_128() {
				T subject0 = build(0b0000000000000000000000000000000001010110110111100000000000000000L,
				                   0b0100101010111000100100000000000000100101010110111010101100001001L);
				T subject1 = build(0b0000000000000000000000000000000001010111010111100000000000000000L,
				                   0b0100101010111000100100000000000000100101010110111010101100001001L);

				hammingDistance1(subject0, subject1, 87, 128);
			}

			@Test public void toGray_88_128() {
				T subject0 = build(0b0000000000000000000000000000000010101111000111100000000000000000L,
				                   0b0100101010111110000100000000000000100101010110111010101110111001L);
				T subject1 = build(0b0000000000000000000000000000000010110000000111100000000000000000L,
				                   0b0100101010111110000100000000000000100101010110111010101110111001L);

				hammingDistance1(subject0, subject1, 88, 128);
			}

			@Test public void toGray_89_128() {
				T subject0 = build(0b0000000000000000000000000000000101100011101011100000000000000000L,
				                   0b0100101011000011101000000000000000100101010110111010110001101011L);
				T subject1 = build(0b0000000000000000000000000000000101100101101011100000000000000000L,
				                   0b0100101011000011101000000000000000100101010110111010110001101011L);

				hammingDistance1(subject0, subject1, 89, 128);
			}

			@Test public void toGray_90_128() {
				T subject0 = build(0b0000000000000000000000000000001011001100111011100000000000000000L,
				                   0b0100101011001110111000000000000000100101010110111010110100011111L);
				T subject1 = build(0b0000000000000000000000000000001011010000111011100000000000000000L,
				                   0b0100101011001110111000000000000000100101010110111010110100011111L);

				hammingDistance1(subject0, subject1, 90, 128);
			}

			@Test public void toGray_91_128() {
				T subject0 = build(0b0000000000000000000000000000010110101111101011100000000000000000L,
				                   0b0100101011011010010000000000000000100101010110111010110111010101L);
				T subject1 = build(0b0000000000000000000000000000010110110111101011100000000000000000L,
				                   0b0100101011011010010000000000000000100101010110111010110111010101L);

				hammingDistance1(subject0, subject1, 91, 128);
			}

			@Test public void toGray_92_128() {
				T subject0 = build(0b0000000000000000000000000000101101110101101011100000000000000000L,
				                   0b0100101011110001010000000000000000100101010110111010111010001101L);
				T subject1 = build(0b0000000000000000000000000000101110000101101011100000000000000000L,
				                   0b0100101011110001010000000000000000100101010110111010111010001101L);

				hammingDistance1(subject0, subject1, 92, 128);
			}

			@Test public void toGray_93_128() {
				T subject0 = build(0b0000000000000000000000000001011100100010101011100000000000000000L,
				                   0b0100101100001000100000000000000000100101010110111010111101000111L);
				T subject1 = build(0b0000000000000000000000000001011101000010101011100000000000000000L,
				                   0b0100101100001000100000000000000000100101010110111010111101000111L);

				hammingDistance1(subject0, subject1, 93, 128);
			}

			@Test public void toGray_94_128() {
				T subject0 = build(0b0000000000000000000000000010111011111110101011100000000000000000L,
				                   0b0100101100110111100000000000000000100101010110111011000000000011L);
				T subject1 = build(0b0000000000000000000000000010111100111110101011100000000000000000L,
				                   0b0100101100110111100000000000000000100101010110111011000000000011L);

				hammingDistance1(subject0, subject1, 94, 128);
			}

			@Test public void toGray_95_128() {
				T subject0 = build(0b0000000000000000000000000101111010111010101011100000000000000000L,
				                   0b0100101101100111000000000000000000100101010110111011000011000001L);
				T subject1 = build(0b0000000000000000000000000101111100111010101011100000000000000000L,
				                   0b0100101101100111000000000000000000100101010110111011000011000001L);

				hammingDistance1(subject0, subject1, 95, 128);
			}

			@Test public void toGray_96_128() {
				T subject0 = build(0b0000000000000000000000001011111100111010101011100000000000000000L,
				                   0b0100101111000111000000000000000000100101010110111011000110000001L);
				T subject1 = build(0b0000000000000000000000001100000000111010101011100000000000000000L,
				                   0b0100101111000111000000000000000000100101010110111011000110000001L);

				hammingDistance1(subject0, subject1, 96, 128);
			}

			@Test public void toGray_97_128() {
				T subject0 = build(0b0000000000000000000000011000001001001010101011100000000000000000L,
				                   0b0100110000101000000000000000000000100101010110111011001001000011L);
				T subject1 = build(0b0000000000000000000000011000010001001010101011100000000000000000L,
				                   0b0100110000101000000000000000000000100101010110111011001001000011L);

				hammingDistance1(subject0, subject1, 97, 128);
			}

			@Test public void toGray_98_128() {
				T subject0 = build(0b0000000000000000000000110000110010001010101011100000000000000000L,
				                   0b0100110011101100000000000000000000100101010110111011001100000111L);
				T subject1 = build(0b0000000000000000000000110001000010001010101011100000000000000000L,
				                   0b0100110011101100000000000000000000100101010110111011001100000111L);

				hammingDistance1(subject0, subject1, 98, 128);
			}

			@Test public void toGray_99_128() {
				T subject0 = build(0b0000000000000000000001100010100101001010101011100000000000000000L,
				                   0b0100110110110010000000000000000000100101010110111011001111001101L);
				T subject1 = build(0b0000000000000000000001100011000101001010101011100000000000000000L,
				                   0b0100110110110010000000000000000000100101010110111011001111001101L);

				hammingDistance1(subject0, subject1, 99, 128);
			}

			@Test public void toGray_100_128() {
				T subject0 = build(0b0000000000000000000011000111001101001010101011100000000000000000L,
				                   0b0100111101000010000000000000000000100101010110111011010010010101L);
				T subject1 = build(0b0000000000000000000011001000001101001010101011100000000000000000L,
				                   0b0100111101000010000000000000000000100101010110111011010010010101L);

				hammingDistance1(subject0, subject1, 100, 128);
			}

			@Test public void toGray_101_128() {
				T subject0 = build(0b0000000000000000000110010010100001001010101011100000000000000000L,
				                   0b0101000011010110000000000000000000100101010110111011010101011111L);
				T subject1 = build(0b0000000000000000000110010100100001001010101011100000000000000000L,
				                   0b0101000011010110000000000000000000100101010110111011010101011111L);

				hammingDistance1(subject0, subject1, 101, 128);
			}

			@Test public void toGray_102_128() {
				T subject0 = build(0b0000000000000000001100101101010001001010101011100000000000000000L,
				                   0b0101010000000110000000000000000000100101010110111011011000101011L);
				T subject1 = build(0b0000000000000000001100110001010001001010101011100000000000000000L,
				                   0b0101010000000110000000000000000000100101010110111011011000101011L);

				hammingDistance1(subject0, subject1, 102, 128);
			}

			@Test public void toGray_103_128() {
				T subject0 = build(0b0000000000000000011001101011000001001010101011100000000000000000L,
				                   0b0101011100111110000000000000000000100101010110111011011011111001L);
				T subject1 = build(0b0000000000000000011001110011000001001010101011100000000000000000L,
				                   0b0101011100111110000000000000000000100101010110111011011011111001L);

				hammingDistance1(subject0, subject1, 103, 128);
			}

			@Test public void toGray_104_128() {
				T subject0 = build(0b0000000000000000110011110111000001001010101011100000000000000000L,
				                   0b0101110110111110000000000000000000100101010110111011011111001001L);
				T subject1 = build(0b0000000000000000110100000111000001001010101011100000000000000000L,
				                   0b0101110110111110000000000000000000100101010110111011011111001001L);

				hammingDistance1(subject0, subject1, 104, 128);
			}

			@Test public void toGray_105_128() {
				T subject0 = build(0b0000000000000001101000110000000001001010101011100000000000000000L,
				                   0b0110010001001110000000000000000000100101010110111011100010011011L);
				T subject1 = build(0b0000000000000001101001010000000001001010101011100000000000000000L,
				                   0b0110010001001110000000000000000000100101010110111011100010011011L);

				hammingDistance1(subject0, subject1, 105, 128);
			}

			@Test public void toGray_106_128() {
				T subject0 = build(0b0000000000000011010011100100000001001010101011100000000000000000L,
				                   0b0111000110001110000000000000000000100101010110111011100101101111L);
				T subject1 = build(0b0000000000000011010100100100000001001010101011100000000000000000L,
				                   0b0111000110001110000000000000000000100101010110111011100101101111L);

				hammingDistance1(subject0, subject1, 106, 128);
			}

			@Test public void toGray_107_128() {
				T subject0 = build(0b0000000000000110101011010000000001001010101011100000000000000000L,
				                   0b0111111011101110000000000000000000100101010110111011101001000101L);
				T subject1 = build(0b0000000000000110101101010000000001001010101011100000000000000000L,
				                   0b0111111011101110000000000000000000100101010110111011101001000101L);

				hammingDistance1(subject0, subject1, 107, 128);
			}

			@Test public void toGray_108_128() {
				T subject0 = build(0b0000000000001101011110110000000001001010101011100000000000000000L,
				                   0b1001100111101110000000000000000000100101010110111011101100011101L);
				T subject1 = build(0b0000000000001101100010110000000001001010101011100000000000000000L,
				                   0b1001100111101110000000000000000000100101010110111011101100011101L);

				hammingDistance1(subject0, subject1, 108, 128);
			}

			@Test public void toGray_109_128() {
				T subject0 = build(0b0000000000011011001110000000000001001010101011100000000000000000L,
				                   0b1011010100101110000000000000000000100101010110111011101111110111L);
				T subject1 = build(0b0000000000011011010110000000000001001010101011100000000000000000L,
				                   0b1011010100101110000000000000000000100101010110111011101111110111L);

				hammingDistance1(subject0, subject1, 109, 128);
			}

			@Test public void toGray_110_128() {
				T subject0 = build(0b0000000000110110111101000000000001001010101011100000000000000000L,
				                   0b1110110000101110000000000000000000100101010110111011110011010011L);
				T subject1 = build(0b0000000000110111001101000000000001001010101011100000000000000000L,
				                   0b1110110000101110000000000000000000100101010110111011110011010011L);

				hammingDistance1(subject0, subject1, 110, 128);
			}

			@Test public void toGray_111_128() {
				T subject0 = build(0b0000000001101110111100000000000001001010101011100000000000000001L,
				                   0b0010001110101110000000000000000000100101010110111011110110110001L);
				T subject1 = build(0b0000000001101111011100000000000001001010101011100000000000000001L,
				                   0b0010001110101110000000000000000000100101010110111011110110110001L);

				hammingDistance1(subject0, subject1, 111, 128);
			}

			@Test public void toGray_112_128() {
				T subject0 = build(0b0000000011011111111100000000000001001010101011100000000000000001L,
				                   0b1001001110101110000000000000000000100101010110111011111010010001L);
				T subject1 = build(0b0000000011100000111100000000000001001010101011100000000000000001L,
				                   0b1001001110101110000000000000000000100101010110111011111010010001L);

				hammingDistance1(subject0, subject1, 112, 128);
			}

			@Test public void toGray_113_128() {
				T subject0 = build(0b0000000111000010000000000000000001001010101011100000000000000010L,
				                   0b0000010010101110000000000000000000100101010110111011111101110011L);
				T subject1 = build(0b0000000111000100000000000000000001001010101011100000000000000010L,
				                   0b0000010010101110000000000000000000100101010110111011111101110011L);

				hammingDistance1(subject0, subject1, 113, 128);
			}

			@Test public void toGray_114_128() {
				T subject0 = build(0b0000001110001110010000000000000001001010101011100000000000000010L,
				                   0b1110100010101110000000000000000000100101010110111100000001010111L);
				T subject1 = build(0b0000001110010010010000000000000001001010101011100000000000000010L,
				                   0b1110100010101110000000000000000000100101010110111100000001010111L);

				hammingDistance1(subject0, subject1, 114, 128);
			}

			@Test public void toGray_115_128() {
				T subject0 = build(0b0000011100101111000000000000000001001010101011100000000000000011L,
				                   0b1100111010101110000000000000000000100101010110111100000100111101L);
				T subject1 = build(0b0000011100110111000000000000000001001010101011100000000000000011L,
				                   0b1100111010101110000000000000000000100101010110111100000100111101L);

				hammingDistance1(subject0, subject1, 115, 128);
			}

			@Test public void toGray_116_128() {
				T subject0 = build(0b0000111001110001000000000000000001001010101011100000000000000101L,
				                   0b1001111010101110000000000000000000100101010110111100001000100101L);
				T subject1 = build(0b0000111010000001000000000000000001001010101011100000000000000101L,
				                   0b1001111010101110000000000000000000100101010110111100001000100101L);

				hammingDistance1(subject0, subject1, 116, 128);
			}

			@Test public void toGray_117_128() {
				T subject0 = build(0b0001110100110110000000000000000001001010101011100000000000000111L,
				                   0b0111001010101110000000000000000000100101010110111100001100001111L);
				T subject1 = build(0b0001110101010110000000000000000001001010101011100000000000000111L,
				                   0b0111001010101110000000000000000000100101010110111100001100001111L);

				hammingDistance1(subject0, subject1, 117, 128);
			}

			@Test public void toGray_118_128() {
				T subject0 = build(0b0011101011000010000000000000000001001010101011100000000000001011L,
				                   0b0010001010101110000000000000000000100101010110111100001111111011L);
				T subject1 = build(0b0011101100000010000000000000000001001010101011100000000000001011L,
				                   0b0010001010101110000000000000000000100101010110111100001111111011L);

				hammingDistance1(subject0, subject1, 118, 128);
			}

			@Test public void toGray_119_128() {
				T subject0 = build(0b0111011011011110000000000000000001001010101011100000000000001110L,
				                   0b1101101010101110000000000000000000100101010110111100010011101001L);
				T subject1 = build(0b0111011101011110000000000000000001001010101011100000000000001110L,
				                   0b1101101010101110000000000000000000100101010110111100010011101001L);

				hammingDistance1(subject0, subject1, 119, 128);
			}

			@Test public void toGray_120_128() {
				T subject0 = build(0b1110111100011110000000000000000001001010101011100000000000010110L,
				                   0b0101101010101110000000000000000000100101010110111100010111011001L);
				T subject1 = build(0b1111000000011110000000000000000001001010101011100000000000010110L,
				                   0b0101101010101110000000000000000000100101010110111100010111011001L);

				hammingDistance1(subject0, subject1, 120, 128);
			}

			@Test public void toGray_121_128() {
				T subject0 = build(0b1110001110101110000000000000000001001010101011100000000000011101L,
				                   0b1110101010101110000000000000000000100101010110111100011011001011L);
				T subject1 = build(0b1110010110101110000000000000000001001010101011100000000000011101L,
				                   0b1110101010101110000000000000000000100101010110111100011011001011L);

				hammingDistance1(subject0, subject1, 121, 128);
			}

			@Test public void toGray_122_128() {
				T subject0 = build(0b1100110011101110000000000000000001001010101011100000000000101101L,
				                   0b0010101010101110000000000000000000100101010110111100011110111111L);
				T subject1 = build(0b1101000011101110000000000000000001001010101011100000000000101101L,
				                   0b0010101010101110000000000000000000100101010110111100011110111111L);

				hammingDistance1(subject0, subject1, 122, 128);
			}

			@Test public void toGray_123_128() {
				T subject0 = build(0b1010111110101110000000000000000001001010101011100000000000111100L,
				                   0b1000101010101110000000000000000000100101010110111100100010110101L);
				T subject1 = build(0b1011011110101110000000000000000001001010101011100000000000111100L,
				                   0b1000101010101110000000000000000000100101010110111100100010110101L);

				hammingDistance1(subject0, subject1, 123, 128);
			}

			@Test public void toGray_124_128() {
				T subject0 = build(0b0111010110101110000000000000000001001010101011100000000001011011L,
				                   0b1000101010101110000000000000000000100101010110111100100110101101L);
				T subject1 = build(0b1000010110101110000000000000000001001010101011100000000001011011L,
				                   0b1000101010101110000000000000000000100101010110111100100110101101L);

				hammingDistance1(subject0, subject1, 124, 128);
			}

			@Test public void toGray_125_128() {
				T subject0 = build(0b0010001010101110000000000000000001001010101011100000000001111010L,
				                   0b1100101010101110000000000000000000100101010110111100101010100111L);
				T subject1 = build(0b0100001010101110000000000000000001001010101011100000000001111010L,
				                   0b1100101010101110000000000000000000100101010110111100101010100111L);

				hammingDistance1(subject0, subject1, 125, 128);
			}

			@Test public void toGray_126_128() {
				T subject0 = build(0b1111111010101110000000000000000001001010101011100000000010111001L,
				                   0b1100101010101110000000000000000000100101010110111100101110100011L);
				T subject1 = build(0b0011111010101110000000000000000001001010101011100000000010111001L,
				                   0b1100101010101110000000000000000000100101010110111100101110100011L);

				hammingDistance1(subject0, subject1, 126, 128);
			}

			@Test public void toGray_127_128() {
				T subject0 = build(0b1011101010101110000000000000000001001010101011100000000011111001L,
				                   0b0100101010101110000000000000000000100101010110111100110010100001L);
				T subject1 = build(0b0011101010101110000000000000000001001010101011100000000011111001L,
				                   0b0100101010101110000000000000000000100101010110111100110010100001L);

				hammingDistance1(subject0, subject1, 127, 128);
			}

			private void hammingDistance1(T subject0, T subject1, int from, int to) {
				toGray(subject0, from, to);
				toGray(subject1, from, to);
				
				xorFrom(subject0, from, subject1, from, to - from);
				assertThat(ones(subject1, from, to), is(equalTo(1)));
			}
		}
		
		public abstract static class Inverse<T> implements StorageBuilder<T> {
			protected abstract void toGray(T data, int from, int to);
			protected abstract void fromGray(T data, int from, int to);
			
			@Test public void fromGray_0_1() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111110L);

				inverse(subject, expected, 0, 1);
			}

			@Test public void fromGray_0_2() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111100L);

				inverse(subject, expected, 0, 2);
			}

			@Test public void fromGray_0_3() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111111010L);

				inverse(subject, expected, 0, 3);
			}

			@Test public void fromGray_0_4() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111110010L);

				inverse(subject, expected, 0, 4);
			}

			@Test public void fromGray_0_5() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111101000L);

				inverse(subject, expected, 0, 5);
			}

			@Test public void fromGray_0_6() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111011100L);

				inverse(subject, expected, 0, 6);
			}

			@Test public void fromGray_0_7() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111001110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111111001110L);

				inverse(subject, expected, 0, 7);
			}

			@Test public void fromGray_0_8() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110111110L);

				inverse(subject, expected, 0, 8);
			}

			@Test public void fromGray_0_9() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110101100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110101100L);

				inverse(subject, expected, 0, 9);
			}

			@Test public void fromGray_0_10() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111110011000L);

				inverse(subject, expected, 0, 10);
			}

			@Test public void fromGray_0_11() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111000100010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111111000100010L);

				inverse(subject, expected, 0, 11);
			}

			@Test public void fromGray_0_12() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111101100001010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111101100001010L);

				inverse(subject, expected, 0, 12);
			}

			@Test public void fromGray_0_13() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111011110110000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111011110110000L);

				inverse(subject, expected, 0, 13);
			}

			@Test public void fromGray_0_14() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111000010010100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111111000010010100L);

				inverse(subject, expected, 0, 14);
			}

			@Test public void fromGray_0_15() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100011110110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111110100011110110L);

				inverse(subject, expected, 0, 15);
			}

			@Test public void fromGray_0_16() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110101100011010110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111110101100011010110L);

				inverse(subject, expected, 0, 16);
			}

			@Test public void fromGray_0_17() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100011011110110100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111100011011110110100L);

				inverse(subject, expected, 0, 17);
			}

			@Test public void fromGray_0_18() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111101001110010000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111111111101001110010000L);

				inverse(subject, expected, 0, 18);
			}

			@Test public void fromGray_0_19() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110101110110101101010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110101110110101101010L);

				inverse(subject, expected, 0, 19);
			}

			@Test public void fromGray_0_20() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111100001001110101000010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111100001001110101000010L);

				inverse(subject, expected, 0, 20);
			}

			@Test public void fromGray_0_21() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110110100100100011000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111110110100100100011000L);

				inverse(subject, expected, 0, 21);
			}

			@Test public void fromGray_0_22() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111110011101001100011101100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111110011101001100011101100L);

				inverse(subject, expected, 0, 22);
			}

			@Test public void fromGray_0_23() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111100011110000010111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111111100011110000010111110L);

				inverse(subject, expected, 0, 23);
			}

			@Test public void fromGray_0_24() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111001100000110000010001110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111001100000110000010001110L);

				inverse(subject, expected, 0, 24);
			}

			@Test public void fromGray_0_25() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111101101000001011100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100111101101000001011100L);

				inverse(subject, expected, 0, 25);
			}

			@Test public void fromGray_0_26() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100010110111001000000101000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111100010110111001000000101000L);

				inverse(subject, expected, 0, 26);
			}

			@Test public void fromGray_0_27() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111101100110000010111111110010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111101100110000010111111110010L);

				inverse(subject, expected, 0, 27);
			}

			@Test public void fromGray_0_28() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100100010010111110111010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111111111100100010010111110111010L);

				inverse(subject, expected, 0, 28);
			}

			@Test public void fromGray_0_29() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100010100010011110111110000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100010100010011110111110000000L);

				inverse(subject, expected, 0, 29);
			}

			@Test public void fromGray_0_30() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100110011110101110111101000100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111100110011110101110111101000100L);

				inverse(subject, expected, 0, 30);
			}

			@Test public void fromGray_0_31() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101010011010110110111100000110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101010011010110110111100000110L);

				inverse(subject, expected, 0, 31);
			}

			@Test public void fromGray_0_32() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101010010010110110111011000110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111101010010010110110111011000110L);

				inverse(subject, expected, 0, 32);
			}

			@Test public void fromGray_0_33() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111011010001010100110111010000100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111111011010001010100110111010000100L);

				inverse(subject, expected, 0, 33);
			}

			@Test public void fromGray_0_34() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011001111001100110111001000000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111110011001111001100110111001000000L);

				inverse(subject, expected, 0, 34);
			}

			@Test public void fromGray_0_35() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111011011001101000000110110111111010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111011011001101000000110110111111010L);

				inverse(subject, expected, 0, 35);
			}

			@Test public void fromGray_0_36() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110011011001000100000110110110110010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111110011011001000100000110110110110010L);

				inverse(subject, expected, 0, 36);
			}

			@Test public void fromGray_0_37() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111011111011000011111000110110101101000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111011111011000011111000110110101101000L);

				inverse(subject, expected, 0, 37);
			}

			@Test public void fromGray_0_38() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110101111010111010011000110110100011100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111110101111010111010011000110110100011100L);

				inverse(subject, expected, 0, 38);
			}

			@Test public void fromGray_0_39() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111100111111010110000101000110110011001110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111100111111010110000101000110110011001110L);

				inverse(subject, expected, 0, 39);
			}

			@Test public void fromGray_0_40() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111000111111010011100101000110110001111110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111000111111010011100101000110110001111110L);

				inverse(subject, expected, 0, 40);
			}

			@Test public void fromGray_0_41() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111101111111111010001000001000110110000101100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111101111111111010001000001000110110000101100L);

				inverse(subject, expected, 0, 41);
			}

			@Test public void fromGray_0_42() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111011011111111001011110001000110101111011000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111011011111111001011110001000110101111011000L);

				inverse(subject, expected, 0, 42);
			}

			@Test public void fromGray_0_43() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111110101111111111000110011001000110101110000010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111110101111111111000110011001000110101110000010L);

				inverse(subject, expected, 0, 43);
			}

			@Test public void fromGray_0_44() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111101001111111110111011011001000110101100101010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111101001111111110111011011001000110101100101010L);

				inverse(subject, expected, 0, 44);
			}

			@Test public void fromGray_0_45() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111110110000001001000110101011010000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111001111111111110110000001001000110101011010000L);

				inverse(subject, expected, 0, 45);
			}

			@Test public void fromGray_0_46() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111110010111111111110011001001001000110101001110100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111110010111111111110011001001001000110101001110100L);

				inverse(subject, expected, 0, 46);
			}

			@Test public void fromGray_0_47() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111100011111111111110000001101001000110101000010110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111100011111111111110000001101001000110101000010110L);

				inverse(subject, expected, 0, 47);
			}

			@Test public void fromGray_0_48() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111000011111111111101010001101001000110100110110110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111000011111111111101010001101001000110100110110110L);

				inverse(subject, expected, 0, 48);
			}

			@Test public void fromGray_0_49() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100100000101001000110100101010100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111111111111111111111100100000101001000110100101010100L);

				inverse(subject, expected, 0, 49);
			}

			@Test public void fromGray_0_50() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111101101111111111111010111100101001000110100011110000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111101101111111111111010111100101001000110100011110000L);

				inverse(subject, expected, 0, 50);
			}

			@Test public void fromGray_0_51() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111000111111111111111001010110101001000110100010001010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111000111111111111111001010110101001000110100010001010L);

				inverse(subject, expected, 0, 51);
			}

			@Test public void fromGray_0_52() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110111111111111110110000110101001000110100000100010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111110111111111111110110000110101001000110100000100010L);

				inverse(subject, expected, 0, 52);
			}

			@Test public void fromGray_0_53() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111101001111111111111110010110010101001000110011110111000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111101001111111111111110010110010101001000110011110111000L);

				inverse(subject, expected, 0, 53);
			}

			@Test public void fromGray_0_54() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111101111111111111101100000010101001000110011101001100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111111101111111111111101100000010101001000110011101001100L);

				inverse(subject, expected, 0, 54);
			}

			@Test public void fromGray_0_55() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110100001111111111111100101001010101001000110011011011110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111110100001111111111111100101001010101001000110011011011110L);

				inverse(subject, expected, 0, 55);
			}

			@Test public void fromGray_0_56() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100001111111111111010111001010101001000110011001101110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111111100001111111111111010111001010101001000110011001101110L);

				inverse(subject, expected, 0, 56);
			}

			@Test public void fromGray_0_57() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001010001111111111111001000111010101001000110010111111100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111001010001111111111111001000111010101001000110010111111100L);

				inverse(subject, expected, 0, 57);
			}

			@Test public void fromGray_0_58() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111100010001111111111110101011111010101001000110010110001000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111111100010001111111111110101011111010101001000110010110001000L);

				inverse(subject, expected, 0, 58);
			}

			@Test public void fromGray_0_59() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111100001010001111111111110001110011010101001000110010100010010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111100001010001111111111110001110011010101001000110010100010010L);

				inverse(subject, expected, 0, 59);
			}

			@Test public void fromGray_0_60() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111101001010001111111111101010010011010101001000110010010011010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111101001010001111111111101010010011010101001000110010010011010L);

				inverse(subject, expected, 0, 60);
			}

			@Test public void fromGray_0_61() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110101010001111111111100010101011010101001000110010000100000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1111110101010001111111111100010101011010101001000110010000100000L);

				inverse(subject, expected, 0, 61);
			}

			@Test public void fromGray_0_62() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100000101010001111111111010011001011010101001000110001110100100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100000101010001111111111010011001011010101001000110001110100100L);

				inverse(subject, expected, 0, 62);
			}

			@Test public void fromGray_0_63() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100010101010001111111111000011011011010101001000110001100100110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100010101010001111111111000011011011010101001000110001100100110L);

				inverse(subject, expected, 0, 63);
			}

			@Test public void fromGray_0_64() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100010101010001111111110100011011011010101001000110001010100110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1100010101010001111111110100011011011010101001000110001010100110L);

				inverse(subject, expected, 0, 64);
			}

			@Test public void fromGray_0_65() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011010101010001111111110000010111011010101001000110001000100100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011010101010001111111110000010111011010101001000110001000100100L);

				inverse(subject, expected, 0, 65);
			}

			@Test public void fromGray_0_66() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0111010101010001111111101000000111011010101001000110000110100000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b0111010101010001111111101000000111011010101001000110000110100000L);

				inverse(subject, expected, 0, 66);
			}

			@Test public void fromGray_0_67() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1011010101010001111111011111101111011010101001000110000100011010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111110L,
				                   0b1011010101010001111111011111101111011010101001000110000100011010L);

				inverse(subject, expected, 0, 67);
			}

			@Test public void fromGray_0_68() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1011010101010001111111001110101111011010101001000110000010010010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111100L,
				                   0b1011010101010001111111001110101111011010101001000110000010010010L);

				inverse(subject, expected, 0, 68);
			}

			@Test public void fromGray_0_69() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111110111L,
				                   0b1011010101010001111110111101011111011010101001000110000000001000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111110111L,
				                   0b1011010101010001111110111101011111011010101001000110000000001000L);

				inverse(subject, expected, 0, 69);
			}

			@Test public void fromGray_0_70() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111101011L,
				                   0b1011010101010001111110011010011111011010101001000101111101111100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111101011L,
				                   0b1011010101010001111110011010011111011010101001000101111101111100L);

				inverse(subject, expected, 0, 70);
			}

			@Test public void fromGray_0_71() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111001111L,
				                   0b1011010101010001111101110110111111011010101001000101111011101110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111001111L,
				                   0b1011010101010001111101110110111111011010101001000101111011101110L);

				inverse(subject, expected, 0, 71);
			}

			@Test public void fromGray_0_72() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111110001111L,
				                   0b1011010101010001111100101110111111011010101001000101111001011110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111110001111L,
				                   0b1011010101010001111100101110111111011010101001000101111001011110L);

				inverse(subject, expected, 0, 72);
			}

			@Test public void fromGray_0_73() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111011111111L,
				                   0b1011010101010001111011100101111111011010101001000101110111001100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111011111111L,
				                   0b1011010101010001111011100101111111011010101001000101110111001100L);

				inverse(subject, expected, 0, 73);
			}

			@Test public void fromGray_0_74() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111110110111111L,
				                   0b1011010101010001111001010001111111011010101001000101110100111000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111110110111111L,
				                   0b1011010101010001111001010001111111011010101001000101110100111000L);

				inverse(subject, expected, 0, 74);
			}

			@Test public void fromGray_0_75() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111101011111111L,
				                   0b1011010101010001110110111011111111011010101001000101110010100010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111101011111111L,
				                   0b1011010101010001110110111011111111011010101001000101110010100010L);

				inverse(subject, expected, 0, 75);
			}

			@Test public void fromGray_0_76() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111010011111111L,
				                   0b1011010101010001110010001011111111011010101001000101110000001010L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111010011111111L,
				                   0b1011010101010001110010001011111111011010101001000101110000001010L);

				inverse(subject, expected, 0, 76);
			}

			@Test public void fromGray_0_77() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1011010101010001101101010111111111011010101001000101101101110000L);
				T expected = build(0b1111111111111111111111111111111111111111111111111110011111111111L,
				                   0b1011010101010001101101010111111111011010101001000101101101110000L);

				inverse(subject, expected, 0, 77);
			}

			@Test public void fromGray_0_78() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111100101111111111L,
				                   0b1011010101010001100011100111111111011010101001000101101011010100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111100101111111111L,
				                   0b1011010101010001100011100111111111011010101001000101101011010100L);

				inverse(subject, expected, 0, 78);
			}

			@Test public void fromGray_0_79() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111000111111111111L,
				                   0b1011010101010001011001101111111111011010101001000101101000110110L);
				T expected = build(0b1111111111111111111111111111111111111111111111111000111111111111L,
				                   0b1011010101010001011001101111111111011010101001000101101000110110L);

				inverse(subject, expected, 0, 79);
			}

			@Test public void fromGray_0_80() {
				T subject  = build(0b1111111111111111111111111111111111111111111111110000111111111111L,
				                   0b1011010101010001000101101111111111011010101001000101100110010110L);
				T expected = build(0b1111111111111111111111111111111111111111111111110000111111111111L,
				                   0b1011010101010001000101101111111111011010101001000101100110010110L);

				inverse(subject, expected, 0, 80);
			}

			@Test public void fromGray_0_81() {
				T subject  = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011010101010000110001011111111111011010101001000101100011110100L);
				T expected = build(0b1111111111111111111111111111111111111111111111111111111111111111L,
				                   0b1011010101010000110001011111111111011010101001000101100011110100L);

				inverse(subject, expected, 0, 81);
			}

			@Test public void fromGray_0_82() {
				T subject  = build(0b1111111111111111111111111111111111111111111111011011111111111111L,
				                   0b1011010101010000001000011111111111011010101001000101100001010000L);
				T expected = build(0b1111111111111111111111111111111111111111111111011011111111111111L,
				                   0b1011010101010000001000011111111111011010101001000101100001010000L);

				inverse(subject, expected, 0, 82);
			}

			@Test public void fromGray_0_83() {
				T subject  = build(0b1111111111111111111111111111111111111111111110001111111111111111L,
				                   0b1011010101001111011110111111111111011010101001000101011110101010L);
				T expected = build(0b1111111111111111111111111111111111111111111110001111111111111111L,
				                   0b1011010101001111011110111111111111011010101001000101011110101010L);

				inverse(subject, expected, 0, 83);
			}

			@Test public void fromGray_0_84() {
				T subject  = build(0b1111111111111111111111111111111111111111111111101111111111111111L,
				                   0b1011010101001110001010111111111111011010101001000101011100000010L);
				T expected = build(0b1111111111111111111111111111111111111111111111101111111111111111L,
				                   0b1011010101001110001010111111111111011010101001000101011100000010L);

				inverse(subject, expected, 0, 84);
			}

			@Test public void fromGray_0_85() {
				T subject  = build(0b1111111111111111111111111111111111111111111010011111111111111111L,
				                   0b1011010101001100110101111111111111011010101001000101011001011000L);
				T expected = build(0b1111111111111111111111111111111111111111111010011111111111111111L,
				                   0b1011010101001100110101111111111111011010101001000101011001011000L);

				inverse(subject, expected, 0, 85);
			}

			@Test public void fromGray_0_86() {
				T subject  = build(0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1011010101001010001001111111111111011010101001000101010110101100L);
				T expected = build(0b1111111111111111111111111111111111111111111111011111111111111111L,
				                   0b1011010101001010001001111111111111011010101001000101010110101100L);

				inverse(subject, expected, 0, 86);
			}

			@Test public void fromGray_0_87() {
				T subject  = build(0b1111111111111111111111111111111111111111101000011111111111111111L,
				                   0b1011010101000111011011111111111111011010101001000101010011111110L);
				T expected = build(0b1111111111111111111111111111111111111111101000011111111111111111L,
				                   0b1011010101000111011011111111111111011010101001000101010011111110L);

				inverse(subject, expected, 0, 87);
			}

			@Test public void fromGray_0_88() {
				T subject  = build(0b1111111111111111111111111111111111111111111000011111111111111111L,
				                   0b1011010101000001111011111111111111011010101001000101010001001110L);
				T expected = build(0b1111111111111111111111111111111111111111111000011111111111111111L,
				                   0b1011010101000001111011111111111111011010101001000101010001001110L);

				inverse(subject, expected, 0, 88);
			}

			@Test public void fromGray_0_89() {
				T subject  = build(0b1111111111111111111111111111111111111110010100011111111111111111L,
				                   0b1011010100111100010111111111111111011010101001000101001110011100L);
				T expected = build(0b1111111111111111111111111111111111111110010100011111111111111111L,
				                   0b1011010100111100010111111111111111011010101001000101001110011100L);

				inverse(subject, expected, 0, 89);
			}

			@Test public void fromGray_0_90() {
				T subject  = build(0b1111111111111111111111111111111111111111000100011111111111111111L,
				                   0b1011010100110001000111111111111111011010101001000101001011101000L);
				T expected = build(0b1111111111111111111111111111111111111111000100011111111111111111L,
				                   0b1011010100110001000111111111111111011010101001000101001011101000L);

				inverse(subject, expected, 0, 90);
			}

			@Test public void fromGray_0_91() {
				T subject  = build(0b1111111111111111111111111111111111111000010100011111111111111111L,
				                   0b1011010100100101101111111111111111011010101001000101001000110010L);
				T expected = build(0b1111111111111111111111111111111111111000010100011111111111111111L,
				                   0b1011010100100101101111111111111111011010101001000101001000110010L);

				inverse(subject, expected, 0, 91);
			}

			@Test public void fromGray_0_92() {
				T subject  = build(0b1111111111111111111111111111111111111010010100011111111111111111L,
				                   0b1011010100001110101111111111111111011010101001000101000101111010L);
				T expected = build(0b1111111111111111111111111111111111111010010100011111111111111111L,
				                   0b1011010100001110101111111111111111011010101001000101000101111010L);

				inverse(subject, expected, 0, 92);
			}

			@Test public void fromGray_0_93() {
				T subject  = build(0b1111111111111111111111111111111111111101010100011111111111111111L,
				                   0b1011010011110111011111111111111111011010101001000101000011000000L);
				T expected = build(0b1111111111111111111111111111111111111101010100011111111111111111L,
				                   0b1011010011110111011111111111111111011010101001000101000011000000L);

				inverse(subject, expected, 0, 93);
			}

			@Test public void fromGray_0_94() {
				T subject  = build(0b1111111111111111111111111111111111000001010100011111111111111111L,
				                   0b1011010011001000011111111111111111011010101001000101000000000100L);
				T expected = build(0b1111111111111111111111111111111111000001010100011111111111111111L,
				                   0b1011010011001000011111111111111111011010101001000101000000000100L);

				inverse(subject, expected, 0, 94);
			}

			@Test public void fromGray_0_95() {
				T subject  = build(0b1111111111111111111111111111111111000101010100011111111111111111L,
				                   0b1011010010011000111111111111111111011010101001000100111101000110L);
				T expected = build(0b1111111111111111111111111111111111000101010100011111111111111111L,
				                   0b1011010010011000111111111111111111011010101001000100111101000110L);

				inverse(subject, expected, 0, 95);
			}

			@Test public void fromGray_0_96() {
				T subject  = build(0b1111111111111111111111111111111111000101010100011111111111111111L,
				                   0b1011010000111000111111111111111111011010101001000100111010000110L);
				T expected = build(0b1111111111111111111111111111111111000101010100011111111111111111L,
				                   0b1011010000111000111111111111111111011010101001000100111010000110L);

				inverse(subject, expected, 0, 96);
			}

			@Test public void fromGray_0_97() {
				T subject  = build(0b1111111111111111111111111111111110110101010100011111111111111111L,
				                   0b1011001111010111111111111111111111011010101001000100110111000100L);
				T expected = build(0b1111111111111111111111111111111110110101010100011111111111111111L,
				                   0b1011001111010111111111111111111111011010101001000100110111000100L);

				inverse(subject, expected, 0, 97);
			}

			@Test public void fromGray_0_98() {
				T subject  = build(0b1111111111111111111111111111111101110101010100011111111111111111L,
				                   0b1011001100010011111111111111111111011010101001000100110100000000L);
				T expected = build(0b1111111111111111111111111111111101110101010100011111111111111111L,
				                   0b1011001100010011111111111111111111011010101001000100110100000000L);

				inverse(subject, expected, 0, 98);
			}

			@Test public void fromGray_0_99() {
				T subject  = build(0b1111111111111111111111111111111010110101010100011111111111111111L,
				                   0b1011001001001101111111111111111111011010101001000100110000111010L);
				T expected = build(0b1111111111111111111111111111111010110101010100011111111111111111L,
				                   0b1011001001001101111111111111111111011010101001000100110000111010L);

				inverse(subject, expected, 0, 99);
			}

			@Test public void fromGray_0_100() {
				T subject  = build(0b1111111111111111111111111111110010110101010100011111111111111111L,
				                   0b1011000010111101111111111111111111011010101001000100101101110010L);
				T expected = build(0b1111111111111111111111111111110010110101010100011111111111111111L,
				                   0b1011000010111101111111111111111111011010101001000100101101110010L);

				inverse(subject, expected, 0, 100);
			}

			@Test public void fromGray_0_101() {
				T subject  = build(0b1111111111111111111111111111011110110101010100011111111111111111L,
				                   0b1010111100101001111111111111111111011010101001000100101010101000L);
				T expected = build(0b1111111111111111111111111111011110110101010100011111111111111111L,
				                   0b1010111100101001111111111111111111011010101001000100101010101000L);

				inverse(subject, expected, 0, 101);
			}

			@Test public void fromGray_0_102() {
				T subject  = build(0b1111111111111111111111111110101110110101010100011111111111111111L,
				                   0b1010101111111001111111111111111111011010101001000100100111011100L);
				T expected = build(0b1111111111111111111111111110101110110101010100011111111111111111L,
				                   0b1010101111111001111111111111111111011010101001000100100111011100L);

				inverse(subject, expected, 0, 102);
			}

			@Test public void fromGray_0_103() {
				T subject  = build(0b1111111111111111111111111100111110110101010100011111111111111111L,
				                   0b1010100011000001111111111111111111011010101001000100100100001110L);
				T expected = build(0b1111111111111111111111111100111110110101010100011111111111111111L,
				                   0b1010100011000001111111111111111111011010101001000100100100001110L);

				inverse(subject, expected, 0, 103);
			}

			@Test public void fromGray_0_104() {
				T subject  = build(0b1111111111111111111111111000111110110101010100011111111111111111L,
				                   0b1010001001000001111111111111111111011010101001000100100000111110L);
				T expected = build(0b1111111111111111111111111000111110110101010100011111111111111111L,
				                   0b1010001001000001111111111111111111011010101001000100100000111110L);

				inverse(subject, expected, 0, 104);
			}

			@Test public void fromGray_0_105() {
				T subject  = build(0b1111111111111111111111101111111110110101010100011111111111111111L,
				                   0b1001101110110001111111111111111111011010101001000100011101101100L);
				T expected = build(0b1111111111111111111111101111111110110101010100011111111111111111L,
				                   0b1001101110110001111111111111111111011010101001000100011101101100L);

				inverse(subject, expected, 0, 105);
			}

			@Test public void fromGray_0_106() {
				T subject  = build(0b1111111111111111111111011011111110110101010100011111111111111111L,
				                   0b1000111001110001111111111111111111011010101001000100011010011000L);
				T expected = build(0b1111111111111111111111011011111110110101010100011111111111111111L,
				                   0b1000111001110001111111111111111111011010101001000100011010011000L);

				inverse(subject, expected, 0, 106);
			}

			@Test public void fromGray_0_107() {
				T subject  = build(0b1111111111111111111110101111111110110101010100011111111111111111L,
				                   0b1000000100010001111111111111111111011010101001000100010111000010L);
				T expected = build(0b1111111111111111111110101111111110110101010100011111111111111111L,
				                   0b1000000100010001111111111111111111011010101001000100010111000010L);

				inverse(subject, expected, 0, 107);
			}

			@Test public void fromGray_0_108() {
				T subject  = build(0b1111111111111111111101001111111110110101010100011111111111111111L,
				                   0b0110011000010001111111111111111111011010101001000100010011101010L);
				T expected = build(0b1111111111111111111101001111111110110101010100011111111111111111L,
				                   0b0110011000010001111111111111111111011010101001000100010011101010L);

				inverse(subject, expected, 0, 108);
			}

			@Test public void fromGray_0_109() {
				T subject  = build(0b1111111111111111111001111111111110110101010100011111111111111111L,
				                   0b0100101011010001111111111111111111011010101001000100010000010000L);
				T expected = build(0b1111111111111111111001111111111110110101010100011111111111111111L,
				                   0b0100101011010001111111111111111111011010101001000100010000010000L);

				inverse(subject, expected, 0, 109);
			}

			@Test public void fromGray_0_110() {
				T subject  = build(0b1111111111111111110010111111111110110101010100011111111111111111L,
				                   0b0001001111010001111111111111111111011010101001000100001100110100L);
				T expected = build(0b1111111111111111110010111111111110110101010100011111111111111111L,
				                   0b0001001111010001111111111111111111011010101001000100001100110100L);

				inverse(subject, expected, 0, 110);
			}

			@Test public void fromGray_0_111() {
				T subject  = build(0b1111111111111111100011111111111110110101010100011111111111111110L,
				                   0b1101110001010001111111111111111111011010101001000100001001010110L);
				T expected = build(0b1111111111111111100011111111111110110101010100011111111111111110L,
				                   0b1101110001010001111111111111111111011010101001000100001001010110L);

				inverse(subject, expected, 0, 111);
			}

			@Test public void fromGray_0_112() {
				T subject  = build(0b1111111111111111000011111111111110110101010100011111111111111110L,
				                   0b0110110001010001111111111111111111011010101001000100000101110110L);
				T expected = build(0b1111111111111111000011111111111110110101010100011111111111111110L,
				                   0b0110110001010001111111111111111111011010101001000100000101110110L);

				inverse(subject, expected, 0, 112);
			}

			@Test public void fromGray_0_113() {
				T subject  = build(0b1111111111111111111111111111111110110101010100011111111111111101L,
				                   0b1111101101010001111111111111111111011010101001000100000010010100L);
				T expected = build(0b1111111111111111111111111111111110110101010100011111111111111101L,
				                   0b1111101101010001111111111111111111011010101001000100000010010100L);

				inverse(subject, expected, 0, 113);
			}

			@Test public void fromGray_0_114() {
				T subject  = build(0b1111111111111101101111111111111110110101010100011111111111111101L,
				                   0b0001011101010001111111111111111111011010101001000011111110110000L);
				T expected = build(0b1111111111111101101111111111111110110101010100011111111111111101L,
				                   0b0001011101010001111111111111111111011010101001000011111110110000L);

				inverse(subject, expected, 0, 114);
			}

			@Test public void fromGray_0_115() {
				T subject  = build(0b1111111111111000111111111111111110110101010100011111111111111100L,
				                   0b0011000101010001111111111111111111011010101001000011111011001010L);
				T expected = build(0b1111111111111000111111111111111110110101010100011111111111111100L,
				                   0b0011000101010001111111111111111111011010101001000011111011001010L);

				inverse(subject, expected, 0, 115);
			}

			@Test public void fromGray_0_116() {
				T subject  = build(0b1111111111111110111111111111111110110101010100011111111111111010L,
				                   0b0110000101010001111111111111111111011010101001000011110111100010L);
				T expected = build(0b1111111111111110111111111111111110110101010100011111111111111010L,
				                   0b0110000101010001111111111111111111011010101001000011110111100010L);

				inverse(subject, expected, 0, 116);
			}

			@Test public void fromGray_0_117() {
				T subject  = build(0b1111111111101001111111111111111110110101010100011111111111111000L,
				                   0b1000110101010001111111111111111111011010101001000011110011111000L);
				T expected = build(0b1111111111101001111111111111111110110101010100011111111111111000L,
				                   0b1000110101010001111111111111111111011010101001000011110011111000L);

				inverse(subject, expected, 0, 117);
			}

			@Test public void fromGray_0_118() {
				T subject  = build(0b1111111111111101111111111111111110110101010100011111111111110100L,
				                   0b1101110101010001111111111111111111011010101001000011110000001100L);
				T expected = build(0b1111111111111101111111111111111110110101010100011111111111110100L,
				                   0b1101110101010001111111111111111111011010101001000011110000001100L);

				inverse(subject, expected, 0, 118);
			}

			@Test public void fromGray_0_119() {
				T subject  = build(0b1111111110100001111111111111111110110101010100011111111111110001L,
				                   0b0010010101010001111111111111111111011010101001000011101100011110L);
				T expected = build(0b1111111110100001111111111111111110110101010100011111111111110001L,
				                   0b0010010101010001111111111111111111011010101001000011101100011110L);

				inverse(subject, expected, 0, 119);
			}

			@Test public void fromGray_0_120() {
				T subject  = build(0b1111111111100001111111111111111110110101010100011111111111101001L,
				                   0b1010010101010001111111111111111111011010101001000011101000101110L);
				T expected = build(0b1111111111100001111111111111111110110101010100011111111111101001L,
				                   0b1010010101010001111111111111111111011010101001000011101000101110L);

				inverse(subject, expected, 0, 120);
			}

			@Test public void fromGray_0_121() {
				T subject  = build(0b1111111001010001111111111111111110110101010100011111111111100010L,
				                   0b0001010101010001111111111111111111011010101001000011100100111100L);
				T expected = build(0b1111111001010001111111111111111110110101010100011111111111100010L,
				                   0b0001010101010001111111111111111111011010101001000011100100111100L);

				inverse(subject, expected, 0, 121);
			}

			@Test public void fromGray_0_122() {
				T subject  = build(0b1111111100010001111111111111111110110101010100011111111111010010L,
				                   0b1101010101010001111111111111111111011010101001000011100001001000L);
				T expected = build(0b1111111100010001111111111111111110110101010100011111111111010010L,
				                   0b1101010101010001111111111111111111011010101001000011100001001000L);

				inverse(subject, expected, 0, 122);
			}

			@Test public void fromGray_0_123() {
				T subject  = build(0b1111100001010001111111111111111110110101010100011111111111000011L,
				                   0b0111010101010001111111111111111111011010101001000011011101010010L);
				T expected = build(0b1111100001010001111111111111111110110101010100011111111111000011L,
				                   0b0111010101010001111111111111111111011010101001000011011101010010L);

				inverse(subject, expected, 0, 123);
			}

			@Test public void fromGray_0_124() {
				T subject  = build(0b1111101001010001111111111111111110110101010100011111111110100100L,
				                   0b0111010101010001111111111111111111011010101001000011011001011010L);
				T expected = build(0b1111101001010001111111111111111110110101010100011111111110100100L,
				                   0b0111010101010001111111111111111111011010101001000011011001011010L);

				inverse(subject, expected, 0, 124);
			}

			@Test public void fromGray_0_125() {
				T subject  = build(0b1111110101010001111111111111111110110101010100011111111110000101L,
				                   0b0011010101010001111111111111111111011010101001000011010101100000L);
				T expected = build(0b1111110101010001111111111111111110110101010100011111111110000101L,
				                   0b0011010101010001111111111111111111011010101001000011010101100000L);

				inverse(subject, expected, 0, 125);
			}

			@Test public void fromGray_0_126() {
				T subject  = build(0b1100000101010001111111111111111110110101010100011111111101000110L,
				                   0b0011010101010001111111111111111111011010101001000011010001100100L);
				T expected = build(0b1100000101010001111111111111111110110101010100011111111101000110L,
				                   0b0011010101010001111111111111111111011010101001000011010001100100L);

				inverse(subject, expected, 0, 126);
			}

			@Test public void fromGray_0_127() {
				T subject  = build(0b1100010101010001111111111111111110110101010100011111111100000110L,
				                   0b1011010101010001111111111111111111011010101001000011001101100110L);
				T expected = build(0b1100010101010001111111111111111110110101010100011111111100000110L,
				                   0b1011010101010001111111111111111111011010101001000011001101100110L);

				inverse(subject, expected, 0, 127);
			}

			@Test public void fromGray_0_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000001L);

				inverse(subject, expected, 0, 128);
			}

			@Test public void fromGray_1_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000000111L);

				inverse(subject, expected, 1, 128);
			}

			@Test public void fromGray_2_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000010111L);

				inverse(subject, expected, 2, 128);
			}

			@Test public void fromGray_3_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000000111101L);

				inverse(subject, expected, 3, 128);
			}

			@Test public void fromGray_4_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010010101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000010010101L);

				inverse(subject, expected, 4, 128);
			}

			@Test public void fromGray_5_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101011111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000000101011111L);

				inverse(subject, expected, 5, 128);
			}

			@Test public void fromGray_6_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100101011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000001100101011L);

				inverse(subject, expected, 6, 128);
			}

			@Test public void fromGray_7_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000011100111001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000000011100111001L);

				inverse(subject, expected, 7, 128);
			}

			@Test public void fromGray_8_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001000001001001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000001000001001001L);

				inverse(subject, expected, 8, 128);
			}

			@Test public void fromGray_9_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000010010001011011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000010010001011011L);

				inverse(subject, expected, 9, 128);
			}

			@Test public void fromGray_10_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000101000001101111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000000101000001101111L);

				inverse(subject, expected, 10, 128);
			}

			@Test public void fromGray_11_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001011000111100101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000001011000111100101L);

				inverse(subject, expected, 11, 128);
			}

			@Test public void fromGray_12_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000010011111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000011000010011111101L);

				inverse(subject, expected, 12, 128);
			}

			@Test public void fromGray_13_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000110100100001010111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000000110100100001010111L);

				inverse(subject, expected, 13, 128);
			}

			@Test public void fromGray_14_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001110000111101110011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000001110000111101110011L);

				inverse(subject, expected, 14, 128);
			}

			@Test public void fromGray_15_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000011110001011100010001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000000011110001011100010001L);

				inverse(subject, expected, 15, 128);
			}

			@Test public void fromGray_16_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000001000001010011100110001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000001000001010011100110001L);

				inverse(subject, expected, 16, 128);
			}

			@Test public void fromGray_17_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010001011100100001010011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000010001011100100001010011L);

				inverse(subject, expected, 17, 128);
			}

			@Test public void fromGray_18_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000100100000010110001110111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000000100100000010110001110111L);

				inverse(subject, expected, 18, 128);
			}

			@Test public void fromGray_19_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001001101010001001010011101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000001001101010001001010011101L);

				inverse(subject, expected, 19, 128);
			}

			@Test public void fromGray_20_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000010100011110110001011000101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000010100011110110001011000101L);

				inverse(subject, expected, 20, 128);
			}

			@Test public void fromGray_21_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000101010001001011011011101111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000000101010001001011011011101111L);

				inverse(subject, expected, 21, 128);
			}

			@Test public void fromGray_22_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000001011001100010110011100011011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000001011001100010110011100011011L);

				inverse(subject, expected, 22, 128);
			}

			@Test public void fromGray_23_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111000011100001111101001001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000010111000011100001111101001001L);

				inverse(subject, expected, 23, 128);
			}

			@Test public void fromGray_24_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000110000110011111001111101111001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000000110000110011111001111101111001L);

				inverse(subject, expected, 24, 128);
			}

			@Test public void fromGray_25_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100100011000010010111110101011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000001100100011000010010111110101011L);

				inverse(subject, expected, 25, 128);
			}

			@Test public void fromGray_26_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000011010011101001000110111111011111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000011010011101001000110111111011111L);

				inverse(subject, expected, 26, 128);
			}

			@Test public void fromGray_27_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110110010011001111101000000010101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000000110110010011001111101000000010101L);

				inverse(subject, expected, 27, 128);
			}

			@Test public void fromGray_28_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001110000000011011101101000001001101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000001110000000011011101101000001001101L);

				inverse(subject, expected, 28, 128);
			}

			@Test public void fromGray_29_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011101011101011101100001000010000111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000011101011101011101100001000010000111L);

				inverse(subject, expected, 29, 128);
			}

			@Test public void fromGray_30_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000111100011001100001010001000011000011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000000111100011001100001010001000011000011L);

				inverse(subject, expected, 30, 128);
			}

			@Test public void fromGray_31_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111100010101100101001001000100000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000001111100010101100101001001000100000001L);

				inverse(subject, expected, 31, 128);
			}

			@Test public void fromGray_32_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000100000000010101101101001001000101000001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000000100000000010101101101001001000101000001L);

				inverse(subject, expected, 32, 128);
			}

			@Test public void fromGray_33_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000001000010000100101110101011001000110000011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000001000010000100101110101011001000110000011L);

				inverse(subject, expected, 33, 128);
			}

			@Test public void fromGray_34_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010001000001100110000110011001000111000111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000010001000001100110000110011001000111000111L);

				inverse(subject, expected, 34, 128);
			}

			@Test public void fromGray_35_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000100011000100100110010111111001001000001101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000000100011000100100110010111111001001000001101L);

				inverse(subject, expected, 35, 128);
			}

			@Test public void fromGray_36_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000001001000001100100110111011111001001001010101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000001001000001100100110111011111001001001010101L);

				inverse(subject, expected, 36, 128);
			}

			@Test public void fromGray_37_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000010010100100000100111100000111001001010011111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000010010100100000100111100000111001001010011111L);

				inverse(subject, expected, 37, 128);
			}

			@Test public void fromGray_38_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000100110001010000101000101100111001001011101011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000000100110001010000101000101100111001001011101011L);

				inverse(subject, expected, 38, 128);
			}

			@Test public void fromGray_39_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000001001110011000000101001111010111001001100111001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000001001110011000000101001111010111001001100111001L);

				inverse(subject, expected, 39, 128);
			}

			@Test public void fromGray_40_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000010100000111000000101100011010111001001110001001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000010100000111000000101100011010111001001110001001L);

				inverse(subject, expected, 40, 128);
			}

			@Test public void fromGray_41_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000101001010000000000101110111110111001001111011011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000000101001010000000000101110111110111001001111011011L);

				inverse(subject, expected, 41, 128);
			}

			@Test public void fromGray_42_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001010100100100000000110100001110111001010000101111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000001010100100100000000110100001110111001010000101111L);

				inverse(subject, expected, 42, 128);
			}

			@Test public void fromGray_43_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000010101101010000000000111001100110111001010010000101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000010101101010000000000111001100110111001010010000101L);

				inverse(subject, expected, 43, 128);
			}

			@Test public void fromGray_44_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000101100010110000000001000100100110111001010011011101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000000101100010110000000001000100100110111001010011011101L);

				inverse(subject, expected, 44, 128);
			}

			@Test public void fromGray_45_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000001011010110000000000001001111110110111001010100110111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000001011010110000000000001001111110110111001010100110111L);

				inverse(subject, expected, 45, 128);
			}

			@Test public void fromGray_46_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000010111001101000000000001100110110110111001010110010011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000010111001101000000000001100110110110111001010110010011L);

				inverse(subject, expected, 46, 128);
			}

			@Test public void fromGray_47_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000101111011100000000000001111110010110111001010111110001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000000101111011100000000000001111110010110111001010111110001L);

				inverse(subject, expected, 47, 128);
			}

			@Test public void fromGray_48_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000001100000111100000000000010101110010110111001011001010001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000001100000111100000000000010101110010110111001011001010001L);

				inverse(subject, expected, 48, 128);
			}

			@Test public void fromGray_49_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011000100000000000000000011011111010110111001011010110011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000011000100000000000000000011011111010110111001011010110011L);

				inverse(subject, expected, 49, 128);
			}

			@Test public void fromGray_50_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110010010010000000000000101000011010110111001011100010111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000000110010010010000000000000101000011010110111001011100010111L);

				inverse(subject, expected, 50, 128);
			}

			@Test public void fromGray_51_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100110111000000000000000110101001010110111001011101111101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000001100110111000000000000000110101001010110111001011101111101L);

				inverse(subject, expected, 51, 128);
			}

			@Test public void fromGray_52_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011010000001000000000000001001111001010110111001011111100101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000011010000001000000000000001001111001010110111001011111100101L);

				inverse(subject, expected, 52, 128);
			}

			@Test public void fromGray_53_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000110101010110000000000000001101001101010110111001100001001111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0000110101010110000000000000001101001101010110111001100001001111L);

				inverse(subject, expected, 53, 128);
			}

			@Test public void fromGray_54_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001101100000010000000000000010011111101010110111001100010111011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0001101100000010000000000000010011111101010110111001100010111011L);

				inverse(subject, expected, 54, 128);
			}

			@Test public void fromGray_55_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0011011101011110000000000000011010110101010110111001100100101001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0011011101011110000000000000011010110101010110111001100100101001L);

				inverse(subject, expected, 55, 128);
			}

			@Test public void fromGray_56_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0111000000011110000000000000101000110101010110111001100110011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b0111000000011110000000000000101000110101010110111001100110011001L);

				inverse(subject, expected, 56, 128);
			}

			@Test public void fromGray_57_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b1110010110101110000000000000110111000101010110111001101000001011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000000L,
				                   0b1110010110101110000000000000110111000101010110111001101000001011L);

				inverse(subject, expected, 57, 128);
			}

			@Test public void fromGray_58_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1101000011101110000000000001010100000101010110111001101001111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000001L,
				                   0b1101000011101110000000000001010100000101010110111001101001111111L);

				inverse(subject, expected, 58, 128);
			}

			@Test public void fromGray_59_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1011011110101110000000000001110001100101010110111001101011110101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000011L,
				                   0b1011011110101110000000000001110001100101010110111001101011110101L);

				inverse(subject, expected, 59, 128);
			}

			@Test public void fromGray_60_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000000111L,
				                   0b1000010110101110000000000010101101100101010110111001101101101101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000000111L,
				                   0b1000010110101110000000000010101101100101010110111001101101101101L);

				inverse(subject, expected, 60, 128);
			}

			@Test public void fromGray_61_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000001111L,
				                   0b0100001010101110000000000011101010100101010110111001101111100111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000001111L,
				                   0b0100001010101110000000000011101010100101010110111001101111100111L);

				inverse(subject, expected, 61, 128);
			}

			@Test public void fromGray_62_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b0011111010101110000000000101100110100101010110111001110001100011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000011111L,
				                   0b0011111010101110000000000101100110100101010110111001110001100011L);

				inverse(subject, expected, 62, 128);
			}

			@Test public void fromGray_63_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000000111111L,
				                   0b0011101010101110000000000111100100100101010110111001110011100001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000000111111L,
				                   0b0011101010101110000000000111100100100101010110111001110011100001L);

				inverse(subject, expected, 63, 128);
			}

			@Test public void fromGray_64_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000010000000L,
				                   0b0011101010101110000000001011100100100101010110111001110101100001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000010000000L,
				                   0b0011101010101110000000001011100100100101010110111001110101100001L);

				inverse(subject, expected, 64, 128);
			}

			@Test public void fromGray_65_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000000100000100L,
				                   0b0100101010101110000000001111101000100101010110111001110111100011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000000100000100L,
				                   0b0100101010101110000000001111101000100101010110111001110111100011L);

				inverse(subject, expected, 65, 128);
			}

			@Test public void fromGray_66_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000001000010000L,
				                   0b1000101010101110000000010111111000100101010110111001111001100111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000001000010000L,
				                   0b1000101010101110000000010111111000100101010110111001111001100111L);

				inverse(subject, expected, 66, 128);
			}

			@Test public void fromGray_67_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000010000110001L,
				                   0b0100101010101110000000100000010000100101010110111001111011101101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000010000110001L,
				                   0b0100101010101110000000100000010000100101010110111001111011101101L);

				inverse(subject, expected, 67, 128);
			}

			@Test public void fromGray_68_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000000100010000011L,
				                   0b0100101010101110000000110001010000100101010110111001111101110101L);
				T expected = build(0b0000000000000000000000000000000000000000000000000000100010000011L,
				                   0b0100101010101110000000110001010000100101010110111001111101110101L);

				inverse(subject, expected, 68, 128);
			}

			@Test public void fromGray_69_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000001000101001000L,
				                   0b0100101010101110000001000010100000100101010110111001111111111111L);
				T expected = build(0b0000000000000000000000000000000000000000000000000001000101001000L,
				                   0b0100101010101110000001000010100000100101010110111001111111111111L);

				inverse(subject, expected, 69, 128);
			}

			@Test public void fromGray_70_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000010001100010100L,
				                   0b0100101010101110000001100101100000100101010110111010000010001011L);
				T expected = build(0b0000000000000000000000000000000000000000000000000010001100010100L,
				                   0b0100101010101110000001100101100000100101010110111010000010001011L);

				inverse(subject, expected, 70, 128);
			}

			@Test public void fromGray_71_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000000100011100110000L,
				                   0b0100101010101110000010001001000000100101010110111010000100011001L);
				T expected = build(0b0000000000000000000000000000000000000000000000000100011100110000L,
				                   0b0100101010101110000010001001000000100101010110111010000100011001L);

				inverse(subject, expected, 71, 128);
			}

			@Test public void fromGray_72_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000001001000001110000L,
				                   0b0100101010101110000011010001000000100101010110111010000110101001L);
				T expected = build(0b0000000000000000000000000000000000000000000000001001000001110000L,
				                   0b0100101010101110000011010001000000100101010110111010000110101001L);

				inverse(subject, expected, 72, 128);
			}

			@Test public void fromGray_73_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000010010010100000000L,
				                   0b0100101010101110000100011010000000100101010110111010001000111011L);
				T expected = build(0b0000000000000000000000000000000000000000000000010010010100000000L,
				                   0b0100101010101110000100011010000000100101010110111010001000111011L);

				inverse(subject, expected, 73, 128);
			}

			@Test public void fromGray_74_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000000100101001001000000L,
				                   0b0100101010101110000110101110000000100101010110111010001011001111L);
				T expected = build(0b0000000000000000000000000000000000000000000000100101001001000000L,
				                   0b0100101010101110000110101110000000100101010110111010001011001111L);

				inverse(subject, expected, 74, 128);
			}

			@Test public void fromGray_75_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000001001011010100000000L,
				                   0b0100101010101110001001000100000000100101010110111010001101100101L);
				T expected = build(0b0000000000000000000000000000000000000000000001001011010100000000L,
				                   0b0100101010101110001001000100000000100101010110111010001101100101L);

				inverse(subject, expected, 75, 128);
			}

			@Test public void fromGray_76_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000010011000101100000000L,
				                   0b0100101010101110001101110100000000100101010110111010001111111101L);
				T expected = build(0b0000000000000000000000000000000000000000000010011000101100000000L,
				                   0b0100101010101110001101110100000000100101010110111010001111111101L);

				inverse(subject, expected, 76, 128);
			}

			@Test public void fromGray_77_128() {
				T subject  = build(0b0000000000000000000000000000000000000000000100110101100000000000L,
				                   0b0100101010101110010010101000000000100101010110111010010010010111L);
				T expected = build(0b0000000000000000000000000000000000000000000100110101100000000000L,
				                   0b0100101010101110010010101000000000100101010110111010010010010111L);

				inverse(subject, expected, 77, 128);
			}

			@Test public void fromGray_78_128() {
				T subject  = build(0b0000000000000000000000000000000000000000001001110011010000000000L,
				                   0b0100101010101110011100011000000000100101010110111010010100110011L);
				T expected = build(0b0000000000000000000000000000000000000000001001110011010000000000L,
				                   0b0100101010101110011100011000000000100101010110111010010100110011L);

				inverse(subject, expected, 78, 128);
			}

			@Test public void fromGray_79_128() {
				T subject  = build(0b0000000000000000000000000000000000000000010011110111000000000000L,
				                   0b0100101010101110100110010000000000100101010110111010010111010001L);
				T expected = build(0b0000000000000000000000000000000000000000010011110111000000000000L,
				                   0b0100101010101110100110010000000000100101010110111010010111010001L);

				inverse(subject, expected, 79, 128);
			}

			@Test public void fromGray_80_128() {
				T subject  = build(0b0000000000000000000000000000000000000000101000001111000000000000L,
				                   0b0100101010101110111010010000000000100101010110111010011001110001L);
				T expected = build(0b0000000000000000000000000000000000000000101000001111000000000000L,
				                   0b0100101010101110111010010000000000100101010110111010011001110001L);

				inverse(subject, expected, 80, 128);
			}

			@Test public void fromGray_81_128() {
				T subject  = build(0b0000000000000000000000000000000000000001010001000000000000000000L,
				                   0b0100101010101111001110100000000000100101010110111010011100010011L);
				T expected = build(0b0000000000000000000000000000000000000001010001000000000000000000L,
				                   0b0100101010101111001110100000000000100101010110111010011100010011L);

				inverse(subject, expected, 81, 128);
			}

			@Test public void fromGray_82_128() {
				T subject  = build(0b0000000000000000000000000000000000000010100100100100000000000000L,
				                   0b0100101010101111110111100000000000100101010110111010011110110111L);
				T expected = build(0b0000000000000000000000000000000000000010100100100100000000000000L,
				                   0b0100101010101111110111100000000000100101010110111010011110110111L);

				inverse(subject, expected, 82, 128);
			}

			@Test public void fromGray_83_128() {
				T subject  = build(0b0000000000000000000000000000000000000101001101110000000000000000L,
				                   0b0100101010110000100001000000000000100101010110111010100001011101L);
				T expected = build(0b0000000000000000000000000000000000000101001101110000000000000000L,
				                   0b0100101010110000100001000000000000100101010110111010100001011101L);

				inverse(subject, expected, 83, 128);
			}

			@Test public void fromGray_84_128() {
				T subject  = build(0b0000000000000000000000000000000000001010100000010000000000000000L,
				                   0b0100101010110001110101000000000000100101010110111010100100000101L);
				T expected = build(0b0000000000000000000000000000000000001010100000010000000000000000L,
				                   0b0100101010110001110101000000000000100101010110111010100100000101L);

				inverse(subject, expected, 84, 128);
			}

			@Test public void fromGray_85_128() {
				T subject  = build(0b0000000000000000000000000000000000010101010101100000000000000000L,
				                   0b0100101010110011001010000000000000100101010110111010100110101111L);
				T expected = build(0b0000000000000000000000000000000000010101010101100000000000000000L,
				                   0b0100101010110011001010000000000000100101010110111010100110101111L);

				inverse(subject, expected, 85, 128);
			}

			@Test public void fromGray_86_128() {
				T subject  = build(0b0000000000000000000000000000000000101011000000100000000000000000L,
				                   0b0100101010110101110110000000000000100101010110111010101001011011L);
				T expected = build(0b0000000000000000000000000000000000101011000000100000000000000000L,
				                   0b0100101010110101110110000000000000100101010110111010101001011011L);

				inverse(subject, expected, 86, 128);
			}

			@Test public void fromGray_87_128() {
				T subject  = build(0b0000000000000000000000000000000001010111010111100000000000000000L,
				                   0b0100101010111000100100000000000000100101010110111010101100001001L);
				T expected = build(0b0000000000000000000000000000000001010111010111100000000000000000L,
				                   0b0100101010111000100100000000000000100101010110111010101100001001L);

				inverse(subject, expected, 87, 128);
			}

			@Test public void fromGray_88_128() {
				T subject  = build(0b0000000000000000000000000000000010110000000111100000000000000000L,
				                   0b0100101010111110000100000000000000100101010110111010101110111001L);
				T expected = build(0b0000000000000000000000000000000010110000000111100000000000000000L,
				                   0b0100101010111110000100000000000000100101010110111010101110111001L);

				inverse(subject, expected, 88, 128);
			}

			@Test public void fromGray_89_128() {
				T subject  = build(0b0000000000000000000000000000000101100101101011100000000000000000L,
				                   0b0100101011000011101000000000000000100101010110111010110001101011L);
				T expected = build(0b0000000000000000000000000000000101100101101011100000000000000000L,
				                   0b0100101011000011101000000000000000100101010110111010110001101011L);

				inverse(subject, expected, 89, 128);
			}

			@Test public void fromGray_90_128() {
				T subject  = build(0b0000000000000000000000000000001011010000111011100000000000000000L,
				                   0b0100101011001110111000000000000000100101010110111010110100011111L);
				T expected = build(0b0000000000000000000000000000001011010000111011100000000000000000L,
				                   0b0100101011001110111000000000000000100101010110111010110100011111L);

				inverse(subject, expected, 90, 128);
			}

			@Test public void fromGray_91_128() {
				T subject  = build(0b0000000000000000000000000000010110110111101011100000000000000000L,
				                   0b0100101011011010010000000000000000100101010110111010110111010101L);
				T expected = build(0b0000000000000000000000000000010110110111101011100000000000000000L,
				                   0b0100101011011010010000000000000000100101010110111010110111010101L);

				inverse(subject, expected, 91, 128);
			}

			@Test public void fromGray_92_128() {
				T subject  = build(0b0000000000000000000000000000101110000101101011100000000000000000L,
				                   0b0100101011110001010000000000000000100101010110111010111010001101L);
				T expected = build(0b0000000000000000000000000000101110000101101011100000000000000000L,
				                   0b0100101011110001010000000000000000100101010110111010111010001101L);

				inverse(subject, expected, 92, 128);
			}

			@Test public void fromGray_93_128() {
				T subject  = build(0b0000000000000000000000000001011101000010101011100000000000000000L,
				                   0b0100101100001000100000000000000000100101010110111010111101000111L);
				T expected = build(0b0000000000000000000000000001011101000010101011100000000000000000L,
				                   0b0100101100001000100000000000000000100101010110111010111101000111L);

				inverse(subject, expected, 93, 128);
			}

			@Test public void fromGray_94_128() {
				T subject  = build(0b0000000000000000000000000010111100111110101011100000000000000000L,
				                   0b0100101100110111100000000000000000100101010110111011000000000011L);
				T expected = build(0b0000000000000000000000000010111100111110101011100000000000000000L,
				                   0b0100101100110111100000000000000000100101010110111011000000000011L);

				inverse(subject, expected, 94, 128);
			}

			@Test public void fromGray_95_128() {
				T subject  = build(0b0000000000000000000000000101111100111010101011100000000000000000L,
				                   0b0100101101100111000000000000000000100101010110111011000011000001L);
				T expected = build(0b0000000000000000000000000101111100111010101011100000000000000000L,
				                   0b0100101101100111000000000000000000100101010110111011000011000001L);

				inverse(subject, expected, 95, 128);
			}

			@Test public void fromGray_96_128() {
				T subject  = build(0b0000000000000000000000001100000000111010101011100000000000000000L,
				                   0b0100101111000111000000000000000000100101010110111011000110000001L);
				T expected = build(0b0000000000000000000000001100000000111010101011100000000000000000L,
				                   0b0100101111000111000000000000000000100101010110111011000110000001L);

				inverse(subject, expected, 96, 128);
			}

			@Test public void fromGray_97_128() {
				T subject  = build(0b0000000000000000000000011000010001001010101011100000000000000000L,
				                   0b0100110000101000000000000000000000100101010110111011001001000011L);
				T expected = build(0b0000000000000000000000011000010001001010101011100000000000000000L,
				                   0b0100110000101000000000000000000000100101010110111011001001000011L);

				inverse(subject, expected, 97, 128);
			}

			@Test public void fromGray_98_128() {
				T subject  = build(0b0000000000000000000000110001000010001010101011100000000000000000L,
				                   0b0100110011101100000000000000000000100101010110111011001100000111L);
				T expected = build(0b0000000000000000000000110001000010001010101011100000000000000000L,
				                   0b0100110011101100000000000000000000100101010110111011001100000111L);

				inverse(subject, expected, 98, 128);
			}

			@Test public void fromGray_99_128() {
				T subject  = build(0b0000000000000000000001100011000101001010101011100000000000000000L,
				                   0b0100110110110010000000000000000000100101010110111011001111001101L);
				T expected = build(0b0000000000000000000001100011000101001010101011100000000000000000L,
				                   0b0100110110110010000000000000000000100101010110111011001111001101L);

				inverse(subject, expected, 99, 128);
			}

			@Test public void fromGray_100_128() {
				T subject  = build(0b0000000000000000000011001000001101001010101011100000000000000000L,
				                   0b0100111101000010000000000000000000100101010110111011010010010101L);
				T expected = build(0b0000000000000000000011001000001101001010101011100000000000000000L,
				                   0b0100111101000010000000000000000000100101010110111011010010010101L);

				inverse(subject, expected, 100, 128);
			}

			@Test public void fromGray_101_128() {
				T subject  = build(0b0000000000000000000110010100100001001010101011100000000000000000L,
				                   0b0101000011010110000000000000000000100101010110111011010101011111L);
				T expected = build(0b0000000000000000000110010100100001001010101011100000000000000000L,
				                   0b0101000011010110000000000000000000100101010110111011010101011111L);

				inverse(subject, expected, 101, 128);
			}

			@Test public void fromGray_102_128() {
				T subject  = build(0b0000000000000000001100110001010001001010101011100000000000000000L,
				                   0b0101010000000110000000000000000000100101010110111011011000101011L);
				T expected = build(0b0000000000000000001100110001010001001010101011100000000000000000L,
				                   0b0101010000000110000000000000000000100101010110111011011000101011L);

				inverse(subject, expected, 102, 128);
			}

			@Test public void fromGray_103_128() {
				T subject  = build(0b0000000000000000011001110011000001001010101011100000000000000000L,
				                   0b0101011100111110000000000000000000100101010110111011011011111001L);
				T expected = build(0b0000000000000000011001110011000001001010101011100000000000000000L,
				                   0b0101011100111110000000000000000000100101010110111011011011111001L);

				inverse(subject, expected, 103, 128);
			}

			@Test public void fromGray_104_128() {
				T subject  = build(0b0000000000000000110100000111000001001010101011100000000000000000L,
				                   0b0101110110111110000000000000000000100101010110111011011111001001L);
				T expected = build(0b0000000000000000110100000111000001001010101011100000000000000000L,
				                   0b0101110110111110000000000000000000100101010110111011011111001001L);

				inverse(subject, expected, 104, 128);
			}

			@Test public void fromGray_105_128() {
				T subject  = build(0b0000000000000001101001010000000001001010101011100000000000000000L,
				                   0b0110010001001110000000000000000000100101010110111011100010011011L);
				T expected = build(0b0000000000000001101001010000000001001010101011100000000000000000L,
				                   0b0110010001001110000000000000000000100101010110111011100010011011L);

				inverse(subject, expected, 105, 128);
			}

			@Test public void fromGray_106_128() {
				T subject  = build(0b0000000000000011010100100100000001001010101011100000000000000000L,
				                   0b0111000110001110000000000000000000100101010110111011100101101111L);
				T expected = build(0b0000000000000011010100100100000001001010101011100000000000000000L,
				                   0b0111000110001110000000000000000000100101010110111011100101101111L);

				inverse(subject, expected, 106, 128);
			}

			@Test public void fromGray_107_128() {
				T subject  = build(0b0000000000000110101101010000000001001010101011100000000000000000L,
				                   0b0111111011101110000000000000000000100101010110111011101001000101L);
				T expected = build(0b0000000000000110101101010000000001001010101011100000000000000000L,
				                   0b0111111011101110000000000000000000100101010110111011101001000101L);

				inverse(subject, expected, 107, 128);
			}

			@Test public void fromGray_108_128() {
				T subject  = build(0b0000000000001101100010110000000001001010101011100000000000000000L,
				                   0b1001100111101110000000000000000000100101010110111011101100011101L);
				T expected = build(0b0000000000001101100010110000000001001010101011100000000000000000L,
				                   0b1001100111101110000000000000000000100101010110111011101100011101L);

				inverse(subject, expected, 108, 128);
			}

			@Test public void fromGray_109_128() {
				T subject  = build(0b0000000000011011010110000000000001001010101011100000000000000000L,
				                   0b1011010100101110000000000000000000100101010110111011101111110111L);
				T expected = build(0b0000000000011011010110000000000001001010101011100000000000000000L,
				                   0b1011010100101110000000000000000000100101010110111011101111110111L);

				inverse(subject, expected, 109, 128);
			}

			@Test public void fromGray_110_128() {
				T subject  = build(0b0000000000110111001101000000000001001010101011100000000000000000L,
				                   0b1110110000101110000000000000000000100101010110111011110011010011L);
				T expected = build(0b0000000000110111001101000000000001001010101011100000000000000000L,
				                   0b1110110000101110000000000000000000100101010110111011110011010011L);

				inverse(subject, expected, 110, 128);
			}

			@Test public void fromGray_111_128() {
				T subject  = build(0b0000000001101111011100000000000001001010101011100000000000000001L,
				                   0b0010001110101110000000000000000000100101010110111011110110110001L);
				T expected = build(0b0000000001101111011100000000000001001010101011100000000000000001L,
				                   0b0010001110101110000000000000000000100101010110111011110110110001L);

				inverse(subject, expected, 111, 128);
			}

			@Test public void fromGray_112_128() {
				T subject  = build(0b0000000011100000111100000000000001001010101011100000000000000001L,
				                   0b1001001110101110000000000000000000100101010110111011111010010001L);
				T expected = build(0b0000000011100000111100000000000001001010101011100000000000000001L,
				                   0b1001001110101110000000000000000000100101010110111011111010010001L);

				inverse(subject, expected, 112, 128);
			}

			@Test public void fromGray_113_128() {
				T subject  = build(0b0000000111000100000000000000000001001010101011100000000000000010L,
				                   0b0000010010101110000000000000000000100101010110111011111101110011L);
				T expected = build(0b0000000111000100000000000000000001001010101011100000000000000010L,
				                   0b0000010010101110000000000000000000100101010110111011111101110011L);

				inverse(subject, expected, 113, 128);
			}

			@Test public void fromGray_114_128() {
				T subject  = build(0b0000001110010010010000000000000001001010101011100000000000000010L,
				                   0b1110100010101110000000000000000000100101010110111100000001010111L);
				T expected = build(0b0000001110010010010000000000000001001010101011100000000000000010L,
				                   0b1110100010101110000000000000000000100101010110111100000001010111L);

				inverse(subject, expected, 114, 128);
			}

			@Test public void fromGray_115_128() {
				T subject  = build(0b0000011100110111000000000000000001001010101011100000000000000011L,
				                   0b1100111010101110000000000000000000100101010110111100000100111101L);
				T expected = build(0b0000011100110111000000000000000001001010101011100000000000000011L,
				                   0b1100111010101110000000000000000000100101010110111100000100111101L);

				inverse(subject, expected, 115, 128);
			}

			@Test public void fromGray_116_128() {
				T subject  = build(0b0000111010000001000000000000000001001010101011100000000000000101L,
				                   0b1001111010101110000000000000000000100101010110111100001000100101L);
				T expected = build(0b0000111010000001000000000000000001001010101011100000000000000101L,
				                   0b1001111010101110000000000000000000100101010110111100001000100101L);

				inverse(subject, expected, 116, 128);
			}

			@Test public void fromGray_117_128() {
				T subject  = build(0b0001110101010110000000000000000001001010101011100000000000000111L,
				                   0b0111001010101110000000000000000000100101010110111100001100001111L);
				T expected = build(0b0001110101010110000000000000000001001010101011100000000000000111L,
				                   0b0111001010101110000000000000000000100101010110111100001100001111L);

				inverse(subject, expected, 117, 128);
			}

			@Test public void fromGray_118_128() {
				T subject  = build(0b0011101100000010000000000000000001001010101011100000000000001011L,
				                   0b0010001010101110000000000000000000100101010110111100001111111011L);
				T expected = build(0b0011101100000010000000000000000001001010101011100000000000001011L,
				                   0b0010001010101110000000000000000000100101010110111100001111111011L);

				inverse(subject, expected, 118, 128);
			}

			@Test public void fromGray_119_128() {
				T subject  = build(0b0111011101011110000000000000000001001010101011100000000000001110L,
				                   0b1101101010101110000000000000000000100101010110111100010011101001L);
				T expected = build(0b0111011101011110000000000000000001001010101011100000000000001110L,
				                   0b1101101010101110000000000000000000100101010110111100010011101001L);

				inverse(subject, expected, 119, 128);
			}

			@Test public void fromGray_120_128() {
				T subject  = build(0b1111000000011110000000000000000001001010101011100000000000010110L,
				                   0b0101101010101110000000000000000000100101010110111100010111011001L);
				T expected = build(0b1111000000011110000000000000000001001010101011100000000000010110L,
				                   0b0101101010101110000000000000000000100101010110111100010111011001L);

				inverse(subject, expected, 120, 128);
			}

			@Test public void fromGray_121_128() {
				T subject  = build(0b1110010110101110000000000000000001001010101011100000000000011101L,
				                   0b1110101010101110000000000000000000100101010110111100011011001011L);
				T expected = build(0b1110010110101110000000000000000001001010101011100000000000011101L,
				                   0b1110101010101110000000000000000000100101010110111100011011001011L);

				inverse(subject, expected, 121, 128);
			}

			@Test public void fromGray_122_128() {
				T subject  = build(0b1101000011101110000000000000000001001010101011100000000000101101L,
				                   0b0010101010101110000000000000000000100101010110111100011110111111L);
				T expected = build(0b1101000011101110000000000000000001001010101011100000000000101101L,
				                   0b0010101010101110000000000000000000100101010110111100011110111111L);

				inverse(subject, expected, 122, 128);
			}

			@Test public void fromGray_123_128() {
				T subject  = build(0b1011011110101110000000000000000001001010101011100000000000111100L,
				                   0b1000101010101110000000000000000000100101010110111100100010110101L);
				T expected = build(0b1011011110101110000000000000000001001010101011100000000000111100L,
				                   0b1000101010101110000000000000000000100101010110111100100010110101L);

				inverse(subject, expected, 123, 128);
			}

			@Test public void fromGray_124_128() {
				T subject  = build(0b1000010110101110000000000000000001001010101011100000000001011011L,
				                   0b1000101010101110000000000000000000100101010110111100100110101101L);
				T expected = build(0b1000010110101110000000000000000001001010101011100000000001011011L,
				                   0b1000101010101110000000000000000000100101010110111100100110101101L);

				inverse(subject, expected, 124, 128);
			}

			@Test public void fromGray_125_128() {
				T subject  = build(0b0100001010101110000000000000000001001010101011100000000001111010L,
				                   0b1100101010101110000000000000000000100101010110111100101010100111L);
				T expected = build(0b0100001010101110000000000000000001001010101011100000000001111010L,
				                   0b1100101010101110000000000000000000100101010110111100101010100111L);

				inverse(subject, expected, 125, 128);
			}

			@Test public void fromGray_126_128() {
				T subject  = build(0b0011111010101110000000000000000001001010101011100000000010111001L,
				                   0b1100101010101110000000000000000000100101010110111100101110100011L);
				T expected = build(0b0011111010101110000000000000000001001010101011100000000010111001L,
				                   0b1100101010101110000000000000000000100101010110111100101110100011L);

				inverse(subject, expected, 126, 128);
			}

			@Test public void fromGray_127_128() {
				T subject  = build(0b0011101010101110000000000000000001001010101011100000000011111001L,
				                   0b0100101010101110000000000000000000100101010110111100110010100001L);
				T expected = build(0b0011101010101110000000000000000001001010101011100000000011111001L,
				                   0b0100101010101110000000000000000000100101010110111100110010100001L);

				inverse(subject, expected, 127, 128);
			}

			private void inverse(T subject, T expected, int from, int to) {
				toGray(subject, from, to);
				fromGray(subject, from, to);
				
				assertThat(subject, is(equalTo(expected)));
			}
		}
	}
}
